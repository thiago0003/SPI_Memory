
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 11 00 20 79 17 00 00 4b 48 00 00 4d 17 00 00     @.. y...KH..M...
  10:	4d 17 00 00 4d 17 00 00 4d 17 00 00 00 00 00 00     M...M...M.......
	...
  2c:	65 14 00 00 4d 17 00 00 00 00 00 00 11 14 00 00     e...M...........
  3c:	4d 17 00 00                                         M...

00000040 <_irq_vector_table>:
  40:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
  50:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
  60:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
  70:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
  80:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
  90:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
  a0:	15 15 00 00 15 15 00 00 15 15 00 00 15 15 00 00     ................
  b0:	15 15 00 00 15 15 00 00                             ........

Disassembly of section text:

000000b8 <__aeabi_uldivmod>:
      b8:	b953      	cbnz	r3, d0 <CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE+0x8>
      ba:	b94a      	cbnz	r2, d0 <CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE+0x8>
      bc:	2900      	cmp	r1, #0
      be:	bf08      	it	eq
      c0:	2800      	cmpeq	r0, #0
      c2:	bf1c      	itt	ne
      c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      cc:	f000 b80c 	b.w	e8 <__aeabi_idiv0>
      d0:	f1ad 0c08 	sub.w	ip, sp, #8
      d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      d8:	f000 f808 	bl	ec <__udivmoddi4>
      dc:	f8dd e004 	ldr.w	lr, [sp, #4]
      e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      e4:	b004      	add	sp, #16
      e6:	4770      	bx	lr

000000e8 <__aeabi_idiv0>:
      e8:	4770      	bx	lr
      ea:	bf00      	nop

000000ec <__udivmoddi4>:
      ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      f0:	4686      	mov	lr, r0
      f2:	468c      	mov	ip, r1
      f4:	4608      	mov	r0, r1
      f6:	9e08      	ldr	r6, [sp, #32]
      f8:	4615      	mov	r5, r2
      fa:	4674      	mov	r4, lr
      fc:	4619      	mov	r1, r3
      fe:	2b00      	cmp	r3, #0
     100:	f040 80c2 	bne.w	288 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11b>
     104:	4285      	cmp	r5, r0
     106:	fab2 f282 	clz	r2, r2
     10a:	d945      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     10c:	b14a      	cbz	r2, 122 <CONFIG_IDLE_STACK_SIZE+0x22>
     10e:	f1c2 0320 	rsb	r3, r2, #32
     112:	fa00 fc02 	lsl.w	ip, r0, r2
     116:	fa2e f303 	lsr.w	r3, lr, r3
     11a:	4095      	lsls	r5, r2
     11c:	ea43 0c0c 	orr.w	ip, r3, ip
     120:	4094      	lsls	r4, r2
     122:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     126:	b2a8      	uxth	r0, r5
     128:	fbbc f8fe 	udiv	r8, ip, lr
     12c:	0c23      	lsrs	r3, r4, #16
     12e:	fb0e cc18 	mls	ip, lr, r8, ip
     132:	fb08 f900 	mul.w	r9, r8, r0
     136:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     13a:	4599      	cmp	r9, r3
     13c:	d928      	bls.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     13e:	18eb      	adds	r3, r5, r3
     140:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     144:	d204      	bcs.n	150 <__data_size>
     146:	4599      	cmp	r9, r3
     148:	d902      	bls.n	150 <__data_size>
     14a:	f1a8 0702 	sub.w	r7, r8, #2
     14e:	442b      	add	r3, r5
     150:	eba3 0309 	sub.w	r3, r3, r9
     154:	b2a4      	uxth	r4, r4
     156:	fbb3 fcfe 	udiv	ip, r3, lr
     15a:	fb0e 331c 	mls	r3, lr, ip, r3
     15e:	fb0c f000 	mul.w	r0, ip, r0
     162:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     166:	42a0      	cmp	r0, r4
     168:	d914      	bls.n	194 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x27>
     16a:	192c      	adds	r4, r5, r4
     16c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     170:	d204      	bcs.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     172:	42a0      	cmp	r0, r4
     174:	d902      	bls.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	f1ac 0302 	sub.w	r3, ip, #2
     17a:	442c      	add	r4, r5
     17c:	1a24      	subs	r4, r4, r0
     17e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     182:	b11e      	cbz	r6, 18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>
     184:	40d4      	lsrs	r4, r2
     186:	2300      	movs	r3, #0
     188:	6034      	str	r4, [r6, #0]
     18a:	6073      	str	r3, [r6, #4]
     18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     190:	4647      	mov	r7, r8
     192:	e7dd      	b.n	150 <__data_size>
     194:	4663      	mov	r3, ip
     196:	e7f1      	b.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     198:	bb92      	cbnz	r2, 200 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x93>
     19a:	1b43      	subs	r3, r0, r5
     19c:	2101      	movs	r1, #1
     19e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1a2:	b2af      	uxth	r7, r5
     1a4:	fbb3 fcfe 	udiv	ip, r3, lr
     1a8:	0c20      	lsrs	r0, r4, #16
     1aa:	fb0e 331c 	mls	r3, lr, ip, r3
     1ae:	fb0c f807 	mul.w	r8, ip, r7
     1b2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1b6:	4598      	cmp	r8, r3
     1b8:	d962      	bls.n	280 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x113>
     1ba:	18eb      	adds	r3, r5, r3
     1bc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1c0:	d204      	bcs.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     1c2:	4598      	cmp	r8, r3
     1c4:	d902      	bls.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     1c6:	f1ac 0002 	sub.w	r0, ip, #2
     1ca:	442b      	add	r3, r5
     1cc:	eba3 0308 	sub.w	r3, r3, r8
     1d0:	b2a4      	uxth	r4, r4
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	fb0e 331c 	mls	r3, lr, ip, r3
     1da:	fb0c f707 	mul.w	r7, ip, r7
     1de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1e2:	42a7      	cmp	r7, r4
     1e4:	d94e      	bls.n	284 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x117>
     1e6:	192c      	adds	r4, r5, r4
     1e8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1ec:	d204      	bcs.n	1f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8b>
     1ee:	42a7      	cmp	r7, r4
     1f0:	d902      	bls.n	1f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8b>
     1f2:	f1ac 0302 	sub.w	r3, ip, #2
     1f6:	442c      	add	r4, r5
     1f8:	1be4      	subs	r4, r4, r7
     1fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1fe:	e7c0      	b.n	182 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15>
     200:	f1c2 0320 	rsb	r3, r2, #32
     204:	fa20 f103 	lsr.w	r1, r0, r3
     208:	4095      	lsls	r5, r2
     20a:	4090      	lsls	r0, r2
     20c:	fa2e f303 	lsr.w	r3, lr, r3
     210:	4303      	orrs	r3, r0
     212:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     216:	b2af      	uxth	r7, r5
     218:	fbb1 fcfe 	udiv	ip, r1, lr
     21c:	fb0e 101c 	mls	r0, lr, ip, r1
     220:	0c19      	lsrs	r1, r3, #16
     222:	fb0c f807 	mul.w	r8, ip, r7
     226:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     22a:	4588      	cmp	r8, r1
     22c:	fa04 f402 	lsl.w	r4, r4, r2
     230:	d922      	bls.n	278 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x10b>
     232:	1869      	adds	r1, r5, r1
     234:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     238:	d204      	bcs.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     23a:	4588      	cmp	r8, r1
     23c:	d902      	bls.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     23e:	f1ac 0002 	sub.w	r0, ip, #2
     242:	4429      	add	r1, r5
     244:	eba1 0108 	sub.w	r1, r1, r8
     248:	b29b      	uxth	r3, r3
     24a:	fbb1 fcfe 	udiv	ip, r1, lr
     24e:	fb0e 111c 	mls	r1, lr, ip, r1
     252:	fb0c f707 	mul.w	r7, ip, r7
     256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     25a:	429f      	cmp	r7, r3
     25c:	d90e      	bls.n	27c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x10f>
     25e:	18eb      	adds	r3, r5, r3
     260:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     264:	d204      	bcs.n	270 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x103>
     266:	429f      	cmp	r7, r3
     268:	d902      	bls.n	270 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x103>
     26a:	f1ac 0102 	sub.w	r1, ip, #2
     26e:	442b      	add	r3, r5
     270:	1bdb      	subs	r3, r3, r7
     272:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     276:	e792      	b.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     278:	4660      	mov	r0, ip
     27a:	e7e3      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     27c:	4661      	mov	r1, ip
     27e:	e7f7      	b.n	270 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x103>
     280:	4660      	mov	r0, ip
     282:	e7a3      	b.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     284:	4663      	mov	r3, ip
     286:	e7b7      	b.n	1f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8b>
     288:	4283      	cmp	r3, r0
     28a:	d906      	bls.n	29a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x12d>
     28c:	b916      	cbnz	r6, 294 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x127>
     28e:	2100      	movs	r1, #0
     290:	4608      	mov	r0, r1
     292:	e77b      	b.n	18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>
     294:	e9c6 e000 	strd	lr, r0, [r6]
     298:	e7f9      	b.n	28e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x121>
     29a:	fab3 f783 	clz	r7, r3
     29e:	b98f      	cbnz	r7, 2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     2a0:	4283      	cmp	r3, r0
     2a2:	d301      	bcc.n	2a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x13b>
     2a4:	4572      	cmp	r2, lr
     2a6:	d808      	bhi.n	2ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14d>
     2a8:	ebbe 0402 	subs.w	r4, lr, r2
     2ac:	eb60 0303 	sbc.w	r3, r0, r3
     2b0:	2001      	movs	r0, #1
     2b2:	469c      	mov	ip, r3
     2b4:	b91e      	cbnz	r6, 2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b6:	2100      	movs	r1, #0
     2b8:	e768      	b.n	18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>
     2ba:	4638      	mov	r0, r7
     2bc:	e7fa      	b.n	2b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x147>
     2be:	e9c6 4c00 	strd	r4, ip, [r6]
     2c2:	e7f8      	b.n	2b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x149>
     2c4:	f1c7 0c20 	rsb	ip, r7, #32
     2c8:	40bb      	lsls	r3, r7
     2ca:	fa22 f40c 	lsr.w	r4, r2, ip
     2ce:	431c      	orrs	r4, r3
     2d0:	fa2e f10c 	lsr.w	r1, lr, ip
     2d4:	fa20 f30c 	lsr.w	r3, r0, ip
     2d8:	40b8      	lsls	r0, r7
     2da:	4301      	orrs	r1, r0
     2dc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     2e0:	fa0e f507 	lsl.w	r5, lr, r7
     2e4:	fbb3 f8f9 	udiv	r8, r3, r9
     2e8:	fa1f fe84 	uxth.w	lr, r4
     2ec:	fb09 3018 	mls	r0, r9, r8, r3
     2f0:	0c0b      	lsrs	r3, r1, #16
     2f2:	fb08 fa0e 	mul.w	sl, r8, lr
     2f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     2fa:	459a      	cmp	sl, r3
     2fc:	fa02 f207 	lsl.w	r2, r2, r7
     300:	d940      	bls.n	384 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x217>
     302:	18e3      	adds	r3, r4, r3
     304:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     308:	d204      	bcs.n	314 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a7>
     30a:	459a      	cmp	sl, r3
     30c:	d902      	bls.n	314 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a7>
     30e:	f1a8 0002 	sub.w	r0, r8, #2
     312:	4423      	add	r3, r4
     314:	eba3 030a 	sub.w	r3, r3, sl
     318:	b289      	uxth	r1, r1
     31a:	fbb3 f8f9 	udiv	r8, r3, r9
     31e:	fb09 3318 	mls	r3, r9, r8, r3
     322:	fb08 fe0e 	mul.w	lr, r8, lr
     326:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     32a:	458e      	cmp	lr, r1
     32c:	d92c      	bls.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     32e:	1861      	adds	r1, r4, r1
     330:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     334:	d204      	bcs.n	340 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d3>
     336:	458e      	cmp	lr, r1
     338:	d902      	bls.n	340 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d3>
     33a:	f1a8 0302 	sub.w	r3, r8, #2
     33e:	4421      	add	r1, r4
     340:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     344:	fba0 9802 	umull	r9, r8, r0, r2
     348:	eba1 010e 	sub.w	r1, r1, lr
     34c:	4541      	cmp	r1, r8
     34e:	46ce      	mov	lr, r9
     350:	4643      	mov	r3, r8
     352:	d302      	bcc.n	35a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ed>
     354:	d106      	bne.n	364 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f7>
     356:	454d      	cmp	r5, r9
     358:	d204      	bcs.n	364 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f7>
     35a:	ebb9 0e02 	subs.w	lr, r9, r2
     35e:	eb68 0304 	sbc.w	r3, r8, r4
     362:	3801      	subs	r0, #1
     364:	2e00      	cmp	r6, #0
     366:	d0a6      	beq.n	2b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x149>
     368:	ebb5 020e 	subs.w	r2, r5, lr
     36c:	eb61 0103 	sbc.w	r1, r1, r3
     370:	fa01 fc0c 	lsl.w	ip, r1, ip
     374:	fa22 f307 	lsr.w	r3, r2, r7
     378:	ea4c 0303 	orr.w	r3, ip, r3
     37c:	40f9      	lsrs	r1, r7
     37e:	e9c6 3100 	strd	r3, r1, [r6]
     382:	e798      	b.n	2b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x149>
     384:	4640      	mov	r0, r8
     386:	e7c5      	b.n	314 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a7>
     388:	4643      	mov	r3, r8
     38a:	e7d9      	b.n	340 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d3>

0000038c <SPI_Write>:
    xrate--;
  }
}

void SPI_Write(unsigned char value)                                    
{                                                           
     38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char i;  
  SPI_Delay(1);
    
	for(i=0; i < 8; i++)   
    {
		  gpio_pin_set_dt(&SCK, LOW);
     38e:	4e0d      	ldr	r6, [pc, #52]	; (3c4 <SPI_Write+0x38>)

    	SPI_Delay(1);
    	if(value & 0x80)
			  gpio_pin_set_dt(&SDI, HIGH); //EPD_W21_MOSI_1;
      else
			  gpio_pin_set_dt(&SDI, LOW); //EPD_W21_MOSI_0;
     390:	4f0d      	ldr	r7, [pc, #52]	; (3c8 <SPI_Write+0x3c>)
{                                                           
     392:	4604      	mov	r4, r0
     394:	2508      	movs	r5, #8
		  gpio_pin_set_dt(&SCK, LOW);
     396:	2100      	movs	r1, #0
     398:	4630      	mov	r0, r6
     39a:	f004 f8a9 	bl	44f0 <gpio_pin_set_dt.isra.0>
    	if(value & 0x80)
     39e:	0623      	lsls	r3, r4, #24
			  gpio_pin_set_dt(&SDI, HIGH); //EPD_W21_MOSI_1;
     3a0:	bf4c      	ite	mi
     3a2:	2101      	movmi	r1, #1
			  gpio_pin_set_dt(&SDI, LOW); //EPD_W21_MOSI_0;
     3a4:	2100      	movpl	r1, #0
     3a6:	4638      	mov	r0, r7
     3a8:	f004 f8a2 	bl	44f0 <gpio_pin_set_dt.isra.0>
	for(i=0; i < 8; i++)   
     3ac:	3d01      	subs	r5, #1
		  value = (value << 1); 
    	
		  SPI_Delay(1);
		  driver_delay_us(1);
  
		  gpio_pin_set_dt(&SCK, HIGH); //EPD_W21_CLK_1;
     3ae:	2101      	movs	r1, #1
     3b0:	4630      	mov	r0, r6
     3b2:	f004 f89d 	bl	44f0 <gpio_pin_set_dt.isra.0>
		  value = (value << 1); 
     3b6:	0064      	lsls	r4, r4, #1
	for(i=0; i < 8; i++)   
     3b8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		  value = (value << 1); 
     3bc:	b2e4      	uxtb	r4, r4
	for(i=0; i < 8; i++)   
     3be:	d1ea      	bne.n	396 <SPI_Write+0xa>
        
		  SPI_Delay(1);
    }
}
     3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c2:	bf00      	nop
     3c4:	00005500 	.word	0x00005500
     3c8:	000054f8 	.word	0x000054f8

000003cc <Epaper_Write_Command>:

void Epaper_Write_Command(unsigned char command)
{
     3cc:	b538      	push	{r3, r4, r5, lr}
	SPI_Delay(1);

	gpio_pin_set_dt(&CS, LOW);
     3ce:	4d09      	ldr	r5, [pc, #36]	; (3f4 <Epaper_Write_Command+0x28>)
{
     3d0:	4604      	mov	r4, r0
	gpio_pin_set_dt(&CS, LOW);
     3d2:	2100      	movs	r1, #0
     3d4:	4628      	mov	r0, r5
     3d6:	f004 f88b 	bl	44f0 <gpio_pin_set_dt.isra.0>

	gpio_pin_set_dt(&DC, LOW); // command write
     3da:	2100      	movs	r1, #0
     3dc:	4806      	ldr	r0, [pc, #24]	; (3f8 <Epaper_Write_Command+0x2c>)
     3de:	f004 f887 	bl	44f0 <gpio_pin_set_dt.isra.0>

	SPI_Write(command);
     3e2:	4620      	mov	r0, r4
     3e4:	f7ff ffd2 	bl	38c <SPI_Write>
	
	gpio_pin_set_dt(&CS, HIGH);
     3e8:	4628      	mov	r0, r5
     3ea:	2101      	movs	r1, #1

}
     3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	gpio_pin_set_dt(&CS, HIGH);
     3f0:	f004 b87e 	b.w	44f0 <gpio_pin_set_dt.isra.0>
     3f4:	00005508 	.word	0x00005508
     3f8:	00005510 	.word	0x00005510

000003fc <Epaper_Write_Data>:

void Epaper_Write_Data(unsigned char command)
{
     3fc:	b538      	push	{r3, r4, r5, lr}
  SPI_Delay(1);
            
  gpio_pin_set_dt(&CS, LOW);
     3fe:	4d09      	ldr	r5, [pc, #36]	; (424 <CONFIG_MAIN_STACK_SIZE+0x24>)
{
     400:	4604      	mov	r4, r0
  gpio_pin_set_dt(&CS, LOW);
     402:	2100      	movs	r1, #0
     404:	4628      	mov	r0, r5
     406:	f004 f873 	bl	44f0 <gpio_pin_set_dt.isra.0>

  gpio_pin_set_dt(&DC, HIGH); // command write
     40a:	2101      	movs	r1, #1
     40c:	4806      	ldr	r0, [pc, #24]	; (428 <CONFIG_MAIN_STACK_SIZE+0x28>)
     40e:	f004 f86f 	bl	44f0 <gpio_pin_set_dt.isra.0>
  
  SPI_Write(command);
     412:	4620      	mov	r0, r4
     414:	f7ff ffba 	bl	38c <SPI_Write>
  
  gpio_pin_set_dt(&CS, HIGH);
     418:	4628      	mov	r0, r5
     41a:	2101      	movs	r1, #1

}
     41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  gpio_pin_set_dt(&CS, HIGH);
     420:	f004 b866 	b.w	44f0 <gpio_pin_set_dt.isra.0>
     424:	00005508 	.word	0x00005508
     428:	00005510 	.word	0x00005510

0000042c <Epaper_READBUSY>:
  Epaper_Write_Data(0x01); 
  k_msleep(100);
}

void Epaper_READBUSY(void)
{ 
     42c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
     42e:	4c08      	ldr	r4, [pc, #32]	; (450 <Epaper_READBUSY+0x24>)
     430:	6925      	ldr	r5, [r4, #16]
	return api->port_get_raw(port, value);
     432:	68a3      	ldr	r3, [r4, #8]
     434:	4806      	ldr	r0, [pc, #24]	; (450 <Epaper_READBUSY+0x24>)
     436:	685b      	ldr	r3, [r3, #4]
     438:	a901      	add	r1, sp, #4
     43a:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     43c:	2800      	cmp	r0, #0
     43e:	d1f8      	bne.n	432 <Epaper_READBUSY+0x6>
		*value ^= data->invert;
     440:	682a      	ldr	r2, [r5, #0]
     442:	9b01      	ldr	r3, [sp, #4]
     444:	4053      	eors	r3, r2
  while(1)
  { 
    if(gpio_pin_get_dt(&BUSY) == 0)
     446:	06db      	lsls	r3, r3, #27
     448:	d4f3      	bmi.n	432 <Epaper_READBUSY+0x6>
      break;;
  }  
}
     44a:	b003      	add	sp, #12
     44c:	bd30      	pop	{r4, r5, pc}
     44e:	bf00      	nop
     450:	0000536c 	.word	0x0000536c

00000454 <EPD_HW_Init>:
{
     454:	b510      	push	{r4, lr}
  gpio_pin_set_dt(&RES, LOW); // Module reset
     456:	4c34      	ldr	r4, [pc, #208]	; (528 <EPD_HW_Init+0xd4>)
     458:	2100      	movs	r1, #0
     45a:	4620      	mov	r0, r4
     45c:	f004 f848 	bl	44f0 <gpio_pin_set_dt.isra.0>
  k_msleep(10); //At least 10ms delay 
     460:	200a      	movs	r0, #10
     462:	f004 f86e 	bl	4542 <k_msleep.isra.0>
  gpio_pin_set_dt(&RES, HIGH);
     466:	2101      	movs	r1, #1
     468:	4620      	mov	r0, r4
     46a:	f004 f841 	bl	44f0 <gpio_pin_set_dt.isra.0>
  k_msleep(10); //At least 10ms delay  
     46e:	200a      	movs	r0, #10
     470:	f004 f867 	bl	4542 <k_msleep.isra.0>
  Epaper_READBUSY();    
     474:	f7ff ffda 	bl	42c <Epaper_READBUSY>
  Epaper_Write_Command(0x12);  //SWRESET
     478:	2012      	movs	r0, #18
     47a:	f7ff ffa7 	bl	3cc <Epaper_Write_Command>
  Epaper_READBUSY();   
     47e:	f7ff ffd5 	bl	42c <Epaper_READBUSY>
  Epaper_Write_Command(0x01); //Driver output control      
     482:	2001      	movs	r0, #1
     484:	f7ff ffa2 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0xF9);
     488:	20f9      	movs	r0, #249	; 0xf9
     48a:	f7ff ffb7 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Data(0x00);
     48e:	2000      	movs	r0, #0
     490:	f7ff ffb4 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Data(0x00);
     494:	2000      	movs	r0, #0
     496:	f7ff ffb1 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x11); //data entry mode       
     49a:	2011      	movs	r0, #17
     49c:	f7ff ff96 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0x01);
     4a0:	2001      	movs	r0, #1
     4a2:	f7ff ffab 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x44); //set Ram-X address start/end position   
     4a6:	2044      	movs	r0, #68	; 0x44
     4a8:	f7ff ff90 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0x00);
     4ac:	2000      	movs	r0, #0
     4ae:	f7ff ffa5 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Data(0x0F);    //0x0F-->(15+1)*8=128
     4b2:	200f      	movs	r0, #15
     4b4:	f7ff ffa2 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x45); //set Ram-Y address start/end position          
     4b8:	2045      	movs	r0, #69	; 0x45
     4ba:	f7ff ff87 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0xF9);   //0xF9-->(249+1)=250
     4be:	20f9      	movs	r0, #249	; 0xf9
     4c0:	f7ff ff9c 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Data(0x00);
     4c4:	2000      	movs	r0, #0
     4c6:	f7ff ff99 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Data(0x00);
     4ca:	2000      	movs	r0, #0
     4cc:	f7ff ff96 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Data(0x00); 
     4d0:	2000      	movs	r0, #0
     4d2:	f7ff ff93 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x3C); //BorderWavefrom
     4d6:	203c      	movs	r0, #60	; 0x3c
     4d8:	f7ff ff78 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0x05);  
     4dc:	2005      	movs	r0, #5
     4de:	f7ff ff8d 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x18); //Read built-in temperature sensor
     4e2:	2018      	movs	r0, #24
     4e4:	f7ff ff72 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0x80);  
     4e8:	2080      	movs	r0, #128	; 0x80
     4ea:	f7ff ff87 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x21); //  Display update control
     4ee:	2021      	movs	r0, #33	; 0x21
     4f0:	f7ff ff6c 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0x00);  
     4f4:	2000      	movs	r0, #0
     4f6:	f7ff ff81 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Data(0x80);  
     4fa:	2080      	movs	r0, #128	; 0x80
     4fc:	f7ff ff7e 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x4E);   // set RAM x address count to 0;
     500:	204e      	movs	r0, #78	; 0x4e
     502:	f7ff ff63 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0x00);
     506:	2000      	movs	r0, #0
     508:	f7ff ff78 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x4F);   // set RAM y address count to 0X199;    
     50c:	204f      	movs	r0, #79	; 0x4f
     50e:	f7ff ff5d 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0xF9);
     512:	20f9      	movs	r0, #249	; 0xf9
     514:	f7ff ff72 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Data(0x00);
     518:	2000      	movs	r0, #0
     51a:	f7ff ff6f 	bl	3fc <Epaper_Write_Data>
}
     51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Epaper_READBUSY();
     522:	f7ff bf83 	b.w	42c <Epaper_READBUSY>
     526:	bf00      	nop
     528:	00005518 	.word	0x00005518

0000052c <epaperSetup>:

void epaperSetup()
{
     52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  gpio_pin_configure_dt(&BUSY, GPIO_INPUT | GPIO_ACTIVE_HIGH);
     52e:	4820      	ldr	r0, [pc, #128]	; (5b0 <epaperSetup+0x84>)
  gpio_pin_configure_dt(&CS, GPIO_OUTPUT);
  gpio_pin_configure_dt(&SCK, GPIO_OUTPUT);
  gpio_pin_configure_dt(&SDI, GPIO_OUTPUT);
  gpio_pin_configure_dt(&EPEN, GPIO_OUTPUT);

  gpio_pin_configure_dt(&LED0, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
     530:	4c20      	ldr	r4, [pc, #128]	; (5b4 <epaperSetup+0x88>)
     532:	4f21      	ldr	r7, [pc, #132]	; (5b8 <epaperSetup+0x8c>)
  gpio_pin_configure_dt(&LED1, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
     534:	4e21      	ldr	r6, [pc, #132]	; (5bc <epaperSetup+0x90>)
  gpio_pin_configure_dt(&LED2, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
     536:	4d22      	ldr	r5, [pc, #136]	; (5c0 <epaperSetup+0x94>)
  gpio_pin_configure_dt(&BUSY, GPIO_INPUT | GPIO_ACTIVE_HIGH);
     538:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     53c:	f003 ffec 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&RES, GPIO_OUTPUT);
     540:	4820      	ldr	r0, [pc, #128]	; (5c4 <epaperSetup+0x98>)
     542:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     546:	f003 ffe7 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&DC, GPIO_OUTPUT);
     54a:	481f      	ldr	r0, [pc, #124]	; (5c8 <epaperSetup+0x9c>)
     54c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     550:	f003 ffe2 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&CS, GPIO_OUTPUT);
     554:	481d      	ldr	r0, [pc, #116]	; (5cc <epaperSetup+0xa0>)
     556:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     55a:	f003 ffdd 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&SCK, GPIO_OUTPUT);
     55e:	481c      	ldr	r0, [pc, #112]	; (5d0 <epaperSetup+0xa4>)
     560:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     564:	f003 ffd8 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&SDI, GPIO_OUTPUT);
     568:	481a      	ldr	r0, [pc, #104]	; (5d4 <epaperSetup+0xa8>)
     56a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     56e:	f003 ffd3 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&EPEN, GPIO_OUTPUT);
     572:	4819      	ldr	r0, [pc, #100]	; (5d8 <epaperSetup+0xac>)
     574:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     578:	f003 ffce 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&LED0, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
     57c:	4621      	mov	r1, r4
     57e:	4638      	mov	r0, r7
     580:	f003 ffca 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&LED1, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
     584:	4621      	mov	r1, r4
     586:	4630      	mov	r0, r6
     588:	f003 ffc6 	bl	4518 <gpio_pin_configure_dt.isra.0>
  gpio_pin_configure_dt(&LED2, GPIO_OUTPUT | GPIO_ACTIVE_LOW);
     58c:	4621      	mov	r1, r4
     58e:	4628      	mov	r0, r5
     590:	f003 ffc2 	bl	4518 <gpio_pin_configure_dt.isra.0>

  gpio_pin_set_dt(&LED0, 0);
     594:	4638      	mov	r0, r7
     596:	2100      	movs	r1, #0
     598:	f003 ffaa 	bl	44f0 <gpio_pin_set_dt.isra.0>
  gpio_pin_set_dt(&LED1, 0);
     59c:	4630      	mov	r0, r6
     59e:	2100      	movs	r1, #0
     5a0:	f003 ffa6 	bl	44f0 <gpio_pin_set_dt.isra.0>
  gpio_pin_set_dt(&LED2, 0);
     5a4:	4628      	mov	r0, r5
     5a6:	2100      	movs	r1, #0
}
     5a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  gpio_pin_set_dt(&LED2, 0);
     5ac:	f003 bfa0 	b.w	44f0 <gpio_pin_set_dt.isra.0>
     5b0:	00005520 	.word	0x00005520
     5b4:	00020001 	.word	0x00020001
     5b8:	000054e8 	.word	0x000054e8
     5bc:	000054e0 	.word	0x000054e0
     5c0:	000054d8 	.word	0x000054d8
     5c4:	00005518 	.word	0x00005518
     5c8:	00005510 	.word	0x00005510
     5cc:	00005508 	.word	0x00005508
     5d0:	00005500 	.word	0x00005500
     5d4:	000054f8 	.word	0x000054f8
     5d8:	000054f0 	.word	0x000054f0

000005dc <test_8bit_xfer>:
#define SPIBB_NODE	DT_NODELABEL(spibb0)
const struct device *const dev = DEVICE_DT_GET(SPIBB_NODE);


void test_8bit_xfer()
{
     5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct spi_config config;
   
    struct spi_cs_control cs_ctrl = (struct spi_cs_control){
     5de:	4a27      	ldr	r2, [pc, #156]	; (67c <test_8bit_xfer+0xa0>)
     5e0:	ca07      	ldmia	r2, {r0, r1, r2}
{
     5e2:	b093      	sub	sp, #76	; 0x4c
    struct spi_cs_control cs_ctrl = (struct spi_cs_control){
     5e4:	ab0f      	add	r3, sp, #60	; 0x3c
     5e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	};

	config.frequency = 1000000;
	config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
	config.slave = 0;
	config.cs = &cs_ctrl;
     5ea:	930e      	str	r3, [sp, #56]	; 0x38

	enum { datacount = 5 };
	uint8_t buff[datacount] = { 0x01, 0x02, 0x03, 0x04, 0x05};
     5ec:	4b24      	ldr	r3, [pc, #144]	; (680 <test_8bit_xfer+0xa4>)
	config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
     5ee:	4925      	ldr	r1, [pc, #148]	; (684 <test_8bit_xfer+0xa8>)
	uint8_t buff[datacount] = { 0x01, 0x02, 0x03, 0x04, 0x05};
     5f0:	6818      	ldr	r0, [r3, #0]
     5f2:	791b      	ldrb	r3, [r3, #4]
     5f4:	f88d 3004 	strb.w	r3, [sp, #4]
	config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
     5f8:	f44f 7280 	mov.w	r2, #256	; 0x100
	};
	struct spi_buf rx_buf[1] = {
		{.buf = rxdata, .len = datacount},
	};

	struct spi_buf_set tx_set = { .buffers = tx_buf, .count = 1 };
     5fc:	ab04      	add	r3, sp, #16
	struct spi_buf tx_buf[1] = {
     5fe:	2405      	movs	r4, #5
	config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
     600:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	struct spi_buf rx_buf[1] = {
     604:	ad02      	add	r5, sp, #8
	struct spi_buf_set tx_set = { .buffers = tx_buf, .count = 1 };
     606:	9308      	str	r3, [sp, #32]
	struct spi_buf_set rx_set = { .buffers = rx_buf, .count = 1 };
     608:	aa06      	add	r2, sp, #24
	struct spi_buf_set tx_set = { .buffers = tx_buf, .count = 1 };
     60a:	2301      	movs	r3, #1
	uint8_t buff[datacount] = { 0x01, 0x02, 0x03, 0x04, 0x05};
     60c:	9000      	str	r0, [sp, #0]
	struct spi_buf tx_buf[1] = {
     60e:	f8cd d010 	str.w	sp, [sp, #16]
     612:	9405      	str	r4, [sp, #20]
	struct spi_buf rx_buf[1] = {
     614:	e9cd 5406 	strd	r5, r4, [sp, #24]
	struct spi_buf_set tx_set = { .buffers = tx_buf, .count = 1 };
     618:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf_set rx_set = { .buffers = rx_buf, .count = 1 };
     61a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
     61e:	481a      	ldr	r0, [pc, #104]	; (688 <test_8bit_xfer+0xac>)
    for(int i = 0; i < 5; i++)
    {
        Epaper_Write_Data(rxdata[i]);

        if(rxdata[i] == 0xff)
            gpio_pin_set_dt(&LED0, 0);
     620:	4f1a      	ldr	r7, [pc, #104]	; (68c <test_8bit_xfer+0xb0>)
     622:	6883      	ldr	r3, [r0, #8]
     624:	aa08      	add	r2, sp, #32
     626:	681e      	ldr	r6, [r3, #0]
     628:	a90c      	add	r1, sp, #48	; 0x30
     62a:	ab0a      	add	r3, sp, #40	; 0x28
     62c:	47b0      	blx	r6
    Epaper_Write_Command(0x24); 
     62e:	2024      	movs	r0, #36	; 0x24
     630:	f7ff fecc 	bl	3cc <Epaper_Write_Command>
        else
            gpio_pin_set_dt(&LED1, 0);
     634:	4e16      	ldr	r6, [pc, #88]	; (690 <test_8bit_xfer+0xb4>)
        Epaper_Write_Data(rxdata[i]);
     636:	7828      	ldrb	r0, [r5, #0]
     638:	f7ff fee0 	bl	3fc <Epaper_Write_Data>
        if(rxdata[i] == 0xff)
     63c:	f815 3b01 	ldrb.w	r3, [r5], #1
     640:	2bff      	cmp	r3, #255	; 0xff
            gpio_pin_set_dt(&LED0, 0);
     642:	bf0c      	ite	eq
     644:	4638      	moveq	r0, r7
            gpio_pin_set_dt(&LED1, 0);
     646:	4630      	movne	r0, r6
            gpio_pin_set_dt(&LED0, 0);
     648:	2100      	movs	r1, #0
            gpio_pin_set_dt(&LED1, 0);
     64a:	f003 ff51 	bl	44f0 <gpio_pin_set_dt.isra.0>
    for(int i = 0; i < 5; i++)
     64e:	3c01      	subs	r4, #1
     650:	d1f1      	bne.n	636 <test_8bit_xfer+0x5a>
     652:	f640 749b 	movw	r4, #3995	; 0xf9b

    }

    for(int i = 5; i < ALLSCREEN_GRAGHBYTES; i++)
    {               
        Epaper_Write_Data(0xff);
     656:	20ff      	movs	r0, #255	; 0xff
     658:	f7ff fed0 	bl	3fc <Epaper_Write_Data>
    for(int i = 5; i < ALLSCREEN_GRAGHBYTES; i++)
     65c:	3c01      	subs	r4, #1
     65e:	d1fa      	bne.n	656 <test_8bit_xfer+0x7a>
    }

    Epaper_Write_Command(0x26);   //write RAM for black(0)/white (1)
     660:	2026      	movs	r0, #38	; 0x26
     662:	f7ff feb3 	bl	3cc <Epaper_Write_Command>
     666:	f44f 647a 	mov.w	r4, #4000	; 0xfa0
    for(int i = 0; i < ALLSCREEN_GRAGHBYTES; i++)
    {               
        Epaper_Write_Data(0x00);
     66a:	2000      	movs	r0, #0
     66c:	f7ff fec6 	bl	3fc <Epaper_Write_Data>
    for(int i = 0; i < ALLSCREEN_GRAGHBYTES; i++)
     670:	3c01      	subs	r4, #1
     672:	d1fa      	bne.n	66a <test_8bit_xfer+0x8e>
    }

    EPD_Update();   
     674:	f003 ff81 	bl	457a <EPD_Update>
	// printf("8bit_loopback_partial; ret: %d\n", ret);
	// printf(" tx (i)  : %02x %02x %02x %02x %02x\n",
	//        buff[0], buff[1], buff[2], buff[3], buff[4]);
	// printf(" rx (i)  : %02x %02x %02x %02x %02x\n",
	//        rxdata[0], rxdata[1], rxdata[2], rxdata[3], rxdata[4]);
}
     678:	b013      	add	sp, #76	; 0x4c
     67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     67c:	000054c0 	.word	0x000054c0
     680:	00005634 	.word	0x00005634
     684:	000f4240 	.word	0x000f4240
     688:	0000539c 	.word	0x0000539c
     68c:	000054e8 	.word	0x000054e8
     690:	000054e0 	.word	0x000054e0

00000694 <main>:



int main()
{
     694:	b510      	push	{r4, lr}
    epaperSetup();

    // gpio_pin_set_dt(&LED2, 0);


    gpio_pin_set_dt(&EPEN, HIGH);
     696:	4c09      	ldr	r4, [pc, #36]	; (6bc <main+0x28>)
    epaperSetup();
     698:	f7ff ff48 	bl	52c <epaperSetup>
    gpio_pin_set_dt(&EPEN, HIGH);
     69c:	4620      	mov	r0, r4
     69e:	2101      	movs	r1, #1
     6a0:	f003 ff26 	bl	44f0 <gpio_pin_set_dt.isra.0>

    EPD_HW_Init(); // Electronic paper initialization
     6a4:	f7ff fed6 	bl	454 <EPD_HW_Init>

    test_8bit_xfer();
     6a8:	f7ff ff98 	bl	5dc <test_8bit_xfer>

    EPD_DeepSleep(); // Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
     6ac:	f003 ff59 	bl	4562 <EPD_DeepSleep>

    gpio_pin_set_dt(&EPEN, LOW);
     6b0:	4620      	mov	r0, r4
     6b2:	2100      	movs	r1, #0
     6b4:	f003 ff1c 	bl	44f0 <gpio_pin_set_dt.isra.0>

     6b8:	bd10      	pop	{r4, pc}
     6ba:	bf00      	nop
     6bc:	000054f0 	.word	0x000054f0

000006c0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     6c0:	4b01      	ldr	r3, [pc, #4]	; (6c8 <char_out+0x8>)
     6c2:	681b      	ldr	r3, [r3, #0]
     6c4:	4718      	bx	r3
     6c6:	bf00      	nop
     6c8:	20000000 	.word	0x20000000

000006cc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     6cc:	b507      	push	{r0, r1, r2, lr}
     6ce:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     6d0:	2100      	movs	r1, #0
     6d2:	4602      	mov	r2, r0
     6d4:	9100      	str	r1, [sp, #0]
     6d6:	4803      	ldr	r0, [pc, #12]	; (6e4 <vprintk+0x18>)
     6d8:	f000 f914 	bl	904 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     6dc:	b003      	add	sp, #12
     6de:	f85d fb04 	ldr.w	pc, [sp], #4
     6e2:	bf00      	nop
     6e4:	000006c1 	.word	0x000006c1

000006e8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6ec:	8b05      	ldrh	r5, [r0, #24]
{
     6ee:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     6f0:	0728      	lsls	r0, r5, #28
{
     6f2:	4690      	mov	r8, r2
	if (processing) {
     6f4:	d411      	bmi.n	71a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     6f6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6f8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     6fc:	f040 80cd 	bne.w	89a <CONFIG_ISR_STACK_SIZE+0x9a>
			evt = process_recheck(mgr);
     700:	4620      	mov	r0, r4
     702:	f003 ff75 	bl	45f0 <process_recheck>
		}

		if (evt == EVT_NOP) {
     706:	b178      	cbz	r0, 728 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     708:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     70a:	8b21      	ldrh	r1, [r4, #24]
     70c:	2804      	cmp	r0, #4
     70e:	d811      	bhi.n	734 <process_event+0x4c>
     710:	e8df f000 	tbb	[pc, r0]
     714:	856d10c3 	.word	0x856d10c3
     718:	95          	.byte	0x95
     719:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     71a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     71c:	bf0c      	ite	eq
     71e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     722:	f045 0520 	orrne.w	r5, r5, #32
     726:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     728:	f388 8811 	msr	BASEPRI, r8
     72c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     734:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     738:	45aa      	cmp	sl, r5
     73a:	f000 80a6 	beq.w	88a <CONFIG_ISR_STACK_SIZE+0x8a>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     73e:	2700      	movs	r7, #0
     740:	46b9      	mov	r9, r7
     742:	463e      	mov	r6, r7
     744:	68a3      	ldr	r3, [r4, #8]
     746:	2b00      	cmp	r3, #0
     748:	f000 80bd 	beq.w	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     74c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     750:	8321      	strh	r1, [r4, #24]
     752:	f388 8811 	msr	BASEPRI, r8
     756:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     75a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     75c:	2900      	cmp	r1, #0
     75e:	f000 80bb 	beq.w	8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
	return node->next;
     762:	680d      	ldr	r5, [r1, #0]
     764:	2900      	cmp	r1, #0
     766:	f000 80b7 	beq.w	8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
		mon->callback(mgr, mon, state, res);
     76a:	f8d1 8004 	ldr.w	r8, [r1, #4]
     76e:	4633      	mov	r3, r6
     770:	4652      	mov	r2, sl
     772:	4620      	mov	r0, r4
     774:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     776:	2d00      	cmp	r5, #0
     778:	d076      	beq.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     77a:	682b      	ldr	r3, [r5, #0]
     77c:	4629      	mov	r1, r5
     77e:	461d      	mov	r5, r3
     780:	e7f0      	b.n	764 <process_event+0x7c>
     782:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     786:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     788:	2a01      	cmp	r2, #1
     78a:	d81b      	bhi.n	7c4 <process_event+0xdc>
	list->head = NULL;
     78c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     78e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     792:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     794:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     796:	b289      	uxth	r1, r1
	list->tail = NULL;
     798:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     79c:	d109      	bne.n	7b2 <process_event+0xca>
     79e:	463b      	mov	r3, r7
     7a0:	e003      	b.n	7aa <process_event+0xc2>
				mgr->refs += 1U;
     7a2:	8b62      	ldrh	r2, [r4, #26]
     7a4:	3201      	adds	r2, #1
     7a6:	8362      	strh	r2, [r4, #26]
	return node->next;
     7a8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     7aa:	2b00      	cmp	r3, #0
     7ac:	d1f9      	bne.n	7a2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7ae:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     7b2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     7b4:	4620      	mov	r0, r4
     7b6:	f003 ff1b 	bl	45f0 <process_recheck>
     7ba:	2800      	cmp	r0, #0
     7bc:	d07b      	beq.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     7be:	f041 0120 	orr.w	r1, r1, #32
     7c2:	e077      	b.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
	} else if (state == ONOFF_STATE_TO_OFF) {
     7c4:	2b04      	cmp	r3, #4
     7c6:	d10a      	bne.n	7de <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7c8:	f021 0107 	bic.w	r1, r1, #7
     7cc:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     7ce:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     7d0:	4620      	mov	r0, r4
     7d2:	f003 ff0d 	bl	45f0 <process_recheck>
     7d6:	b110      	cbz	r0, 7de <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     7d8:	f041 0120 	orr.w	r1, r1, #32
     7dc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     7de:	8b21      	ldrh	r1, [r4, #24]
     7e0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     7e4:	45aa      	cmp	sl, r5
     7e6:	d050      	beq.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     7e8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     7ea:	46b9      	mov	r9, r7
     7ec:	e7aa      	b.n	744 <process_event+0x5c>
			transit = mgr->transitions->start;
     7ee:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7f0:	f021 0107 	bic.w	r1, r1, #7
     7f4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     7f8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     7fa:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     7fe:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     800:	d12d      	bne.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
		    || (transit != NULL)) {
     802:	f1b9 0f00 	cmp.w	r9, #0
     806:	d040      	beq.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     808:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     80c:	8321      	strh	r1, [r4, #24]
     80e:	f388 8811 	msr	BASEPRI, r8
     812:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     816:	493a      	ldr	r1, [pc, #232]	; (900 <CONFIG_ISR_STACK_SIZE+0x100>)
     818:	4620      	mov	r0, r4
     81a:	47c8      	blx	r9
     81c:	e029      	b.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     81e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     822:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     824:	f041 0104 	orr.w	r1, r1, #4
     828:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     82a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     82c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     830:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     832:	d0e6      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     834:	2700      	movs	r7, #0
		res = 0;
     836:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     838:	f04f 0a04 	mov.w	sl, #4
     83c:	e782      	b.n	744 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     83e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     842:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     844:	f041 0105 	orr.w	r1, r1, #5
     848:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     84a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     84c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     850:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     852:	d0d6      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     854:	2700      	movs	r7, #0
		res = 0;
     856:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     858:	f04f 0a05 	mov.w	sl, #5
     85c:	e772      	b.n	744 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     85e:	2700      	movs	r7, #0
		res = 0;
     860:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     862:	f04f 0a06 	mov.w	sl, #6
     866:	e76d      	b.n	744 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     868:	462b      	mov	r3, r5
     86a:	e787      	b.n	77c <process_event+0x94>
			if (transit != NULL) {
     86c:	f1b9 0f00 	cmp.w	r9, #0
     870:	d1d1      	bne.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
	__asm__ volatile(
     872:	f04f 0320 	mov.w	r3, #32
     876:	f3ef 8811 	mrs	r8, BASEPRI
     87a:	f383 8812 	msr	BASEPRI_MAX, r3
     87e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     882:	8b23      	ldrh	r3, [r4, #24]
     884:	f023 0308 	bic.w	r3, r3, #8
     888:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     88a:	8b25      	ldrh	r5, [r4, #24]
     88c:	06ea      	lsls	r2, r5, #27
     88e:	d52e      	bpl.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     890:	f025 0310 	bic.w	r3, r5, #16
     894:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     896:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     89a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     89c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     89e:	2e00      	cmp	r6, #0
     8a0:	f6bf af6f 	bge.w	782 <process_event+0x9a>
	list->head = NULL;
     8a4:	2300      	movs	r3, #0
		*clients = mgr->clients;
     8a6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     8a8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8ac:	f021 0107 	bic.w	r1, r1, #7
     8b0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     8b4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     8b6:	8b21      	ldrh	r1, [r4, #24]
     8b8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     8bc:	45aa      	cmp	sl, r5
     8be:	f04f 0900 	mov.w	r9, #0
     8c2:	f47f af3f 	bne.w	744 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     8c6:	2f00      	cmp	r7, #0
     8c8:	d09b      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     8ca:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     8ce:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     8d0:	f388 8811 	msr	BASEPRI, r8
     8d4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     8d8:	2f00      	cmp	r7, #0
     8da:	d0c7      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
	return node->next;
     8dc:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     8de:	4639      	mov	r1, r7
     8e0:	4633      	mov	r3, r6
     8e2:	4652      	mov	r2, sl
     8e4:	4620      	mov	r0, r4
     8e6:	f003 feaf 	bl	4648 <notify_one>
	list->head = node;
     8ea:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     8ec:	e7f4      	b.n	8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     8ee:	06ab      	lsls	r3, r5, #26
     8f0:	f57f af1a 	bpl.w	728 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     8f4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     8f8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     8fa:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     8fe:	e6ff      	b.n	700 <process_event+0x18>
     900:	00004675 	.word	0x00004675

00000904 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     908:	4681      	mov	r9, r0
     90a:	b095      	sub	sp, #84	; 0x54
     90c:	468b      	mov	fp, r1
     90e:	4617      	mov	r7, r2
     910:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     912:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     914:	7838      	ldrb	r0, [r7, #0]
     916:	b908      	cbnz	r0, 91c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     918:	4628      	mov	r0, r5
     91a:	e358      	b.n	fce <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
     91c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     91e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     920:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     922:	d006      	beq.n	932 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     924:	4659      	mov	r1, fp
     926:	47c8      	blx	r9
     928:	2800      	cmp	r0, #0
     92a:	f2c0 8350 	blt.w	fce <z_cbvprintf_impl+0x6ca>
     92e:	3501      	adds	r5, #1
		if (bps == NULL) {
     930:	e1fb      	b.n	d2a <z_cbvprintf_impl+0x426>
		} state = {
     932:	2218      	movs	r2, #24
     934:	2100      	movs	r1, #0
     936:	a80e      	add	r0, sp, #56	; 0x38
     938:	f003 ffa9 	bl	488e <memset>
	if (*sp == '%') {
     93c:	787b      	ldrb	r3, [r7, #1]
     93e:	2b25      	cmp	r3, #37	; 0x25
     940:	d07d      	beq.n	a3e <z_cbvprintf_impl+0x13a>
     942:	2300      	movs	r3, #0
     944:	1c78      	adds	r0, r7, #1
     946:	4698      	mov	r8, r3
     948:	469e      	mov	lr, r3
     94a:	469c      	mov	ip, r3
     94c:	461e      	mov	r6, r3
     94e:	4601      	mov	r1, r0
		switch (*sp) {
     950:	f810 2b01 	ldrb.w	r2, [r0], #1
     954:	2a2b      	cmp	r2, #43	; 0x2b
     956:	f000 80a1 	beq.w	a9c <z_cbvprintf_impl+0x198>
     95a:	f200 8098 	bhi.w	a8e <z_cbvprintf_impl+0x18a>
     95e:	2a20      	cmp	r2, #32
     960:	f000 809f 	beq.w	aa2 <z_cbvprintf_impl+0x19e>
     964:	2a23      	cmp	r2, #35	; 0x23
     966:	f000 809f 	beq.w	aa8 <z_cbvprintf_impl+0x1a4>
     96a:	b12b      	cbz	r3, 978 <z_cbvprintf_impl+0x74>
     96c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     974:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     978:	f1b8 0f00 	cmp.w	r8, #0
     97c:	d005      	beq.n	98a <z_cbvprintf_impl+0x86>
     97e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     982:	f043 0320 	orr.w	r3, r3, #32
     986:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     98a:	f1be 0f00 	cmp.w	lr, #0
     98e:	d005      	beq.n	99c <z_cbvprintf_impl+0x98>
     990:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     994:	f043 0310 	orr.w	r3, r3, #16
     998:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     99c:	f1bc 0f00 	cmp.w	ip, #0
     9a0:	d005      	beq.n	9ae <z_cbvprintf_impl+0xaa>
     9a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     9a6:	f043 0308 	orr.w	r3, r3, #8
     9aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     9ae:	b12e      	cbz	r6, 9bc <z_cbvprintf_impl+0xb8>
     9b0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     9b4:	f043 0304 	orr.w	r3, r3, #4
     9b8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     9bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     9c0:	f003 0044 	and.w	r0, r3, #68	; 0x44
     9c4:	2844      	cmp	r0, #68	; 0x44
     9c6:	d103      	bne.n	9d0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     9c8:	f36f 1386 	bfc	r3, #6, #1
     9cc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     9d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     9d4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     9da:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     9de:	d17f      	bne.n	ae0 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
     9e0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9e4:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     9e8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     9ea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     9ee:	781a      	ldrb	r2, [r3, #0]
     9f0:	2a2e      	cmp	r2, #46	; 0x2e
     9f2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9f6:	bf0c      	ite	eq
     9f8:	2101      	moveq	r1, #1
     9fa:	2100      	movne	r1, #0
     9fc:	f361 0241 	bfi	r2, r1, #1, #1
     a00:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     a04:	d178      	bne.n	af8 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
     a06:	785a      	ldrb	r2, [r3, #1]
     a08:	2a2a      	cmp	r2, #42	; 0x2a
     a0a:	d06e      	beq.n	aea <z_cbvprintf_impl+0x1e6>
	++sp;
     a0c:	3301      	adds	r3, #1
	size_t val = 0;
     a0e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     a10:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     a14:	4619      	mov	r1, r3
     a16:	f811 0b01 	ldrb.w	r0, [r1], #1
     a1a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     a1e:	2e09      	cmp	r6, #9
     a20:	f240 8095 	bls.w	b4e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
     a24:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     a28:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     a2a:	f3c1 0040 	ubfx	r0, r1, #1, #1
     a2e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     a32:	460a      	mov	r2, r1
     a34:	f360 0241 	bfi	r2, r0, #1, #1
     a38:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     a3c:	e05c      	b.n	af8 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
     a3e:	1cba      	adds	r2, r7, #2
     a40:	9203      	str	r2, [sp, #12]
     a42:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     a46:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     a4a:	07da      	lsls	r2, r3, #31
     a4c:	f140 812e 	bpl.w	cac <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
     a50:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     a54:	f1b8 0f00 	cmp.w	r8, #0
     a58:	da07      	bge.n	a6a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
     a5a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     a5e:	f042 0204 	orr.w	r2, r2, #4
     a62:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     a66:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     a6a:	075e      	lsls	r6, r3, #29
     a6c:	f140 8127 	bpl.w	cbe <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
     a70:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     a74:	f1ba 0f00 	cmp.w	sl, #0
     a78:	f280 8126 	bge.w	cc8 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
     a7c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     a80:	f36f 0341 	bfc	r3, #1, #1
     a84:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     a88:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     a8c:	e11c      	b.n	cc8 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
     a8e:	2a2d      	cmp	r2, #45	; 0x2d
     a90:	d00d      	beq.n	aae <z_cbvprintf_impl+0x1aa>
     a92:	2a30      	cmp	r2, #48	; 0x30
     a94:	f47f af69 	bne.w	96a <z_cbvprintf_impl+0x66>
     a98:	2301      	movs	r3, #1
	} while (loop);
     a9a:	e758      	b.n	94e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     a9c:	f04f 0c01 	mov.w	ip, #1
     aa0:	e755      	b.n	94e <z_cbvprintf_impl+0x4a>
     aa2:	f04f 0e01 	mov.w	lr, #1
     aa6:	e752      	b.n	94e <z_cbvprintf_impl+0x4a>
     aa8:	f04f 0801 	mov.w	r8, #1
     aac:	e74f      	b.n	94e <z_cbvprintf_impl+0x4a>
     aae:	2601      	movs	r6, #1
     ab0:	e74d      	b.n	94e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     ab2:	fb0e 6202 	mla	r2, lr, r2, r6
     ab6:	3a30      	subs	r2, #48	; 0x30
     ab8:	4603      	mov	r3, r0
     aba:	4618      	mov	r0, r3
     abc:	f810 6b01 	ldrb.w	r6, [r0], #1
     ac0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     ac4:	f1bc 0f09 	cmp.w	ip, #9
     ac8:	d9f3      	bls.n	ab2 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
     aca:	4299      	cmp	r1, r3
     acc:	d08f      	beq.n	9ee <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     ace:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     ad2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     ad4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     ad6:	f362 0141 	bfi	r1, r2, #1, #1
     ada:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     ade:	e786      	b.n	9ee <z_cbvprintf_impl+0xea>
     ae0:	460b      	mov	r3, r1
	size_t val = 0;
     ae2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     ae4:	f04f 0e0a 	mov.w	lr, #10
     ae8:	e7e7      	b.n	aba <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
     aea:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     aee:	f042 0204 	orr.w	r2, r2, #4
     af2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     af6:	3302      	adds	r3, #2
	switch (*sp) {
     af8:	781a      	ldrb	r2, [r3, #0]
     afa:	2a6c      	cmp	r2, #108	; 0x6c
     afc:	d047      	beq.n	b8e <z_cbvprintf_impl+0x28a>
     afe:	d82b      	bhi.n	b58 <z_cbvprintf_impl+0x254>
     b00:	2a68      	cmp	r2, #104	; 0x68
     b02:	d031      	beq.n	b68 <z_cbvprintf_impl+0x264>
     b04:	2a6a      	cmp	r2, #106	; 0x6a
     b06:	d04b      	beq.n	ba0 <z_cbvprintf_impl+0x29c>
     b08:	2a4c      	cmp	r2, #76	; 0x4c
     b0a:	d051      	beq.n	bb0 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
     b0c:	461a      	mov	r2, r3
     b0e:	f812 3b01 	ldrb.w	r3, [r2], #1
     b12:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     b14:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     b16:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     b1a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     b1e:	f200 80be 	bhi.w	c9e <z_cbvprintf_impl+0x39a>
     b22:	2b6d      	cmp	r3, #109	; 0x6d
     b24:	d851      	bhi.n	bca <z_cbvprintf_impl+0x2c6>
     b26:	2b69      	cmp	r3, #105	; 0x69
     b28:	f200 80b9 	bhi.w	c9e <z_cbvprintf_impl+0x39a>
     b2c:	2b57      	cmp	r3, #87	; 0x57
     b2e:	d867      	bhi.n	c00 <z_cbvprintf_impl+0x2fc>
     b30:	2b41      	cmp	r3, #65	; 0x41
     b32:	d003      	beq.n	b3c <z_cbvprintf_impl+0x238>
     b34:	3b45      	subs	r3, #69	; 0x45
     b36:	2b02      	cmp	r3, #2
     b38:	f200 80b1 	bhi.w	c9e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
     b3c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     b40:	2204      	movs	r2, #4
     b42:	f362 0302 	bfi	r3, r2, #0, #3
     b46:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     b4a:	2301      	movs	r3, #1
			break;
     b4c:	e073      	b.n	c36 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
     b4e:	fb0c 0202 	mla	r2, ip, r2, r0
     b52:	3a30      	subs	r2, #48	; 0x30
     b54:	460b      	mov	r3, r1
     b56:	e75d      	b.n	a14 <z_cbvprintf_impl+0x110>
	switch (*sp) {
     b58:	2a74      	cmp	r2, #116	; 0x74
     b5a:	d025      	beq.n	ba8 <z_cbvprintf_impl+0x2a4>
     b5c:	2a7a      	cmp	r2, #122	; 0x7a
     b5e:	d1d5      	bne.n	b0c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
     b60:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     b64:	2106      	movs	r1, #6
     b66:	e00c      	b.n	b82 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
     b68:	785a      	ldrb	r2, [r3, #1]
     b6a:	2a68      	cmp	r2, #104	; 0x68
     b6c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     b70:	d106      	bne.n	b80 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
     b72:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     b74:	f361 02c6 	bfi	r2, r1, #3, #4
     b78:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     b7c:	3302      	adds	r3, #2
     b7e:	e7c5      	b.n	b0c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
     b80:	2102      	movs	r1, #2
     b82:	f361 02c6 	bfi	r2, r1, #3, #4
     b86:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     b8a:	3301      	adds	r3, #1
     b8c:	e7be      	b.n	b0c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
     b8e:	785a      	ldrb	r2, [r3, #1]
     b90:	2a6c      	cmp	r2, #108	; 0x6c
     b92:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     b96:	d101      	bne.n	b9c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
     b98:	2104      	movs	r1, #4
     b9a:	e7eb      	b.n	b74 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
     b9c:	2103      	movs	r1, #3
     b9e:	e7f0      	b.n	b82 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
     ba0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     ba4:	2105      	movs	r1, #5
     ba6:	e7ec      	b.n	b82 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
     ba8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     bac:	2107      	movs	r1, #7
     bae:	e7e8      	b.n	b82 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
     bb0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     bb4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     bb8:	f022 0202 	bic.w	r2, r2, #2
     bbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     bc0:	f042 0202 	orr.w	r2, r2, #2
     bc4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     bc8:	e7df      	b.n	b8a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
     bca:	3b6e      	subs	r3, #110	; 0x6e
     bcc:	b2d9      	uxtb	r1, r3
     bce:	2301      	movs	r3, #1
     bd0:	408b      	lsls	r3, r1
     bd2:	f240 4182 	movw	r1, #1154	; 0x482
     bd6:	420b      	tst	r3, r1
     bd8:	d137      	bne.n	c4a <z_cbvprintf_impl+0x346>
     bda:	f013 0f24 	tst.w	r3, #36	; 0x24
     bde:	d151      	bne.n	c84 <z_cbvprintf_impl+0x380>
     be0:	07d8      	lsls	r0, r3, #31
     be2:	d55c      	bpl.n	c9e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
     be4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     be8:	2103      	movs	r1, #3
     bea:	f361 0302 	bfi	r3, r1, #0, #3
     bee:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     bf2:	f002 0378 	and.w	r3, r2, #120	; 0x78
     bf6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     bfa:	424b      	negs	r3, r1
     bfc:	414b      	adcs	r3, r1
     bfe:	e01a      	b.n	c36 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
     c00:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     c04:	b2c9      	uxtb	r1, r1
     c06:	2001      	movs	r0, #1
     c08:	fa00 f101 	lsl.w	r1, r0, r1
     c0c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     c10:	d194      	bne.n	b3c <z_cbvprintf_impl+0x238>
     c12:	f640 0601 	movw	r6, #2049	; 0x801
     c16:	4231      	tst	r1, r6
     c18:	d11d      	bne.n	c56 <z_cbvprintf_impl+0x352>
     c1a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     c1e:	d03e      	beq.n	c9e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
     c20:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     c24:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     c28:	f002 0278 	and.w	r2, r2, #120	; 0x78
     c2c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     c2e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     c32:	d034      	beq.n	c9e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
     c34:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     c36:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     c3a:	f3c2 0140 	ubfx	r1, r2, #1, #1
     c3e:	430b      	orrs	r3, r1
     c40:	f363 0241 	bfi	r2, r3, #1, #1
     c44:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     c48:	e6fd      	b.n	a46 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
     c4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     c4e:	2102      	movs	r1, #2
     c50:	f361 0302 	bfi	r3, r1, #0, #3
     c54:	e7e8      	b.n	c28 <z_cbvprintf_impl+0x324>
     c56:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
     c5a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     c5c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     c60:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     c64:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     c66:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     c6a:	bf02      	ittt	eq
     c6c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     c70:	f041 0101 	orreq.w	r1, r1, #1
     c74:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     c78:	2b63      	cmp	r3, #99	; 0x63
     c7a:	d1db      	bne.n	c34 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
     c7c:	1e13      	subs	r3, r2, #0
     c7e:	bf18      	it	ne
     c80:	2301      	movne	r3, #1
     c82:	e7d8      	b.n	c36 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
     c84:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     c88:	2103      	movs	r1, #3
     c8a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     c8e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     c92:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     c96:	bf14      	ite	ne
     c98:	2301      	movne	r3, #1
     c9a:	2300      	moveq	r3, #0
     c9c:	e7cb      	b.n	c36 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
     c9e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ca2:	f043 0301 	orr.w	r3, r3, #1
     ca6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     caa:	e7c3      	b.n	c34 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
     cac:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     cb0:	2a00      	cmp	r2, #0
			width = conv->width_value;
     cb2:	bfb4      	ite	lt
     cb4:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
     cb8:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
     cbc:	e6d5      	b.n	a6a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
     cbe:	0798      	lsls	r0, r3, #30
     cc0:	f57f aee2 	bpl.w	a88 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
     cc4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
     cc8:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
     ccc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     cce:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     cd2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
     cd6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     cda:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     cdc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     ce0:	d133      	bne.n	d4a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
     ce2:	1ecb      	subs	r3, r1, #3
     ce4:	2b04      	cmp	r3, #4
     ce6:	d804      	bhi.n	cf2 <z_cbvprintf_impl+0x3ee>
     ce8:	e8df f003 	tbb	[pc, r3]
     cec:	21464621 	.word	0x21464621
     cf0:	21          	.byte	0x21
     cf1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     cf2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     cf4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     cf6:	ea4f 72e3 	mov.w	r2, r3, asr #31
     cfa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     cfe:	d11c      	bne.n	d3a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
     d00:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     d04:	17da      	asrs	r2, r3, #31
     d06:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     d0a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     d0c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     d10:	f013 0603 	ands.w	r6, r3, #3
     d14:	d050      	beq.n	db8 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
     d16:	9b03      	ldr	r3, [sp, #12]
     d18:	463a      	mov	r2, r7
     d1a:	4659      	mov	r1, fp
     d1c:	4648      	mov	r0, r9
     d1e:	f003 fd72 	bl	4806 <outs>
     d22:	2800      	cmp	r0, #0
     d24:	f2c0 8153 	blt.w	fce <z_cbvprintf_impl+0x6ca>
     d28:	4405      	add	r5, r0
			continue;
     d2a:	9f03      	ldr	r7, [sp, #12]
     d2c:	e5f2      	b.n	914 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     d2e:	f854 3b04 	ldr.w	r3, [r4], #4
     d32:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     d34:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     d38:	e7e8      	b.n	d0c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
     d3a:	2902      	cmp	r1, #2
     d3c:	d1e5      	bne.n	d0a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
     d3e:	b21a      	sxth	r2, r3
     d40:	f343 33c0 	sbfx	r3, r3, #15, #1
     d44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     d48:	e7df      	b.n	d0a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
     d4a:	2b02      	cmp	r3, #2
     d4c:	d124      	bne.n	d98 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
     d4e:	1ecb      	subs	r3, r1, #3
     d50:	2b04      	cmp	r3, #4
     d52:	d804      	bhi.n	d5e <z_cbvprintf_impl+0x45a>
     d54:	e8df f003 	tbb	[pc, r3]
     d58:	18101018 	.word	0x18101018
     d5c:	18          	.byte	0x18
     d5d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     d5e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     d60:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     d64:	f04f 0200 	mov.w	r2, #0
     d68:	d014      	beq.n	d94 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
     d6a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     d6c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     d70:	d1cc      	bne.n	d0c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
     d72:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     d74:	930e      	str	r3, [sp, #56]	; 0x38
     d76:	e7c9      	b.n	d0c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
     d78:	3407      	adds	r4, #7
     d7a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     d7e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     d82:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     d86:	e7c1      	b.n	d0c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
     d88:	f854 3b04 	ldr.w	r3, [r4], #4
     d8c:	930e      	str	r3, [sp, #56]	; 0x38
     d8e:	2300      	movs	r3, #0
     d90:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     d92:	e7bb      	b.n	d0c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
     d94:	b2db      	uxtb	r3, r3
     d96:	e7cd      	b.n	d34 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
     d98:	2b04      	cmp	r3, #4
     d9a:	d108      	bne.n	dae <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
     d9c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     d9e:	f024 0407 	bic.w	r4, r4, #7
     da2:	e9d4 2300 	ldrd	r2, r3, [r4]
     da6:	3408      	adds	r4, #8
     da8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     dac:	e7ae      	b.n	d0c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
     dae:	2b03      	cmp	r3, #3
     db0:	d1ac      	bne.n	d0c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
     db2:	f854 3b04 	ldr.w	r3, [r4], #4
     db6:	e7dd      	b.n	d74 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
     db8:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     dbc:	2878      	cmp	r0, #120	; 0x78
     dbe:	d8b4      	bhi.n	d2a <z_cbvprintf_impl+0x426>
     dc0:	2862      	cmp	r0, #98	; 0x62
     dc2:	d81c      	bhi.n	dfe <z_cbvprintf_impl+0x4fa>
     dc4:	2825      	cmp	r0, #37	; 0x25
     dc6:	f43f adad 	beq.w	924 <z_cbvprintf_impl+0x20>
     dca:	2858      	cmp	r0, #88	; 0x58
     dcc:	d1ad      	bne.n	d2a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
     dce:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     dd2:	9300      	str	r3, [sp, #0]
     dd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     dd8:	ab08      	add	r3, sp, #32
     dda:	aa10      	add	r2, sp, #64	; 0x40
     ddc:	f003 fccd 	bl	477a <encode_uint>
			if (precision >= 0) {
     de0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     de4:	4607      	mov	r7, r0
			if (precision >= 0) {
     de6:	f280 809a 	bge.w	f1e <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
     dea:	2f00      	cmp	r7, #0
     dec:	d09d      	beq.n	d2a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
     dee:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     df2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     df4:	2e00      	cmp	r6, #0
     df6:	f000 80c1 	beq.w	f7c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
     dfa:	3001      	adds	r0, #1
     dfc:	e0be      	b.n	f7c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
     dfe:	3863      	subs	r0, #99	; 0x63
     e00:	2815      	cmp	r0, #21
     e02:	d892      	bhi.n	d2a <z_cbvprintf_impl+0x426>
     e04:	a201      	add	r2, pc, #4	; (adr r2, e0c <z_cbvprintf_impl+0x508>)
     e06:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     e0a:	bf00      	nop
     e0c:	00000ee1 	.word	0x00000ee1
     e10:	00000ef3 	.word	0x00000ef3
     e14:	00000d2b 	.word	0x00000d2b
     e18:	00000d2b 	.word	0x00000d2b
     e1c:	00000d2b 	.word	0x00000d2b
     e20:	00000d2b 	.word	0x00000d2b
     e24:	00000ef3 	.word	0x00000ef3
     e28:	00000d2b 	.word	0x00000d2b
     e2c:	00000d2b 	.word	0x00000d2b
     e30:	00000d2b 	.word	0x00000d2b
     e34:	00000d2b 	.word	0x00000d2b
     e38:	00000f81 	.word	0x00000f81
     e3c:	00000f19 	.word	0x00000f19
     e40:	00000f3f 	.word	0x00000f3f
     e44:	00000d2b 	.word	0x00000d2b
     e48:	00000d2b 	.word	0x00000d2b
     e4c:	00000e65 	.word	0x00000e65
     e50:	00000d2b 	.word	0x00000d2b
     e54:	00000f19 	.word	0x00000f19
     e58:	00000d2b 	.word	0x00000d2b
     e5c:	00000d2b 	.word	0x00000d2b
     e60:	00000f19 	.word	0x00000f19
			if (precision >= 0) {
     e64:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     e68:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     e6a:	db35      	blt.n	ed8 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
     e6c:	4651      	mov	r1, sl
     e6e:	4638      	mov	r0, r7
     e70:	f003 fcf9 	bl	4866 <strnlen>
			bpe = bps + len;
     e74:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     e78:	2f00      	cmp	r7, #0
     e7a:	f43f af56 	beq.w	d2a <z_cbvprintf_impl+0x426>
		char sign = 0;
     e7e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     e80:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     e84:	f013 0210 	ands.w	r2, r3, #16
     e88:	9205      	str	r2, [sp, #20]
     e8a:	f000 8093 	beq.w	fb4 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
     e8e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     e90:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     e92:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     e94:	bf48      	it	mi
     e96:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     e98:	9204      	str	r2, [sp, #16]
     e9a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     e9c:	bf48      	it	mi
     e9e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     ea0:	f1b8 0f00 	cmp.w	r8, #0
     ea4:	f340 80a0 	ble.w	fe8 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
     ea8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     eac:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     eb0:	f3c2 0380 	ubfx	r3, r2, #2, #1
     eb4:	0750      	lsls	r0, r2, #29
     eb6:	9306      	str	r3, [sp, #24]
     eb8:	f100 8096 	bmi.w	fe8 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
     ebc:	0651      	lsls	r1, r2, #25
     ebe:	f140 8089 	bpl.w	fd4 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
     ec2:	b13e      	cbz	r6, ed4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
     ec4:	4659      	mov	r1, fp
     ec6:	4630      	mov	r0, r6
     ec8:	47c8      	blx	r9
     eca:	2800      	cmp	r0, #0
     ecc:	db7f      	blt.n	fce <z_cbvprintf_impl+0x6ca>
     ece:	9b06      	ldr	r3, [sp, #24]
     ed0:	3501      	adds	r5, #1
     ed2:	461e      	mov	r6, r3
					pad = '0';
     ed4:	2230      	movs	r2, #48	; 0x30
     ed6:	e07e      	b.n	fd6 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
     ed8:	4638      	mov	r0, r7
     eda:	f003 fcbd 	bl	4858 <strlen>
     ede:	e7c9      	b.n	e74 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     ee2:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
     ee6:	2600      	movs	r6, #0
			bps = buf;
     ee8:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     eea:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
     eee:	2001      	movs	r0, #1
     ef0:	e7c6      	b.n	e80 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
     ef2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     ef4:	bf5c      	itt	pl
     ef6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     efa:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
     efc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
     f00:	bf48      	it	mi
     f02:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
     f04:	2b00      	cmp	r3, #0
     f06:	f6bf af62 	bge.w	dce <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
     f0a:	4252      	negs	r2, r2
     f0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
     f14:	262d      	movs	r6, #45	; 0x2d
     f16:	e75a      	b.n	dce <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
     f18:	2600      	movs	r6, #0
     f1a:	e758      	b.n	dce <z_cbvprintf_impl+0x4ca>
		char sign = 0;
     f1c:	2600      	movs	r6, #0
				conv->flag_zero = false;
     f1e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     f22:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     f26:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     f28:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     f2c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     f2e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     f32:	f67f af5a 	bls.w	dea <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
     f36:	ebaa 0303 	sub.w	r3, sl, r3
     f3a:	9311      	str	r3, [sp, #68]	; 0x44
     f3c:	e755      	b.n	dea <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
     f3e:	980e      	ldr	r0, [sp, #56]	; 0x38
     f40:	b390      	cbz	r0, fa8 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f42:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     f46:	9300      	str	r3, [sp, #0]
     f48:	aa10      	add	r2, sp, #64	; 0x40
     f4a:	ab08      	add	r3, sp, #32
     f4c:	2100      	movs	r1, #0
     f4e:	f003 fc14 	bl	477a <encode_uint>
				conv->altform_0c = true;
     f52:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
     f56:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     f5a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     f5e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
     f62:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f66:	4607      	mov	r7, r0
				conv->altform_0c = true;
     f68:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     f6c:	dad6      	bge.n	f1c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
     f6e:	2800      	cmp	r0, #0
     f70:	f43f aedb 	beq.w	d2a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
     f74:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     f78:	1a18      	subs	r0, r3, r0
		char sign = 0;
     f7a:	2600      	movs	r6, #0
     f7c:	469a      	mov	sl, r3
     f7e:	e77f      	b.n	e80 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
     f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     f82:	2907      	cmp	r1, #7
     f84:	f63f aed1 	bhi.w	d2a <z_cbvprintf_impl+0x426>
     f88:	e8df f001 	tbb	[pc, r1]
     f8c:	0c06040c 	.word	0x0c06040c
     f90:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     f94:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     f96:	e6c8      	b.n	d2a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
     f98:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     f9a:	e6c6      	b.n	d2a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
     f9c:	17ea      	asrs	r2, r5, #31
     f9e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     fa2:	e6c2      	b.n	d2a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     fa4:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     fa6:	e6c0      	b.n	d2a <z_cbvprintf_impl+0x426>
     fa8:	4f2e      	ldr	r7, [pc, #184]	; (1064 <z_cbvprintf_impl+0x760>)
		char sign = 0;
     faa:	4606      	mov	r6, r0
			bpe = bps + 5;
     fac:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     fb0:	2005      	movs	r0, #5
     fb2:	e765      	b.n	e80 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
     fb4:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     fb6:	bf48      	it	mi
     fb8:	3001      	addmi	r0, #1
     fba:	e769      	b.n	e90 <z_cbvprintf_impl+0x58c>
     fbc:	9307      	str	r3, [sp, #28]
					OUTC(pad);
     fbe:	4610      	mov	r0, r2
     fc0:	9206      	str	r2, [sp, #24]
     fc2:	4659      	mov	r1, fp
     fc4:	47c8      	blx	r9
     fc6:	2800      	cmp	r0, #0
     fc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     fcc:	da04      	bge.n	fd8 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
     fce:	b015      	add	sp, #84	; 0x54
     fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     fd4:	2220      	movs	r2, #32
					pad = '0';
     fd6:	4643      	mov	r3, r8
				while (width-- > 0) {
     fd8:	4619      	mov	r1, r3
     fda:	2900      	cmp	r1, #0
     fdc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     fe0:	dcec      	bgt.n	fbc <z_cbvprintf_impl+0x6b8>
     fe2:	4445      	add	r5, r8
     fe4:	1a6d      	subs	r5, r5, r1
     fe6:	4698      	mov	r8, r3
		if (sign != 0) {
     fe8:	b12e      	cbz	r6, ff6 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
     fea:	4659      	mov	r1, fp
     fec:	4630      	mov	r0, r6
     fee:	47c8      	blx	r9
     ff0:	2800      	cmp	r0, #0
     ff2:	dbec      	blt.n	fce <z_cbvprintf_impl+0x6ca>
     ff4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     ff6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     ffa:	06da      	lsls	r2, r3, #27
     ffc:	d401      	bmi.n	1002 <z_cbvprintf_impl+0x6fe>
     ffe:	071b      	lsls	r3, r3, #28
    1000:	d505      	bpl.n	100e <z_cbvprintf_impl+0x70a>
				OUTC('0');
    1002:	4659      	mov	r1, fp
    1004:	2030      	movs	r0, #48	; 0x30
    1006:	47c8      	blx	r9
    1008:	2800      	cmp	r0, #0
    100a:	dbe0      	blt.n	fce <z_cbvprintf_impl+0x6ca>
    100c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    100e:	9b05      	ldr	r3, [sp, #20]
    1010:	b133      	cbz	r3, 1020 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    1012:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1016:	4659      	mov	r1, fp
    1018:	47c8      	blx	r9
    101a:	2800      	cmp	r0, #0
    101c:	dbd7      	blt.n	fce <z_cbvprintf_impl+0x6ca>
    101e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1020:	9e04      	ldr	r6, [sp, #16]
    1022:	442e      	add	r6, r5
    1024:	e005      	b.n	1032 <z_cbvprintf_impl+0x72e>
				OUTC('0');
    1026:	4659      	mov	r1, fp
    1028:	2030      	movs	r0, #48	; 0x30
    102a:	47c8      	blx	r9
    102c:	2800      	cmp	r0, #0
    102e:	dbce      	blt.n	fce <z_cbvprintf_impl+0x6ca>
    1030:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1032:	1b73      	subs	r3, r6, r5
    1034:	2b00      	cmp	r3, #0
    1036:	dcf6      	bgt.n	1026 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    1038:	4653      	mov	r3, sl
    103a:	463a      	mov	r2, r7
    103c:	4659      	mov	r1, fp
    103e:	4648      	mov	r0, r9
    1040:	f003 fbe1 	bl	4806 <outs>
    1044:	2800      	cmp	r0, #0
    1046:	dbc2      	blt.n	fce <z_cbvprintf_impl+0x6ca>
    1048:	4405      	add	r5, r0
		while (width > 0) {
    104a:	44a8      	add	r8, r5
    104c:	eba8 0305 	sub.w	r3, r8, r5
    1050:	2b00      	cmp	r3, #0
    1052:	f77f ae6a 	ble.w	d2a <z_cbvprintf_impl+0x426>
			OUTC(' ');
    1056:	4659      	mov	r1, fp
    1058:	2020      	movs	r0, #32
    105a:	47c8      	blx	r9
    105c:	2800      	cmp	r0, #0
    105e:	dbb6      	blt.n	fce <z_cbvprintf_impl+0x6ca>
    1060:	3501      	adds	r5, #1
			--width;
    1062:	e7f3      	b.n	104c <z_cbvprintf_impl+0x748>
    1064:	0000563a 	.word	0x0000563a

00001068 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1068:	f001 bcb4 	b.w	29d4 <SystemInit>

0000106c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    106c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1070:	4605      	mov	r5, r0
	__asm__ volatile(
    1072:	f04f 0320 	mov.w	r3, #32
    1076:	f3ef 8611 	mrs	r6, BASEPRI
    107a:	f383 8812 	msr	BASEPRI_MAX, r3
    107e:	f3bf 8f6f 	isb	sy
	return list->head;
    1082:	4b0e      	ldr	r3, [pc, #56]	; (10bc <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1084:	4f0e      	ldr	r7, [pc, #56]	; (10c0 <pm_state_notify+0x54>)
    1086:	681c      	ldr	r4, [r3, #0]
    1088:	f8df 8038 	ldr.w	r8, [pc, #56]	; 10c4 <pm_state_notify+0x58>
    108c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1090:	b92c      	cbnz	r4, 109e <pm_state_notify+0x32>
	__asm__ volatile(
    1092:	f386 8811 	msr	BASEPRI, r6
    1096:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    109a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    109e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    10a2:	2d00      	cmp	r5, #0
    10a4:	bf18      	it	ne
    10a6:	4613      	movne	r3, r2
		if (callback) {
    10a8:	b12b      	cbz	r3, 10b6 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    10aa:	f898 2014 	ldrb.w	r2, [r8, #20]
    10ae:	fb09 f202 	mul.w	r2, r9, r2
    10b2:	5cb8      	ldrb	r0, [r7, r2]
    10b4:	4798      	blx	r3
	return node->next;
    10b6:	6824      	ldr	r4, [r4, #0]
    10b8:	e7ea      	b.n	1090 <pm_state_notify+0x24>
    10ba:	bf00      	nop
    10bc:	200002a0 	.word	0x200002a0
    10c0:	20000294 	.word	0x20000294
    10c4:	20000368 	.word	0x20000368

000010c8 <pm_system_resume>:

void pm_system_resume(void)
{
    10c8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    10ca:	4b19      	ldr	r3, [pc, #100]	; (1130 <pm_system_resume+0x68>)
    10cc:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    10ce:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    10d2:	f004 031f 	and.w	r3, r4, #31
    10d6:	2201      	movs	r2, #1
    10d8:	409a      	lsls	r2, r3
    10da:	4b16      	ldr	r3, [pc, #88]	; (1134 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    10dc:	0961      	lsrs	r1, r4, #5
    10de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    10e2:	43d0      	mvns	r0, r2
    10e4:	e853 1f00 	ldrex	r1, [r3]
    10e8:	ea01 0500 	and.w	r5, r1, r0
    10ec:	e843 5600 	strex	r6, r5, [r3]
    10f0:	2e00      	cmp	r6, #0
    10f2:	d1f7      	bne.n	10e4 <pm_system_resume+0x1c>
    10f4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    10f8:	420a      	tst	r2, r1
    10fa:	d013      	beq.n	1124 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    10fc:	4b0e      	ldr	r3, [pc, #56]	; (1138 <pm_system_resume+0x70>)
    10fe:	4d0f      	ldr	r5, [pc, #60]	; (113c <pm_system_resume+0x74>)
    1100:	b18b      	cbz	r3, 1126 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1102:	230c      	movs	r3, #12
    1104:	4363      	muls	r3, r4
    1106:	18ea      	adds	r2, r5, r3
    1108:	5ce8      	ldrb	r0, [r5, r3]
    110a:	7851      	ldrb	r1, [r2, #1]
    110c:	f003 fbe7 	bl	48de <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1110:	2000      	movs	r0, #0
    1112:	f7ff ffab 	bl	106c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1116:	230c      	movs	r3, #12
    1118:	435c      	muls	r4, r3
    111a:	192a      	adds	r2, r5, r4
    111c:	2300      	movs	r3, #0
    111e:	512b      	str	r3, [r5, r4]
    1120:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1124:	bd70      	pop	{r4, r5, r6, pc}
    1126:	f383 8811 	msr	BASEPRI, r3
    112a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    112e:	e7ef      	b.n	1110 <pm_system_resume+0x48>
    1130:	20000368 	.word	0x20000368
    1134:	200002a8 	.word	0x200002a8
    1138:	000048df 	.word	0x000048df
    113c:	20000294 	.word	0x20000294

00001140 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    1144:	4b35      	ldr	r3, [pc, #212]	; (121c <pm_system_suspend+0xdc>)
{
    1146:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    1148:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    114a:	f04f 0320 	mov.w	r3, #32
    114e:	f3ef 8811 	mrs	r8, BASEPRI
    1152:	f383 8812 	msr	BASEPRI_MAX, r3
    1156:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    115a:	240c      	movs	r4, #12
    115c:	4b30      	ldr	r3, [pc, #192]	; (1220 <pm_system_suspend+0xe0>)
    115e:	4e31      	ldr	r6, [pc, #196]	; (1224 <pm_system_suspend+0xe4>)
    1160:	436c      	muls	r4, r5
    1162:	191a      	adds	r2, r3, r4
    1164:	5d19      	ldrb	r1, [r3, r4]
    1166:	2900      	cmp	r1, #0
    1168:	d04c      	beq.n	1204 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    116a:	ca07      	ldmia	r2, {r0, r1, r2}
    116c:	eb06 0c04 	add.w	ip, r6, r4
    1170:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1174:	2200      	movs	r2, #0
    1176:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1178:	f388 8811 	msr	BASEPRI, r8
    117c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1180:	230c      	movs	r3, #12
    1182:	436b      	muls	r3, r5
    1184:	18f2      	adds	r2, r6, r3
    1186:	5cf0      	ldrb	r0, [r6, r3]
    1188:	2800      	cmp	r0, #0
    118a:	d039      	beq.n	1200 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    118c:	1c7b      	adds	r3, r7, #1
    118e:	d010      	beq.n	11b2 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1190:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1194:	4c24      	ldr	r4, [pc, #144]	; (1228 <pm_system_suspend+0xe8>)
    1196:	4a25      	ldr	r2, [pc, #148]	; (122c <pm_system_suspend+0xec>)
    1198:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    119c:	2100      	movs	r1, #0
    119e:	fbec 4100 	umlal	r4, r1, ip, r0
    11a2:	2300      	movs	r3, #0
    11a4:	4620      	mov	r0, r4
    11a6:	f7fe ff87 	bl	b8 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    11aa:	2101      	movs	r1, #1
    11ac:	1a38      	subs	r0, r7, r0
    11ae:	f004 f890 	bl	52d2 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    11b2:	f002 fefb 	bl	3fac <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    11b6:	2001      	movs	r0, #1
    11b8:	f7ff ff58 	bl	106c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    11bc:	f3bf 8f5b 	dmb	ish
    11c0:	4b1b      	ldr	r3, [pc, #108]	; (1230 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    11c2:	096a      	lsrs	r2, r5, #5
    11c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    11c8:	f005 011f 	and.w	r1, r5, #31
    11cc:	2201      	movs	r2, #1
    11ce:	408a      	lsls	r2, r1
    11d0:	e853 0f00 	ldrex	r0, [r3]
    11d4:	4310      	orrs	r0, r2
    11d6:	e843 0100 	strex	r1, r0, [r3]
    11da:	2900      	cmp	r1, #0
    11dc:	d1f8      	bne.n	11d0 <pm_system_suspend+0x90>
    11de:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    11e2:	4b14      	ldr	r3, [pc, #80]	; (1234 <pm_system_suspend+0xf4>)
    11e4:	b13b      	cbz	r3, 11f6 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    11e6:	230c      	movs	r3, #12
    11e8:	fb03 f005 	mul.w	r0, r3, r5
    11ec:	1833      	adds	r3, r6, r0
    11ee:	5c30      	ldrb	r0, [r6, r0]
    11f0:	7859      	ldrb	r1, [r3, #1]
    11f2:	f003 fb68 	bl	48c6 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    11f6:	f7ff ff67 	bl	10c8 <pm_system_resume>
	k_sched_unlock();
    11fa:	f002 feeb 	bl	3fd4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    11fe:	2001      	movs	r0, #1
}
    1200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1204:	4601      	mov	r1, r0
    1206:	4628      	mov	r0, r5
    1208:	f000 f816 	bl	1238 <pm_policy_next_state>
		if (info != NULL) {
    120c:	2800      	cmp	r0, #0
    120e:	d0b3      	beq.n	1178 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1210:	c807      	ldmia	r0, {r0, r1, r2}
    1212:	4434      	add	r4, r6
    1214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1218:	e7ae      	b.n	1178 <pm_system_suspend+0x38>
    121a:	bf00      	nop
    121c:	20000368 	.word	0x20000368
    1220:	20000288 	.word	0x20000288
    1224:	20000294 	.word	0x20000294
    1228:	000f423f 	.word	0x000f423f
    122c:	000f4240 	.word	0x000f4240
    1230:	200002a8 	.word	0x200002a8
    1234:	000048c7 	.word	0x000048c7

00001238 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    123c:	b085      	sub	sp, #20
    123e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1240:	a903      	add	r1, sp, #12
    1242:	f000 f843 	bl	12cc <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1246:	4b1e      	ldr	r3, [pc, #120]	; (12c0 <pm_policy_next_state+0x88>)
    1248:	9d03      	ldr	r5, [sp, #12]
    124a:	f8d3 a000 	ldr.w	sl, [r3]
    124e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 12c4 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1252:	1e43      	subs	r3, r0, #1
    1254:	b21b      	sxth	r3, r3
    1256:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    125a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    125c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1260:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1264:	f04f 0b00 	mov.w	fp, #0
    1268:	b924      	cbnz	r4, 1274 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    126a:	46a1      	mov	r9, r4
}
    126c:	4648      	mov	r0, r9
    126e:	b005      	add	sp, #20
    1270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1274:	6868      	ldr	r0, [r5, #4]
    1276:	4a14      	ldr	r2, [pc, #80]	; (12c8 <pm_policy_next_state+0x90>)
    1278:	46c4      	mov	ip, r8
    127a:	4659      	mov	r1, fp
    127c:	fbe0 c107 	umlal	ip, r1, r0, r7
    1280:	2300      	movs	r3, #0
    1282:	4660      	mov	r0, ip
    1284:	f7fe ff18 	bl	b8 <__aeabi_uldivmod>
    1288:	9001      	str	r0, [sp, #4]
    128a:	68a8      	ldr	r0, [r5, #8]
    128c:	4a0e      	ldr	r2, [pc, #56]	; (12c8 <pm_policy_next_state+0x90>)
    128e:	46c4      	mov	ip, r8
    1290:	4659      	mov	r1, fp
    1292:	fbe0 c107 	umlal	ip, r1, r0, r7
    1296:	2300      	movs	r3, #0
    1298:	4660      	mov	r0, ip
    129a:	f7fe ff0d 	bl	b8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    129e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    12a2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    12a4:	d001      	beq.n	12aa <pm_policy_next_state+0x72>
    12a6:	4582      	cmp	sl, r0
    12a8:	d905      	bls.n	12b6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    12aa:	1c73      	adds	r3, r6, #1
    12ac:	d0de      	beq.n	126c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    12ae:	9b01      	ldr	r3, [sp, #4]
    12b0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    12b2:	42b0      	cmp	r0, r6
    12b4:	d9da      	bls.n	126c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    12b6:	3c01      	subs	r4, #1
    12b8:	b2a4      	uxth	r4, r4
    12ba:	3d0c      	subs	r5, #12
    12bc:	e7d4      	b.n	1268 <pm_policy_next_state+0x30>
    12be:	bf00      	nop
    12c0:	20000004 	.word	0x20000004
    12c4:	000f423f 	.word	0x000f423f
    12c8:	000f4240 	.word	0x000f4240

000012cc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    12cc:	b908      	cbnz	r0, 12d2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    12ce:	4b02      	ldr	r3, [pc, #8]	; (12d8 <pm_state_cpu_get_all+0xc>)
    12d0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    12d2:	2000      	movs	r0, #0
    12d4:	4770      	bx	lr
    12d6:	bf00      	nop
    12d8:	00005528 	.word	0x00005528

000012dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    12dc:	4901      	ldr	r1, [pc, #4]	; (12e4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    12de:	2210      	movs	r2, #16
	str	r2, [r1]
    12e0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    12e2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    12e4:	e000ed10 	.word	0xe000ed10

000012e8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    12e8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    12ea:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    12ec:	f380 8811 	msr	BASEPRI, r0
	isb
    12f0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    12f4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    12f8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    12fa:	b662      	cpsie	i
	isb
    12fc:	f3bf 8f6f 	isb	sy

	bx	lr
    1300:	4770      	bx	lr
    1302:	bf00      	nop

00001304 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1304:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1306:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1308:	f381 8811 	msr	BASEPRI, r1

	wfe
    130c:	bf20      	wfe

	msr	BASEPRI, r0
    130e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1312:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1314:	4770      	bx	lr
    1316:	bf00      	nop

00001318 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1318:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    131a:	2800      	cmp	r0, #0
    131c:	db07      	blt.n	132e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    131e:	4a04      	ldr	r2, [pc, #16]	; (1330 <arch_irq_enable+0x18>)
    1320:	0941      	lsrs	r1, r0, #5
    1322:	2301      	movs	r3, #1
    1324:	f000 001f 	and.w	r0, r0, #31
    1328:	4083      	lsls	r3, r0
    132a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    132e:	4770      	bx	lr
    1330:	e000e100 	.word	0xe000e100

00001334 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1334:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1336:	2800      	cmp	r0, #0
    1338:	db0c      	blt.n	1354 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    133a:	0943      	lsrs	r3, r0, #5
    133c:	4906      	ldr	r1, [pc, #24]	; (1358 <arch_irq_disable+0x24>)
    133e:	f000 001f 	and.w	r0, r0, #31
    1342:	3320      	adds	r3, #32
    1344:	2201      	movs	r2, #1
    1346:	4082      	lsls	r2, r0
    1348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    134c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1350:	f3bf 8f6f 	isb	sy
}
    1354:	4770      	bx	lr
    1356:	bf00      	nop
    1358:	e000e100 	.word	0xe000e100

0000135c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    135c:	4b05      	ldr	r3, [pc, #20]	; (1374 <arch_irq_is_enabled+0x18>)
    135e:	0942      	lsrs	r2, r0, #5
    1360:	f000 001f 	and.w	r0, r0, #31
    1364:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1368:	2301      	movs	r3, #1
    136a:	fa03 f000 	lsl.w	r0, r3, r0
}
    136e:	4010      	ands	r0, r2
    1370:	4770      	bx	lr
    1372:	bf00      	nop
    1374:	e000e100 	.word	0xe000e100

00001378 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1378:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    137a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    137c:	bfa8      	it	ge
    137e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1382:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1386:	bfb8      	it	lt
    1388:	4b06      	ldrlt	r3, [pc, #24]	; (13a4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    138a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    138e:	bfac      	ite	ge
    1390:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1394:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1398:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    139a:	bfb4      	ite	lt
    139c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    139e:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    13a2:	4770      	bx	lr
    13a4:	e000ed14 	.word	0xe000ed14

000013a8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    13a8:	bf30      	wfi
    b z_SysNmiOnReset
    13aa:	f7ff bffd 	b.w	13a8 <z_SysNmiOnReset>
    13ae:	bf00      	nop

000013b0 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    13b0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    13b2:	4b08      	ldr	r3, [pc, #32]	; (13d4 <z_arm_prep_c+0x24>)
    13b4:	4a08      	ldr	r2, [pc, #32]	; (13d8 <z_arm_prep_c+0x28>)
    13b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    13ba:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    13bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13c0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    13c4:	f002 fa8c 	bl	38e0 <z_bss_zero>
	z_data_copy();
    13c8:	f002 ff2e 	bl	4228 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    13cc:	f000 f9c8 	bl	1760 <z_arm_interrupt_init>
	z_cstart();
    13d0:	f002 faca 	bl	3968 <z_cstart>
    13d4:	00000000 	.word	0x00000000
    13d8:	e000ed00 	.word	0xe000ed00

000013dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    13dc:	4a09      	ldr	r2, [pc, #36]	; (1404 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    13de:	490a      	ldr	r1, [pc, #40]	; (1408 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    13e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    13e2:	6809      	ldr	r1, [r1, #0]
    13e4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13e6:	4909      	ldr	r1, [pc, #36]	; (140c <arch_swap+0x30>)
	_current->arch.basepri = key;
    13e8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13ea:	684b      	ldr	r3, [r1, #4]
    13ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    13f0:	604b      	str	r3, [r1, #4]
    13f2:	2300      	movs	r3, #0
    13f4:	f383 8811 	msr	BASEPRI, r3
    13f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    13fc:	6893      	ldr	r3, [r2, #8]
}
    13fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1400:	4770      	bx	lr
    1402:	bf00      	nop
    1404:	20000368 	.word	0x20000368
    1408:	00005630 	.word	0x00005630
    140c:	e000ed00 	.word	0xe000ed00

00001410 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1410:	4912      	ldr	r1, [pc, #72]	; (145c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1412:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1414:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1418:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    141a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    141e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1422:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1424:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1428:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    142c:	4f0c      	ldr	r7, [pc, #48]	; (1460 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    142e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1432:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1434:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1436:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1438:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    143a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    143c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    143e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1442:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1444:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1446:	f000 f9d1 	bl	17ec <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    144a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    144e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1452:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1456:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    145a:	4770      	bx	lr
    ldr r1, =_kernel
    145c:	20000368 	.word	0x20000368
    ldr v4, =_SCS_ICSR
    1460:	e000ed04 	.word	0xe000ed04

00001464 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1464:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1468:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    146a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    146e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1472:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1474:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1478:	2902      	cmp	r1, #2
    beq _oops
    147a:	d0ff      	beq.n	147c <_oops>

0000147c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    147c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    147e:	f003 f9dc 	bl	483a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1482:	bd01      	pop	{r0, pc}

00001484 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1484:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1488:	9b00      	ldr	r3, [sp, #0]
    148a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    148e:	490a      	ldr	r1, [pc, #40]	; (14b8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1490:	9b01      	ldr	r3, [sp, #4]
    1492:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1496:	9b02      	ldr	r3, [sp, #8]
    1498:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    149c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    14a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    14a4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    14a8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    14ac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    14ae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    14b0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    14b2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    14b4:	4770      	bx	lr
    14b6:	bf00      	nop
    14b8:	00004767 	.word	0x00004767

000014bc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    14bc:	4a09      	ldr	r2, [pc, #36]	; (14e4 <z_check_thread_stack_fail+0x28>)
{
    14be:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    14c0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    14c2:	b170      	cbz	r0, 14e2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    14c4:	f113 0f16 	cmn.w	r3, #22
    14c8:	6e40      	ldr	r0, [r0, #100]	; 0x64
    14ca:	d005      	beq.n	14d8 <z_check_thread_stack_fail+0x1c>
    14cc:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    14d0:	429a      	cmp	r2, r3
    14d2:	d805      	bhi.n	14e0 <z_check_thread_stack_fail+0x24>
    14d4:	4283      	cmp	r3, r0
    14d6:	d203      	bcs.n	14e0 <z_check_thread_stack_fail+0x24>
		return 0;
    14d8:	4281      	cmp	r1, r0
    14da:	bf28      	it	cs
    14dc:	2000      	movcs	r0, #0
    14de:	4770      	bx	lr
    14e0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    14e2:	4770      	bx	lr
    14e4:	20000368 	.word	0x20000368

000014e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    14e8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    14ea:	4b09      	ldr	r3, [pc, #36]	; (1510 <arch_switch_to_main_thread+0x28>)
{
    14ec:	460d      	mov	r5, r1
    14ee:	4614      	mov	r4, r2
	_current = main_thread;
    14f0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    14f2:	f000 f97b 	bl	17ec <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    14f6:	4620      	mov	r0, r4
    14f8:	f385 8809 	msr	PSP, r5
    14fc:	2100      	movs	r1, #0
    14fe:	b663      	cpsie	if
    1500:	f381 8811 	msr	BASEPRI, r1
    1504:	f3bf 8f6f 	isb	sy
    1508:	2200      	movs	r2, #0
    150a:	2300      	movs	r3, #0
    150c:	f003 f92b 	bl	4766 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1510:	20000368 	.word	0x20000368

00001514 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1514:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1516:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1518:	4a0b      	ldr	r2, [pc, #44]	; (1548 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    151a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    151c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    151e:	bf1e      	ittt	ne
	movne	r1, #0
    1520:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1522:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1524:	f003 fe0a 	blne	513c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1528:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    152a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    152e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1532:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1536:	4905      	ldr	r1, [pc, #20]	; (154c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1538:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    153a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    153c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    153e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1542:	4903      	ldr	r1, [pc, #12]	; (1550 <_isr_wrapper+0x3c>)
	bx r1
    1544:	4708      	bx	r1
    1546:	0000      	.short	0x0000
	ldr r2, =_kernel
    1548:	20000368 	.word	0x20000368
	ldr r1, =_sw_isr_table
    154c:	000053b4 	.word	0x000053b4
	ldr r1, =z_arm_int_exit
    1550:	00001555 	.word	0x00001555

00001554 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1554:	4b04      	ldr	r3, [pc, #16]	; (1568 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1556:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1558:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    155a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    155c:	d003      	beq.n	1566 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    155e:	4903      	ldr	r1, [pc, #12]	; (156c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1564:	600a      	str	r2, [r1, #0]

00001566 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1566:	4770      	bx	lr
	ldr r3, =_kernel
    1568:	20000368 	.word	0x20000368
	ldr r1, =_SCS_ICSR
    156c:	e000ed04 	.word	0xe000ed04

00001570 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1570:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1572:	4b18      	ldr	r3, [pc, #96]	; (15d4 <mem_manage_fault+0x64>)
{
    1574:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    157a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    157c:	0792      	lsls	r2, r2, #30
{
    157e:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1580:	d519      	bpl.n	15b6 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1582:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1586:	0615      	lsls	r5, r2, #24
    1588:	d515      	bpl.n	15b6 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    158a:	b119      	cbz	r1, 1594 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    158c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    158e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1592:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1598:	4d0e      	ldr	r5, [pc, #56]	; (15d4 <mem_manage_fault+0x64>)
    159a:	f012 0f10 	tst.w	r2, #16
    159e:	d10d      	bne.n	15bc <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    15a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    15a2:	079a      	lsls	r2, r3, #30
    15a4:	d40a      	bmi.n	15bc <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    15a6:	2000      	movs	r0, #0
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    15a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    15aa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    15ae:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    15b0:	2300      	movs	r3, #0
    15b2:	7023      	strb	r3, [r4, #0]

	return reason;
}
    15b4:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    15b6:	f06f 0015 	mvn.w	r0, #21
    15ba:	e7eb      	b.n	1594 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    15bc:	686b      	ldr	r3, [r5, #4]
    15be:	051b      	lsls	r3, r3, #20
    15c0:	d5f1      	bpl.n	15a6 <mem_manage_fault+0x36>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    15c2:	4631      	mov	r1, r6
    15c4:	f7ff ff7a 	bl	14bc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    15c8:	2800      	cmp	r0, #0
    15ca:	d0ec      	beq.n	15a6 <mem_manage_fault+0x36>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    15cc:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    15d0:	2002      	movs	r0, #2
    15d2:	e7e9      	b.n	15a8 <mem_manage_fault+0x38>
    15d4:	e000ed00 	.word	0xe000ed00

000015d8 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    15d8:	4b0b      	ldr	r3, [pc, #44]	; (1608 <bus_fault.constprop.0+0x30>)
    15da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    15dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    15de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15e0:	0592      	lsls	r2, r2, #22
    15e2:	d508      	bpl.n	15f6 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    15e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    15e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15e8:	0412      	lsls	r2, r2, #16
    15ea:	d504      	bpl.n	15f6 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    15ec:	b118      	cbz	r0, 15f6 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    15ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    15f4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    15f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    15f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    15fc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15fe:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1602:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1604:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1606:	4770      	bx	lr
    1608:	e000ed00 	.word	0xe000ed00

0000160c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    160c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    160e:	4b4a      	ldr	r3, [pc, #296]	; (1738 <z_arm_fault+0x12c>)
    1610:	685b      	ldr	r3, [r3, #4]
{
    1612:	b08a      	sub	sp, #40	; 0x28
    1614:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1616:	f3c3 0308 	ubfx	r3, r3, #0, #9
    161a:	2600      	movs	r6, #0
    161c:	f386 8811 	msr	BASEPRI, r6
    1620:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1624:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1628:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    162c:	d111      	bne.n	1652 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    162e:	f002 000c 	and.w	r0, r2, #12
    1632:	2808      	cmp	r0, #8
    1634:	d00d      	beq.n	1652 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1636:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1638:	bf4c      	ite	mi
    163a:	460d      	movmi	r5, r1
			*nested_exc = true;
    163c:	2601      	movpl	r6, #1
	*recoverable = false;
    163e:	2200      	movs	r2, #0
	switch (fault) {
    1640:	3b03      	subs	r3, #3
	*recoverable = false;
    1642:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1646:	2b03      	cmp	r3, #3
    1648:	d84d      	bhi.n	16e6 <z_arm_fault+0xda>
    164a:	e8df f003 	tbb	[pc, r3]
    164e:	6504      	.short	0x6504
    1650:	6d69      	.short	0x6d69
		return NULL;
    1652:	4635      	mov	r5, r6
    1654:	e7f3      	b.n	163e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1656:	4b38      	ldr	r3, [pc, #224]	; (1738 <z_arm_fault+0x12c>)
    1658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    165a:	0791      	lsls	r1, r2, #30
    165c:	d443      	bmi.n	16e6 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1660:	2a00      	cmp	r2, #0
    1662:	db40      	blt.n	16e6 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1666:	0052      	lsls	r2, r2, #1
    1668:	d53d      	bpl.n	16e6 <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    166a:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    166c:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    166e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1672:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1678:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    167c:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    167e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1686:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    168c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1690:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1694:	4291      	cmp	r1, r2
    1696:	d009      	beq.n	16ac <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    169a:	b2d2      	uxtb	r2, r2
    169c:	b142      	cbz	r2, 16b0 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    169e:	f10d 0207 	add.w	r2, sp, #7
    16a2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    16a4:	4628      	mov	r0, r5
    16a6:	f7ff ff63 	bl	1570 <mem_manage_fault>
    16aa:	e00a      	b.n	16c2 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    16ac:	682c      	ldr	r4, [r5, #0]
    16ae:	e01b      	b.n	16e8 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    16b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16b2:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    16b6:	d006      	beq.n	16c6 <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    16b8:	f10d 0107 	add.w	r1, sp, #7
    16bc:	2001      	movs	r0, #1
    16be:	f7ff ff8b 	bl	15d8 <bus_fault.constprop.0>
    16c2:	4604      	mov	r4, r0
    16c4:	e010      	b.n	16e8 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    16c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16c8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    16cc:	d30b      	bcc.n	16e6 <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    16ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    16d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    16d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    16d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    16d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16dc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    16e0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    16e4:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    16e6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    16e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    16ec:	b993      	cbnz	r3, 1714 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    16ee:	2220      	movs	r2, #32
    16f0:	4629      	mov	r1, r5
    16f2:	a802      	add	r0, sp, #8
    16f4:	f003 f8c0 	bl	4878 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    16f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16fa:	b1be      	cbz	r6, 172c <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    16fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1700:	b922      	cbnz	r2, 170c <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1702:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1706:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    170a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    170c:	a902      	add	r1, sp, #8
    170e:	4620      	mov	r0, r4
    1710:	f003 f891 	bl	4836 <z_arm_fatal_error>
}
    1714:	b00a      	add	sp, #40	; 0x28
    1716:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    1718:	f10d 0207 	add.w	r2, sp, #7
    171c:	2100      	movs	r1, #0
    171e:	e7c1      	b.n	16a4 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    1720:	f10d 0107 	add.w	r1, sp, #7
    1724:	2000      	movs	r0, #0
    1726:	e7ca      	b.n	16be <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1728:	4b03      	ldr	r3, [pc, #12]	; (1738 <z_arm_fault+0x12c>)
    172a:	e7d0      	b.n	16ce <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    172c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1730:	f023 0301 	bic.w	r3, r3, #1
    1734:	e7e9      	b.n	170a <z_arm_fault+0xfe>
    1736:	bf00      	nop
    1738:	e000ed00 	.word	0xe000ed00

0000173c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    173c:	4a02      	ldr	r2, [pc, #8]	; (1748 <z_arm_fault_init+0xc>)
    173e:	6953      	ldr	r3, [r2, #20]
    1740:	f043 0310 	orr.w	r3, r3, #16
    1744:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1746:	4770      	bx	lr
    1748:	e000ed00 	.word	0xe000ed00

0000174c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    174c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1750:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1754:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1756:	4672      	mov	r2, lr
	bl z_arm_fault
    1758:	f7ff ff58 	bl	160c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    175c:	bd01      	pop	{r0, pc}
    175e:	bf00      	nop

00001760 <z_arm_interrupt_init>:
    1760:	4804      	ldr	r0, [pc, #16]	; (1774 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1762:	2300      	movs	r3, #0
    1764:	2120      	movs	r1, #32
    1766:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1768:	3301      	adds	r3, #1
    176a:	2b1e      	cmp	r3, #30
    176c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1770:	d1f9      	bne.n	1766 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1772:	4770      	bx	lr
    1774:	e000e100 	.word	0xe000e100

00001778 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1778:	f7ff fc76 	bl	1068 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    177c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    177e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1782:	4808      	ldr	r0, [pc, #32]	; (17a4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1784:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1788:	1840      	adds	r0, r0, r1
    msr PSP, r0
    178a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    178e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1792:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1794:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1796:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    179a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    179e:	f7ff fe07 	bl	13b0 <z_arm_prep_c>
    17a2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    17a4:	200003c0 	.word	0x200003c0

000017a8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    17a8:	4b08      	ldr	r3, [pc, #32]	; (17cc <z_impl_k_thread_abort+0x24>)
    17aa:	689b      	ldr	r3, [r3, #8]
    17ac:	4283      	cmp	r3, r0
    17ae:	d10b      	bne.n	17c8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    17b0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    17b4:	b143      	cbz	r3, 17c8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    17b6:	4b06      	ldr	r3, [pc, #24]	; (17d0 <z_impl_k_thread_abort+0x28>)
    17b8:	685a      	ldr	r2, [r3, #4]
    17ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    17be:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    17c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    17c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    17c6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    17c8:	f002 bcce 	b.w	4168 <z_thread_abort>
    17cc:	20000368 	.word	0x20000368
    17d0:	e000ed00 	.word	0xe000ed00

000017d4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    17d4:	4b02      	ldr	r3, [pc, #8]	; (17e0 <z_arm_configure_static_mpu_regions+0xc>)
    17d6:	4a03      	ldr	r2, [pc, #12]	; (17e4 <z_arm_configure_static_mpu_regions+0x10>)
    17d8:	4803      	ldr	r0, [pc, #12]	; (17e8 <z_arm_configure_static_mpu_regions+0x14>)
    17da:	2101      	movs	r1, #1
    17dc:	f000 b870 	b.w	18c0 <arm_core_mpu_configure_static_mpu_regions>
    17e0:	20006000 	.word	0x20006000
    17e4:	20000000 	.word	0x20000000
    17e8:	00005528 	.word	0x00005528

000017ec <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    17ec:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    17ee:	4b05      	ldr	r3, [pc, #20]	; (1804 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    17f0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    17f2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    17f4:	4a04      	ldr	r2, [pc, #16]	; (1808 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    17f6:	2140      	movs	r1, #64	; 0x40
    17f8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    17fc:	4618      	mov	r0, r3
    17fe:	2101      	movs	r1, #1
    1800:	f000 b868 	b.w	18d4 <arm_core_mpu_configure_dynamic_mpu_regions>
    1804:	200002ac 	.word	0x200002ac
    1808:	150b0000 	.word	0x150b0000

0000180c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    180c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    180e:	4e20      	ldr	r6, [pc, #128]	; (1890 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1810:	2500      	movs	r5, #0
    1812:	428d      	cmp	r5, r1
    1814:	da39      	bge.n	188a <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    1816:	6844      	ldr	r4, [r0, #4]
    1818:	b374      	cbz	r4, 1878 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    181a:	b153      	cbz	r3, 1832 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    181c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1820:	ea14 0f0c 	tst.w	r4, ip
    1824:	d12f      	bne.n	1886 <mpu_configure_regions+0x7a>
		&&
    1826:	2c1f      	cmp	r4, #31
    1828:	d92d      	bls.n	1886 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    182a:	6807      	ldr	r7, [r0, #0]
		&&
    182c:	ea1c 0f07 	tst.w	ip, r7
    1830:	d129      	bne.n	1886 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1832:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1834:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1836:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    183a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    183e:	d91e      	bls.n	187e <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    1840:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1844:	d81d      	bhi.n	1882 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1846:	3c01      	subs	r4, #1
    1848:	fab4 f484 	clz	r4, r4
    184c:	f1c4 041f 	rsb	r4, r4, #31
    1850:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1852:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1856:	ea4c 0c04 	orr.w	ip, ip, r4
    185a:	d814      	bhi.n	1886 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    185c:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1860:	4314      	orrs	r4, r2
    1862:	f044 0410 	orr.w	r4, r4, #16
    1866:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    186a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    186e:	f04c 0401 	orr.w	r4, ip, #1
    1872:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    1876:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    1878:	3501      	adds	r5, #1
    187a:	300c      	adds	r0, #12
    187c:	e7c9      	b.n	1812 <mpu_configure_regions+0x6>
		return REGION_32B;
    187e:	2408      	movs	r4, #8
    1880:	e7e7      	b.n	1852 <mpu_configure_regions+0x46>
		return REGION_4G;
    1882:	243e      	movs	r4, #62	; 0x3e
    1884:	e7e5      	b.n	1852 <mpu_configure_regions+0x46>
			return -EINVAL;
    1886:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    188a:	4610      	mov	r0, r2
    188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    188e:	bf00      	nop
    1890:	e000ed00 	.word	0xe000ed00

00001894 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1894:	4b04      	ldr	r3, [pc, #16]	; (18a8 <arm_core_mpu_enable+0x14>)
    1896:	2205      	movs	r2, #5
    1898:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    189c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18a0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    18a4:	4770      	bx	lr
    18a6:	bf00      	nop
    18a8:	e000ed00 	.word	0xe000ed00

000018ac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    18ac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    18b0:	4b02      	ldr	r3, [pc, #8]	; (18bc <arm_core_mpu_disable+0x10>)
    18b2:	2200      	movs	r2, #0
    18b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    18b8:	4770      	bx	lr
    18ba:	bf00      	nop
    18bc:	e000ed00 	.word	0xe000ed00

000018c0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    18c0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    18c2:	4c03      	ldr	r4, [pc, #12]	; (18d0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    18c4:	2301      	movs	r3, #1
    18c6:	7822      	ldrb	r2, [r4, #0]
    18c8:	f7ff ffa0 	bl	180c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    18cc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    18ce:	bd10      	pop	{r4, pc}
    18d0:	200003a0 	.word	0x200003a0

000018d4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    18d4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    18d6:	4a09      	ldr	r2, [pc, #36]	; (18fc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    18d8:	2300      	movs	r3, #0
    18da:	7812      	ldrb	r2, [r2, #0]
    18dc:	f7ff ff96 	bl	180c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    18e0:	f110 0f16 	cmn.w	r0, #22
    18e4:	d002      	beq.n	18ec <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    18e6:	4a06      	ldr	r2, [pc, #24]	; (1900 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    18e8:	2807      	cmp	r0, #7
    18ea:	dd00      	ble.n	18ee <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    18ec:	bd08      	pop	{r3, pc}
    18ee:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    18f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    18f6:	3001      	adds	r0, #1
    18f8:	e7f6      	b.n	18e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    18fa:	bf00      	nop
    18fc:	200003a0 	.word	0x200003a0
    1900:	e000ed00 	.word	0xe000ed00

00001904 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1904:	4914      	ldr	r1, [pc, #80]	; (1958 <z_arm_mpu_init+0x54>)
    1906:	6808      	ldr	r0, [r1, #0]
    1908:	2808      	cmp	r0, #8
{
    190a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    190c:	d821      	bhi.n	1952 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    190e:	f7ff ffcd 	bl	18ac <arm_core_mpu_disable>
    1912:	4c12      	ldr	r4, [pc, #72]	; (195c <z_arm_mpu_init+0x58>)
    1914:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1916:	2200      	movs	r2, #0
    1918:	4290      	cmp	r0, r2
    191a:	f101 010c 	add.w	r1, r1, #12
    191e:	d105      	bne.n	192c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1920:	4b0f      	ldr	r3, [pc, #60]	; (1960 <z_arm_mpu_init+0x5c>)
    1922:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1924:	f7ff ffb6 	bl	1894 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1928:	2000      	movs	r0, #0
}
    192a:	bd10      	pop	{r4, pc}
    192c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1930:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1934:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1938:	4313      	orrs	r3, r2
    193a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    193e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1942:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1946:	f043 0301 	orr.w	r3, r3, #1
    194a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    194e:	3201      	adds	r2, #1
    1950:	e7e2      	b.n	1918 <z_arm_mpu_init+0x14>
		return -1;
    1952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1956:	e7e8      	b.n	192a <z_arm_mpu_init+0x26>
    1958:	00005534 	.word	0x00005534
    195c:	e000ed00 	.word	0xe000ed00
    1960:	200003a0 	.word	0x200003a0

00001964 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1964:	b120      	cbz	r0, 1970 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1966:	4b03      	ldr	r3, [pc, #12]	; (1974 <arch_busy_wait+0x10>)
    1968:	0180      	lsls	r0, r0, #6
    196a:	f043 0301 	orr.w	r3, r3, #1
    196e:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1970:	4770      	bx	lr
    1972:	bf00      	nop
    1974:	000054d0 	.word	0x000054d0

00001978 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1978:	4b08      	ldr	r3, [pc, #32]	; (199c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    197a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    197c:	1ac3      	subs	r3, r0, r3
{
    197e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1980:	4907      	ldr	r1, [pc, #28]	; (19a0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1982:	109b      	asrs	r3, r3, #2
{
    1984:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1986:	4359      	muls	r1, r3
    1988:	4806      	ldr	r0, [pc, #24]	; (19a4 <onoff_stop+0x2c>)
    198a:	2240      	movs	r2, #64	; 0x40
    198c:	f002 ffc9 	bl	4922 <stop>
	notify(mgr, res);
    1990:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1992:	4601      	mov	r1, r0
	notify(mgr, res);
    1994:	4620      	mov	r0, r4
}
    1996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    199a:	4718      	bx	r3
    199c:	200002cc 	.word	0x200002cc
    19a0:	b6db6db7 	.word	0xb6db6db7
    19a4:	00005354 	.word	0x00005354

000019a8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    19a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    19aa:	4c0c      	ldr	r4, [pc, #48]	; (19dc <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    19ac:	4a0c      	ldr	r2, [pc, #48]	; (19e0 <onoff_start+0x38>)
    19ae:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    19b0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    19b2:	9300      	str	r3, [sp, #0]
{
    19b4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    19b6:	460b      	mov	r3, r1
    19b8:	490a      	ldr	r1, [pc, #40]	; (19e4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    19ba:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    19bc:	4361      	muls	r1, r4
{
    19be:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    19c0:	4809      	ldr	r0, [pc, #36]	; (19e8 <onoff_start+0x40>)
    19c2:	f002 ffdb 	bl	497c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    19c6:	1e01      	subs	r1, r0, #0
    19c8:	da05      	bge.n	19d6 <onoff_start+0x2e>
		notify(mgr, err);
    19ca:	4630      	mov	r0, r6
    19cc:	462b      	mov	r3, r5
	}
}
    19ce:	b002      	add	sp, #8
    19d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    19d4:	4718      	bx	r3
}
    19d6:	b002      	add	sp, #8
    19d8:	bd70      	pop	{r4, r5, r6, pc}
    19da:	bf00      	nop
    19dc:	200002cc 	.word	0x200002cc
    19e0:	000049e9 	.word	0x000049e9
    19e4:	b6db6db7 	.word	0xb6db6db7
    19e8:	00005354 	.word	0x00005354

000019ec <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    19ec:	2200      	movs	r2, #0
{
    19ee:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    19f0:	2101      	movs	r1, #1
{
    19f2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    19f4:	4610      	mov	r0, r2
    19f6:	f7ff fcbf 	bl	1378 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    19fa:	480f      	ldr	r0, [pc, #60]	; (1a38 <clk_init+0x4c>)
    19fc:	f001 fa10 	bl	2e20 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1a00:	4b0e      	ldr	r3, [pc, #56]	; (1a3c <clk_init+0x50>)
    1a02:	4298      	cmp	r0, r3
    1a04:	d115      	bne.n	1a32 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1a06:	f003 fad1 	bl	4fac <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1a0a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1a0c:	490c      	ldr	r1, [pc, #48]	; (1a40 <clk_init+0x54>)
    1a0e:	4630      	mov	r0, r6
    1a10:	f002 fe3e 	bl	4690 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1a14:	2800      	cmp	r0, #0
    1a16:	db0b      	blt.n	1a30 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1a18:	2501      	movs	r5, #1
    1a1a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    1a1c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1a1e:	4908      	ldr	r1, [pc, #32]	; (1a40 <clk_init+0x54>)
    1a20:	f104 001c 	add.w	r0, r4, #28
    1a24:	f002 fe34 	bl	4690 <onoff_manager_init>
		if (err < 0) {
    1a28:	2800      	cmp	r0, #0
    1a2a:	db01      	blt.n	1a30 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1a2c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1a2e:	2000      	movs	r0, #0
}
    1a30:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1a32:	f06f 0004 	mvn.w	r0, #4
    1a36:	e7fb      	b.n	1a30 <clk_init+0x44>
    1a38:	00001a79 	.word	0x00001a79
    1a3c:	0bad0000 	.word	0x0bad0000
    1a40:	00005554 	.word	0x00005554

00001a44 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1a44:	b570      	push	{r4, r5, r6, lr}
    1a46:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1a48:	230c      	movs	r3, #12
    1a4a:	4809      	ldr	r0, [pc, #36]	; (1a70 <clkstarted_handle.constprop.0+0x2c>)
    1a4c:	434b      	muls	r3, r1
    1a4e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1a50:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1a54:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1a56:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1a58:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1a5a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1a5c:	f002 ff4e 	bl	48fc <set_on_state>
	if (callback) {
    1a60:	b12d      	cbz	r5, 1a6e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1a62:	4632      	mov	r2, r6
    1a64:	462b      	mov	r3, r5
    1a66:	4803      	ldr	r0, [pc, #12]	; (1a74 <clkstarted_handle.constprop.0+0x30>)
}
    1a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1a6c:	4718      	bx	r3
}
    1a6e:	bd70      	pop	{r4, r5, r6, pc}
    1a70:	200002cc 	.word	0x200002cc
    1a74:	00005354 	.word	0x00005354

00001a78 <clock_event_handler>:
	switch (event) {
    1a78:	b110      	cbz	r0, 1a80 <clock_event_handler+0x8>
    1a7a:	2801      	cmp	r0, #1
    1a7c:	d004      	beq.n	1a88 <clock_event_handler+0x10>
    1a7e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1a80:	4b03      	ldr	r3, [pc, #12]	; (1a90 <clock_event_handler+0x18>)
    1a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a84:	075b      	lsls	r3, r3, #29
    1a86:	d101      	bne.n	1a8c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1a88:	f7ff bfdc 	b.w	1a44 <clkstarted_handle.constprop.0>
}
    1a8c:	4770      	bx	lr
    1a8e:	bf00      	nop
    1a90:	200002cc 	.word	0x200002cc

00001a94 <generic_hfclk_start>:
{
    1a94:	b508      	push	{r3, lr}
	__asm__ volatile(
    1a96:	f04f 0320 	mov.w	r3, #32
    1a9a:	f3ef 8111 	mrs	r1, BASEPRI
    1a9e:	f383 8812 	msr	BASEPRI_MAX, r3
    1aa2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1aa6:	4a12      	ldr	r2, [pc, #72]	; (1af0 <generic_hfclk_start+0x5c>)
    1aa8:	6813      	ldr	r3, [r2, #0]
    1aaa:	f043 0002 	orr.w	r0, r3, #2
    1aae:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1ab0:	07da      	lsls	r2, r3, #31
    1ab2:	d408      	bmi.n	1ac6 <generic_hfclk_start+0x32>
	__asm__ volatile(
    1ab4:	f381 8811 	msr	BASEPRI, r1
    1ab8:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1abc:	2001      	movs	r0, #1
}
    1abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1ac2:	f003 ba80 	b.w	4fc6 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1aca:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1ace:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1ad2:	07d3      	lsls	r3, r2, #31
    1ad4:	d5ee      	bpl.n	1ab4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1ad6:	4807      	ldr	r0, [pc, #28]	; (1af4 <generic_hfclk_start+0x60>)
    1ad8:	f002 ff10 	bl	48fc <set_on_state>
    1adc:	f381 8811 	msr	BASEPRI, r1
    1ae0:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    1ae4:	2000      	movs	r0, #0
}
    1ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1aea:	f7ff bfab 	b.w	1a44 <clkstarted_handle.constprop.0>
    1aee:	bf00      	nop
    1af0:	2000031c 	.word	0x2000031c
    1af4:	2000030c 	.word	0x2000030c

00001af8 <api_blocking_start>:
{
    1af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1afa:	2200      	movs	r2, #0
    1afc:	2301      	movs	r3, #1
    1afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1b02:	4a09      	ldr	r2, [pc, #36]	; (1b28 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1b04:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1b08:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1b0a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1b0e:	f002 ff64 	bl	49da <api_start>
	if (err < 0) {
    1b12:	2800      	cmp	r0, #0
    1b14:	db05      	blt.n	1b22 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1b1a:	2300      	movs	r3, #0
    1b1c:	4668      	mov	r0, sp
    1b1e:	f002 f855 	bl	3bcc <z_impl_k_sem_take>
}
    1b22:	b005      	add	sp, #20
    1b24:	f85d fb04 	ldr.w	pc, [sp], #4
    1b28:	00004a07 	.word	0x00004a07

00001b2c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b2c:	4b09      	ldr	r3, [pc, #36]	; (1b54 <generic_hfclk_stop+0x28>)
    1b2e:	f3bf 8f5b 	dmb	ish
    1b32:	e853 2f00 	ldrex	r2, [r3]
    1b36:	f022 0102 	bic.w	r1, r2, #2
    1b3a:	e843 1000 	strex	r0, r1, [r3]
    1b3e:	2800      	cmp	r0, #0
    1b40:	d1f7      	bne.n	1b32 <generic_hfclk_stop+0x6>
    1b42:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1b46:	07d3      	lsls	r3, r2, #31
    1b48:	d402      	bmi.n	1b50 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1b4a:	2001      	movs	r0, #1
    1b4c:	f003 ba77 	b.w	503e <nrfx_clock_stop>
}
    1b50:	4770      	bx	lr
    1b52:	bf00      	nop
    1b54:	2000031c 	.word	0x2000031c

00001b58 <z_nrf_clock_control_lf_on>:
{
    1b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1b5c:	4938      	ldr	r1, [pc, #224]	; (1c40 <z_nrf_clock_control_lf_on+0xe8>)
    1b5e:	f3bf 8f5b 	dmb	ish
    1b62:	4607      	mov	r7, r0
    1b64:	2201      	movs	r2, #1
    1b66:	e851 3f00 	ldrex	r3, [r1]
    1b6a:	e841 2000 	strex	r0, r2, [r1]
    1b6e:	2800      	cmp	r0, #0
    1b70:	d1f9      	bne.n	1b66 <z_nrf_clock_control_lf_on+0xe>
    1b72:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1b76:	b933      	cbnz	r3, 1b86 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1b78:	4932      	ldr	r1, [pc, #200]	; (1c44 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    1b7a:	4833      	ldr	r0, [pc, #204]	; (1c48 <z_nrf_clock_control_lf_on+0xf0>)
    1b7c:	604b      	str	r3, [r1, #4]
    1b7e:	60cb      	str	r3, [r1, #12]
    1b80:	608a      	str	r2, [r1, #8]
    1b82:	f002 fd98 	bl	46b6 <onoff_request>
	switch (start_mode) {
    1b86:	1e7b      	subs	r3, r7, #1
    1b88:	2b01      	cmp	r3, #1
    1b8a:	d82b      	bhi.n	1be4 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1b8c:	2f01      	cmp	r7, #1
    1b8e:	d107      	bne.n	1ba0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1b98:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1b9c:	2b01      	cmp	r3, #1
    1b9e:	d021      	beq.n	1be4 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ba0:	f003 fac6 	bl	5130 <k_is_in_isr>
    1ba4:	4605      	mov	r5, r0
    1ba6:	b9f8      	cbnz	r0, 1be8 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1ba8:	4b28      	ldr	r3, [pc, #160]	; (1c4c <z_nrf_clock_control_lf_on+0xf4>)
    1baa:	781b      	ldrb	r3, [r3, #0]
    1bac:	b1e3      	cbz	r3, 1be8 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    1bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bb2:	2202      	movs	r2, #2
    1bb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1bb8:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bba:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1c50 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1bbe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1bc2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1bc6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1bca:	03d2      	lsls	r2, r2, #15
    1bcc:	d516      	bpl.n	1bfc <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1bce:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1bd2:	2b01      	cmp	r3, #1
    1bd4:	d001      	beq.n	1bda <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1bd6:	2f01      	cmp	r7, #1
    1bd8:	d110      	bne.n	1bfc <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    1bda:	b35d      	cbz	r5, 1c34 <z_nrf_clock_control_lf_on+0xdc>
    1bdc:	f386 8811 	msr	BASEPRI, r6
    1be0:	f3bf 8f6f 	isb	sy
}
    1be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1be8:	f04f 0320 	mov.w	r3, #32
    1bec:	f3ef 8611 	mrs	r6, BASEPRI
    1bf0:	f383 8812 	msr	BASEPRI_MAX, r3
    1bf4:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1bf8:	2501      	movs	r5, #1
    1bfa:	e7de      	b.n	1bba <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1bfc:	b1ad      	cbz	r5, 1c2a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1bfe:	4630      	mov	r0, r6
    1c00:	f7ff fb80 	bl	1304 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1c04:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d1da      	bne.n	1bc2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1c0c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1c10:	2a00      	cmp	r2, #0
    1c12:	d0d6      	beq.n	1bc2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1c14:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1c18:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1c1c:	2301      	movs	r3, #1
    1c1e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    1c22:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c26:	60a3      	str	r3, [r4, #8]
}
    1c28:	e7cb      	b.n	1bc2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    1c2a:	2100      	movs	r1, #0
    1c2c:	2021      	movs	r0, #33	; 0x21
    1c2e:	f002 fa7b 	bl	4128 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1c32:	e7e7      	b.n	1c04 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    1c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c38:	2202      	movs	r2, #2
    1c3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1c3e:	e7d1      	b.n	1be4 <z_nrf_clock_control_lf_on+0x8c>
    1c40:	200002c8 	.word	0x200002c8
    1c44:	200002b8 	.word	0x200002b8
    1c48:	200002e8 	.word	0x200002e8
    1c4c:	200003a1 	.word	0x200003a1
    1c50:	e000e100 	.word	0xe000e100

00001c54 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1c54:	b530      	push	{r4, r5, lr}
	return port->config;
    1c56:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c58:	7b05      	ldrb	r5, [r0, #12]
    1c5a:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1c5e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    1c62:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c64:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1c68:	d105      	bne.n	1c76 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    1c6a:	4620      	mov	r0, r4
    1c6c:	f001 fb54 	bl	3318 <nrfx_gpiote_trigger_disable>

		return 0;
    1c70:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    1c72:	b005      	add	sp, #20
    1c74:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c76:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    1c78:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c7c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1c80:	d114      	bne.n	1cac <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c86:	bf0c      	ite	eq
    1c88:	2304      	moveq	r3, #4
    1c8a:	2305      	movne	r3, #5
    1c8c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1c90:	2300      	movs	r3, #0
    1c92:	4619      	mov	r1, r3
    1c94:	aa02      	add	r2, sp, #8
    1c96:	4620      	mov	r0, r4
    1c98:	f001 f974 	bl	2f84 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1c9c:	4b1d      	ldr	r3, [pc, #116]	; (1d14 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1c9e:	4298      	cmp	r0, r3
    1ca0:	d135      	bne.n	1d0e <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1ca2:	2101      	movs	r1, #1
    1ca4:	4620      	mov	r0, r4
    1ca6:	f001 faf3 	bl	3290 <nrfx_gpiote_trigger_enable>
	return 0;
    1caa:	e7e1      	b.n	1c70 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1cac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    1cb0:	d022      	beq.n	1cf8 <gpio_nrfx_pin_interrupt_configure+0xa4>
    1cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1cb6:	bf14      	ite	ne
    1cb8:	2301      	movne	r3, #1
    1cba:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1cbc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1cc0:	6883      	ldr	r3, [r0, #8]
    1cc2:	40cb      	lsrs	r3, r1
    1cc4:	07d9      	lsls	r1, r3, #31
    1cc6:	d4e3      	bmi.n	1c90 <gpio_nrfx_pin_interrupt_configure+0x3c>
    1cc8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1ccc:	d1e0      	bne.n	1c90 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1cce:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1cd2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1cd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1cde:	07db      	lsls	r3, r3, #31
    1ce0:	d4d6      	bmi.n	1c90 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1ce2:	f10d 0507 	add.w	r5, sp, #7
    1ce6:	4629      	mov	r1, r5
    1ce8:	4620      	mov	r0, r4
    1cea:	f001 fa7d 	bl	31e8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1cee:	4b0a      	ldr	r3, [pc, #40]	; (1d18 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1cf0:	4298      	cmp	r0, r3
    1cf2:	d003      	beq.n	1cfc <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    1cf4:	9503      	str	r5, [sp, #12]
    1cf6:	e7cb      	b.n	1c90 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1cf8:	2303      	movs	r3, #3
    1cfa:	e7df      	b.n	1cbc <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    1cfc:	4628      	mov	r0, r5
    1cfe:	f001 fac1 	bl	3284 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1d02:	4b04      	ldr	r3, [pc, #16]	; (1d14 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1d04:	4298      	cmp	r0, r3
    1d06:	d0f5      	beq.n	1cf4 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    1d08:	f06f 000b 	mvn.w	r0, #11
    1d0c:	e7b1      	b.n	1c72 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    1d0e:	f06f 0015 	mvn.w	r0, #21
    1d12:	e7ae      	b.n	1c72 <gpio_nrfx_pin_interrupt_configure+0x1e>
    1d14:	0bad0000 	.word	0x0bad0000
    1d18:	0bad0004 	.word	0x0bad0004

00001d1c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1d1c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1d1e:	f001 faa1 	bl	3264 <nrfx_gpiote_is_init>
    1d22:	4604      	mov	r4, r0
    1d24:	b968      	cbnz	r0, 1d42 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1d26:	f001 fa75 	bl	3214 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1d2a:	4b08      	ldr	r3, [pc, #32]	; (1d4c <gpio_nrfx_init+0x30>)
    1d2c:	4298      	cmp	r0, r3
    1d2e:	d10a      	bne.n	1d46 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1d30:	4807      	ldr	r0, [pc, #28]	; (1d50 <gpio_nrfx_init+0x34>)
    1d32:	4621      	mov	r1, r4
    1d34:	f001 fa52 	bl	31dc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1d38:	4622      	mov	r2, r4
    1d3a:	2105      	movs	r1, #5
    1d3c:	2006      	movs	r0, #6
    1d3e:	f7ff fb1b 	bl	1378 <z_arm_irq_priority_set>
		return 0;
    1d42:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1d44:	bd10      	pop	{r4, pc}
		return -EIO;
    1d46:	f06f 0004 	mvn.w	r0, #4
    1d4a:	e7fb      	b.n	1d44 <gpio_nrfx_init+0x28>
    1d4c:	0bad0000 	.word	0x0bad0000
    1d50:	00001d55 	.word	0x00001d55

00001d54 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1d54:	0943      	lsrs	r3, r0, #5
{
    1d56:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1d58:	d107      	bne.n	1d6a <nrfx_gpio_handler+0x16>
	return list->head;
    1d5a:	4b0b      	ldr	r3, [pc, #44]	; (1d88 <nrfx_gpio_handler+0x34>)
    1d5c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d5e:	b121      	cbz	r1, 1d6a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    1d60:	2501      	movs	r5, #1
	return node->next;
    1d62:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1d64:	4e09      	ldr	r6, [pc, #36]	; (1d8c <nrfx_gpio_handler+0x38>)
    1d66:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d68:	b901      	cbnz	r1, 1d6c <nrfx_gpio_handler+0x18>
}
    1d6a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    1d6c:	688a      	ldr	r2, [r1, #8]
    1d6e:	402a      	ands	r2, r5
    1d70:	d002      	beq.n	1d78 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    1d72:	684b      	ldr	r3, [r1, #4]
    1d74:	4630      	mov	r0, r6
    1d76:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d78:	b11c      	cbz	r4, 1d82 <nrfx_gpio_handler+0x2e>
    1d7a:	6823      	ldr	r3, [r4, #0]
    1d7c:	4621      	mov	r1, r4
    1d7e:	461c      	mov	r4, r3
    1d80:	e7f2      	b.n	1d68 <nrfx_gpio_handler+0x14>
    1d82:	4623      	mov	r3, r4
    1d84:	e7fa      	b.n	1d7c <nrfx_gpio_handler+0x28>
    1d86:	bf00      	nop
    1d88:	20000320 	.word	0x20000320
    1d8c:	0000536c 	.word	0x0000536c

00001d90 <gpio_nrfx_pin_configure>:
{
    1d90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    1d94:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d96:	7b3b      	ldrb	r3, [r7, #12]
    1d98:	f001 051f 	and.w	r5, r1, #31
    1d9c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    1da0:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1da2:	4628      	mov	r0, r5
    1da4:	f10d 0103 	add.w	r1, sp, #3
{
    1da8:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1daa:	f001 fa1d 	bl	31e8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1dae:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1db2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1db4:	d10b      	bne.n	1dce <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    1db6:	4628      	mov	r0, r5
    1db8:	f001 fad6 	bl	3368 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    1dbc:	4b3d      	ldr	r3, [pc, #244]	; (1eb4 <gpio_nrfx_pin_configure+0x124>)
    1dbe:	4598      	cmp	r8, r3
    1dc0:	d103      	bne.n	1dca <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    1dc2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1dc6:	f001 fa57 	bl	3278 <nrfx_gpiote_channel_free>
		return 0;
    1dca:	2000      	movs	r0, #0
    1dcc:	e00c      	b.n	1de8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1dce:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1dd0:	4619      	mov	r1, r3
    1dd2:	aa02      	add	r2, sp, #8
    1dd4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1dd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1dda:	f001 f8d3 	bl	2f84 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1dde:	4b35      	ldr	r3, [pc, #212]	; (1eb4 <gpio_nrfx_pin_configure+0x124>)
    1de0:	4298      	cmp	r0, r3
    1de2:	d004      	beq.n	1dee <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    1de4:	f06f 0015 	mvn.w	r0, #21
}
    1de8:	b004      	add	sp, #16
    1dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    1dee:	4580      	cmp	r8, r0
    1df0:	d103      	bne.n	1dfa <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    1df2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1df6:	f001 fa3f 	bl	3278 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    1dfa:	03a3      	lsls	r3, r4, #14
    1dfc:	d54b      	bpl.n	1e96 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1dfe:	f240 3306 	movw	r3, #774	; 0x306
    1e02:	4023      	ands	r3, r4
    1e04:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    1e08:	d019      	beq.n	1e3e <gpio_nrfx_pin_configure+0xae>
    1e0a:	d80c      	bhi.n	1e26 <gpio_nrfx_pin_configure+0x96>
    1e0c:	2b06      	cmp	r3, #6
    1e0e:	d017      	beq.n	1e40 <gpio_nrfx_pin_configure+0xb0>
    1e10:	d804      	bhi.n	1e1c <gpio_nrfx_pin_configure+0x8c>
    1e12:	b1ab      	cbz	r3, 1e40 <gpio_nrfx_pin_configure+0xb0>
    1e14:	2b02      	cmp	r3, #2
    1e16:	d1e5      	bne.n	1de4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    1e18:	2304      	movs	r3, #4
    1e1a:	e011      	b.n	1e40 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1e20:	d1e0      	bne.n	1de4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    1e22:	2301      	movs	r3, #1
    1e24:	e00c      	b.n	1e40 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1e26:	f240 2202 	movw	r2, #514	; 0x202
    1e2a:	4293      	cmp	r3, r2
    1e2c:	d027      	beq.n	1e7e <gpio_nrfx_pin_configure+0xee>
    1e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    1e32:	d026      	beq.n	1e82 <gpio_nrfx_pin_configure+0xf2>
    1e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1e38:	d1d4      	bne.n	1de4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    1e3a:	2302      	movs	r3, #2
    1e3c:	e000      	b.n	1e40 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    1e3e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    1e40:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1e44:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    1e48:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    1e4c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    1e4e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    1e52:	bf54      	ite	pl
    1e54:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1e58:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1e5a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    1e5c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1e60:	d511      	bpl.n	1e86 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1e62:	687a      	ldr	r2, [r7, #4]
    1e64:	2301      	movs	r3, #1
    1e66:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    1e68:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1e6c:	2200      	movs	r2, #0
    1e6e:	a901      	add	r1, sp, #4
    1e70:	4628      	mov	r0, r5
    1e72:	f001 f935 	bl	30e0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1e76:	4b0f      	ldr	r3, [pc, #60]	; (1eb4 <gpio_nrfx_pin_configure+0x124>)
    1e78:	4298      	cmp	r0, r3
    1e7a:	d0a6      	beq.n	1dca <gpio_nrfx_pin_configure+0x3a>
    1e7c:	e7b2      	b.n	1de4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    1e7e:	2305      	movs	r3, #5
    1e80:	e7de      	b.n	1e40 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1e82:	2303      	movs	r3, #3
    1e84:	e7dc      	b.n	1e40 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1e86:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1e88:	bf41      	itttt	mi
    1e8a:	2301      	movmi	r3, #1
    1e8c:	687a      	ldrmi	r2, [r7, #4]
    1e8e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    1e90:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    1e94:	e7ea      	b.n	1e6c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    1e96:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e98:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    1e9c:	bf54      	ite	pl
    1e9e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1ea2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1ea4:	461a      	mov	r2, r3
    1ea6:	a901      	add	r1, sp, #4
    1ea8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    1eaa:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1eae:	f001 f869 	bl	2f84 <nrfx_gpiote_input_configure>
    1eb2:	e7e0      	b.n	1e76 <gpio_nrfx_pin_configure+0xe6>
    1eb4:	0bad0000 	.word	0x0bad0000

00001eb8 <transfer_next_chunk>:

	return 0;
}

static void transfer_next_chunk(const struct device *dev)
{
    1eb8:	b530      	push	{r4, r5, lr}
    1eba:	4603      	mov	r3, r0
    1ebc:	b085      	sub	sp, #20
	const struct spi_nrfx_config *dev_config = dev->config;
	struct spi_nrfx_data *dev_data = dev->data;
    1ebe:	691d      	ldr	r5, [r3, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    1ec0:	6840      	ldr	r0, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    1ec2:	6caa      	ldr	r2, [r5, #72]	; 0x48
		return ctx->rx_len;
    1ec4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
	if (!ctx->tx_len) {
    1ec6:	bb2a      	cbnz	r2, 1f14 <transfer_next_chunk+0x5c>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    1ec8:	b38b      	cbz	r3, 1f2e <transfer_next_chunk+0x76>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;

		xfer.p_tx_buffer = ctx->tx_buf;
    1eca:	6c69      	ldr	r1, [r5, #68]	; 0x44
		dev_data->chunk_len = chunk_len;
    1ecc:	65ab      	str	r3, [r5, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    1ece:	4614      	mov	r4, r2
		xfer.p_tx_buffer = ctx->tx_buf;
    1ed0:	461a      	mov	r2, r3
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    1ed2:	e9cd 1400 	strd	r1, r4, [sp]
		xfer.p_rx_buffer = ctx->rx_buf;
    1ed6:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    1ed8:	9102      	str	r1, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    1eda:	b331      	cbz	r1, 1f2a <transfer_next_chunk+0x72>
    1edc:	2b00      	cmp	r3, #0
    1ede:	bf18      	it	ne
    1ee0:	4613      	movne	r3, r2
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    1ee2:	2200      	movs	r2, #0
    1ee4:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    1ee6:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    1ee8:	f001 fc0a 	bl	3700 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    1eec:	4b11      	ldr	r3, [pc, #68]	; (1f34 <transfer_next_chunk+0x7c>)
    1eee:	4298      	cmp	r0, r3
    1ef0:	d00e      	beq.n	1f10 <transfer_next_chunk+0x58>
			return;
		}

		error = -EIO;
    1ef2:	f06f 0404 	mvn.w	r4, #4
	_spi_context_cs_control(ctx, on, false);
    1ef6:	2200      	movs	r2, #0
    1ef8:	4611      	mov	r1, r2
    1efa:	4628      	mov	r0, r5
    1efc:	f002 fe08 	bl	4b10 <_spi_context_cs_control>
	ctx->sync_status = status;
    1f00:	632c      	str	r4, [r5, #48]	; 0x30
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1f02:	f105 0020 	add.w	r0, r5, #32
    1f06:	f001 fe41 	bl	3b8c <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
    1f0a:	2300      	movs	r3, #0
    1f0c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    1f10:	b005      	add	sp, #20
    1f12:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
    1f14:	6c69      	ldr	r1, [r5, #68]	; 0x44
    1f16:	b113      	cbz	r3, 1f1e <transfer_next_chunk+0x66>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    1f18:	429a      	cmp	r2, r3
    1f1a:	bf28      	it	cs
    1f1c:	461a      	movcs	r2, r3
		return ctx->tx_len;
    1f1e:	2900      	cmp	r1, #0
		dev_data->chunk_len = chunk_len;
    1f20:	65aa      	str	r2, [r5, #88]	; 0x58
    1f22:	bf14      	ite	ne
    1f24:	4614      	movne	r4, r2
    1f26:	2400      	moveq	r4, #0
    1f28:	e7d3      	b.n	1ed2 <transfer_next_chunk+0x1a>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    1f2a:	460b      	mov	r3, r1
    1f2c:	e7d9      	b.n	1ee2 <transfer_next_chunk+0x2a>
	int error = 0;
    1f2e:	461c      	mov	r4, r3
    1f30:	e7e1      	b.n	1ef6 <transfer_next_chunk+0x3e>
    1f32:	bf00      	nop
    1f34:	0bad0000 	.word	0x0bad0000

00001f38 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    1f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f3c:	4699      	mov	r9, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    1f3e:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    1f40:	6904      	ldr	r4, [r0, #16]
{
    1f42:	4680      	mov	r8, r0
    1f44:	0498      	lsls	r0, r3, #18
    1f46:	b089      	sub	sp, #36	; 0x24
    1f48:	460e      	mov	r6, r1
    1f4a:	4692      	mov	sl, r2
    1f4c:	f100 80c7 	bmi.w	20de <spi_nrfx_transceive+0x1a6>
	return z_impl_k_sem_take(sem, timeout);
    1f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1f58:	f104 0010 	add.w	r0, r4, #16
    1f5c:	f001 fe36 	bl	3bcc <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    1f60:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    1f62:	f8d8 b010 	ldr.w	fp, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    1f66:	f8d8 3004 	ldr.w	r3, [r8, #4]
    1f6a:	9300      	str	r3, [sp, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    1f6c:	f89b 305d 	ldrb.w	r3, [fp, #93]	; 0x5d
    1f70:	9301      	str	r3, [sp, #4]
    1f72:	b11b      	cbz	r3, 1f7c <spi_nrfx_transceive+0x44>
    1f74:	f8db 3000 	ldr.w	r3, [fp]
    1f78:	429e      	cmp	r6, r3
    1f7a:	d05f      	beq.n	203c <spi_nrfx_transceive+0x104>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    1f7c:	88b7      	ldrh	r7, [r6, #4]
    1f7e:	0539      	lsls	r1, r7, #20
    1f80:	f100 80dc 	bmi.w	213c <spi_nrfx_transceive+0x204>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    1f84:	f017 0f09 	tst.w	r7, #9
    1f88:	f040 80d5 	bne.w	2136 <spi_nrfx_transceive+0x1fe>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    1f8c:	f3c7 1345 	ubfx	r3, r7, #5, #6
    1f90:	2b08      	cmp	r3, #8
    1f92:	f040 80d0 	bne.w	2136 <spi_nrfx_transceive+0x1fe>
	if (spi_cfg->frequency < 125000) {
    1f96:	6835      	ldr	r5, [r6, #0]
    1f98:	4b74      	ldr	r3, [pc, #464]	; (216c <spi_nrfx_transceive+0x234>)
    1f9a:	429d      	cmp	r5, r3
    1f9c:	f240 80cb 	bls.w	2136 <spi_nrfx_transceive+0x1fe>
	config = dev_config->def_config;
    1fa0:	9b00      	ldr	r3, [sp, #0]
    1fa2:	f103 0e08 	add.w	lr, r3, #8
    1fa6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1faa:	f10d 0c0c 	add.w	ip, sp, #12
    1fae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1fb2:	f8de 3000 	ldr.w	r3, [lr]
    1fb6:	f8cc 3000 	str.w	r3, [ip]
	if (frequency < 250000) {
    1fba:	4b6d      	ldr	r3, [pc, #436]	; (2170 <spi_nrfx_transceive+0x238>)
    1fbc:	429d      	cmp	r5, r3
    1fbe:	f240 8097 	bls.w	20f0 <spi_nrfx_transceive+0x1b8>
	} else if (frequency < 500000) {
    1fc2:	4b6c      	ldr	r3, [pc, #432]	; (2174 <spi_nrfx_transceive+0x23c>)
    1fc4:	429d      	cmp	r5, r3
    1fc6:	f240 8096 	bls.w	20f6 <spi_nrfx_transceive+0x1be>
	} else if (frequency < 1000000) {
    1fca:	4b6b      	ldr	r3, [pc, #428]	; (2178 <spi_nrfx_transceive+0x240>)
    1fcc:	429d      	cmp	r5, r3
    1fce:	f240 8095 	bls.w	20fc <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 2000000) {
    1fd2:	4b6a      	ldr	r3, [pc, #424]	; (217c <spi_nrfx_transceive+0x244>)
    1fd4:	429d      	cmp	r5, r3
    1fd6:	f240 8094 	bls.w	2102 <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 4000000) {
    1fda:	4b69      	ldr	r3, [pc, #420]	; (2180 <spi_nrfx_transceive+0x248>)
    1fdc:	429d      	cmp	r5, r3
    1fde:	f240 8093 	bls.w	2108 <spi_nrfx_transceive+0x1d0>
		return NRF_SPI_FREQ_4M;
    1fe2:	4b68      	ldr	r3, [pc, #416]	; (2184 <spi_nrfx_transceive+0x24c>)
    1fe4:	429d      	cmp	r5, r3
    1fe6:	bf2c      	ite	cs
    1fe8:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    1fec:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    1ff0:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    1ff2:	9505      	str	r5, [sp, #20]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    1ff4:	f007 0304 	and.w	r3, r7, #4
    1ff8:	f140 8089 	bpl.w	210e <spi_nrfx_transceive+0x1d6>
			return NRF_SPI_MODE_2;
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	bf14      	ite	ne
    2000:	2303      	movne	r3, #3
    2002:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    2004:	f88d 3018 	strb.w	r3, [sp, #24]
	if (dev_data->initialized) {
    2008:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
    200a:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    200e:	f88d 7019 	strb.w	r7, [sp, #25]
	if (dev_data->initialized) {
    2012:	b12b      	cbz	r3, 2020 <spi_nrfx_transceive+0xe8>
		nrfx_spi_uninit(&dev_config->spi);
    2014:	9800      	ldr	r0, [sp, #0]
    2016:	f001 fb21 	bl	365c <nrfx_spi_uninit>
		dev_data->initialized = false;
    201a:	2300      	movs	r3, #0
    201c:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
	result = nrfx_spi_init(&dev_config->spi, &config,
    2020:	465b      	mov	r3, fp
    2022:	4a59      	ldr	r2, [pc, #356]	; (2188 <spi_nrfx_transceive+0x250>)
    2024:	9800      	ldr	r0, [sp, #0]
    2026:	a903      	add	r1, sp, #12
    2028:	f001 fa6a 	bl	3500 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    202c:	4b57      	ldr	r3, [pc, #348]	; (218c <spi_nrfx_transceive+0x254>)
    202e:	4298      	cmp	r0, r3
    2030:	d171      	bne.n	2116 <spi_nrfx_transceive+0x1de>
	dev_data->initialized = true;
    2032:	2301      	movs	r3, #1
    2034:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
	ctx->config = spi_cfg;
    2038:	f8cb 6000 	str.w	r6, [fp]
		dev_data->busy = true;
    203c:	2301      	movs	r3, #1
    203e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    2042:	f1ba 0f00 	cmp.w	sl, #0
    2046:	d17c      	bne.n	2142 <spi_nrfx_transceive+0x20a>
    2048:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    204c:	2300      	movs	r3, #0
    204e:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    2050:	f104 0248 	add.w	r2, r4, #72	; 0x48
    2054:	f104 0138 	add.w	r1, r4, #56	; 0x38
    2058:	f104 0034 	add.w	r0, r4, #52	; 0x34
    205c:	f002 fd31 	bl	4ac2 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    2060:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    2062:	f1b9 0f00 	cmp.w	r9, #0
    2066:	d175      	bne.n	2154 <spi_nrfx_transceive+0x21c>
    2068:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    206c:	2300      	movs	r3, #0
    206e:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    2070:	f104 0250 	add.w	r2, r4, #80	; 0x50
    2074:	f104 0140 	add.w	r1, r4, #64	; 0x40
    2078:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    207c:	f002 fd21 	bl	4ac2 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    2080:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    2082:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    2084:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    2086:	2101      	movs	r1, #1
    2088:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    208a:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    208c:	f002 fd40 	bl	4b10 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    2090:	4640      	mov	r0, r8
    2092:	f7ff ff11 	bl	1eb8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    2096:	6d25      	ldr	r5, [r4, #80]	; 0x50
    2098:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    209a:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    209c:	429d      	cmp	r5, r3
    209e:	bf38      	it	cc
    20a0:	461d      	movcc	r5, r3
    20a2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    20a6:	435d      	muls	r5, r3
			     ctx->config->frequency;
    20a8:	f857 3b20 	ldr.w	r3, [r7], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    20ac:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    20b0:	681b      	ldr	r3, [r3, #0]
    20b2:	fbb5 f5f3 	udiv	r5, r5, r3
    20b6:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    20b8:	35c8      	adds	r5, #200	; 0xc8
    20ba:	f240 30e7 	movw	r0, #999	; 0x3e7
    20be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    20c2:	2300      	movs	r3, #0
    20c4:	fbe5 010c 	umlal	r0, r1, r5, ip
    20c8:	f7fd fff6 	bl	b8 <__aeabi_uldivmod>
    20cc:	4602      	mov	r2, r0
    20ce:	460b      	mov	r3, r1
    20d0:	4638      	mov	r0, r7
    20d2:	f001 fd7b 	bl	3bcc <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    20d6:	2800      	cmp	r0, #0
    20d8:	d144      	bne.n	2164 <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
    20da:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    20dc:	e01d      	b.n	211a <spi_nrfx_transceive+0x1e2>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    20de:	69a3      	ldr	r3, [r4, #24]
    20e0:	2b00      	cmp	r3, #0
    20e2:	f47f af35 	bne.w	1f50 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    20e6:	6863      	ldr	r3, [r4, #4]
    20e8:	4299      	cmp	r1, r3
    20ea:	f47f af31 	bne.w	1f50 <spi_nrfx_transceive+0x18>
    20ee:	e738      	b.n	1f62 <spi_nrfx_transceive+0x2a>
		return NRF_SPI_FREQ_125K;
    20f0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    20f4:	e77c      	b.n	1ff0 <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_250K;
    20f6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    20fa:	e779      	b.n	1ff0 <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_500K;
    20fc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    2100:	e776      	b.n	1ff0 <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_1M;
    2102:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    2106:	e773      	b.n	1ff0 <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_2M;
    2108:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    210c:	e770      	b.n	1ff0 <spi_nrfx_transceive+0xb8>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    210e:	3b00      	subs	r3, #0
    2110:	bf18      	it	ne
    2112:	2301      	movne	r3, #1
    2114:	e776      	b.n	2004 <spi_nrfx_transceive+0xcc>
		return -EIO;
    2116:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    211a:	6823      	ldr	r3, [r4, #0]
    211c:	889b      	ldrh	r3, [r3, #4]
    211e:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    2122:	d104      	bne.n	212e <spi_nrfx_transceive+0x1f6>
		ctx->owner = NULL;
    2124:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    2126:	f104 0010 	add.w	r0, r4, #16
    212a:	f001 fd2f 	bl	3b8c <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
    212e:	4628      	mov	r0, r5
    2130:	b009      	add	sp, #36	; 0x24
    2132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    2136:	f06f 0515 	mvn.w	r5, #21
    213a:	e7ee      	b.n	211a <spi_nrfx_transceive+0x1e2>
		return -ENOTSUP;
    213c:	f06f 0585 	mvn.w	r5, #133	; 0x85
    2140:	e7eb      	b.n	211a <spi_nrfx_transceive+0x1e2>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    2142:	f8da 3000 	ldr.w	r3, [sl]
    2146:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    2148:	2b00      	cmp	r3, #0
    214a:	f43f af7f 	beq.w	204c <spi_nrfx_transceive+0x114>
    214e:	f8da 3004 	ldr.w	r3, [sl, #4]
    2152:	e77c      	b.n	204e <spi_nrfx_transceive+0x116>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    2154:	f8d9 3000 	ldr.w	r3, [r9]
    2158:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    215a:	2b00      	cmp	r3, #0
    215c:	d086      	beq.n	206c <spi_nrfx_transceive+0x134>
    215e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2162:	e784      	b.n	206e <spi_nrfx_transceive+0x136>
		return -ETIMEDOUT;
    2164:	f06f 0573 	mvn.w	r5, #115	; 0x73
    2168:	e7d7      	b.n	211a <spi_nrfx_transceive+0x1e2>
    216a:	bf00      	nop
    216c:	0001e847 	.word	0x0001e847
    2170:	0003d08f 	.word	0x0003d08f
    2174:	0007a11f 	.word	0x0007a11f
    2178:	000f423f 	.word	0x000f423f
    217c:	001e847f 	.word	0x001e847f
    2180:	003d08ff 	.word	0x003d08ff
    2184:	007a1200 	.word	0x007a1200
    2188:	00004c45 	.word	0x00004c45
    218c:	0bad0000 	.word	0x0bad0000

00002190 <spi_bitbang_transceive>:

static int spi_bitbang_transceive(const struct device *dev,
			      const struct spi_config *spi_cfg,
			      const struct spi_buf_set *tx_bufs,
			      const struct spi_buf_set *rx_bufs)
{
    2190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2194:	4698      	mov	r8, r3
	if (config->operation & SPI_OP_MODE_SLAVE) {
    2196:	888b      	ldrh	r3, [r1, #4]
	const struct spi_bitbang_config *info = dev->config;
    2198:	6847      	ldr	r7, [r0, #4]
	struct spi_bitbang_data *data = dev->data;
    219a:	6904      	ldr	r4, [r0, #16]
{
    219c:	4693      	mov	fp, r2
	if (config->operation & SPI_OP_MODE_SLAVE) {
    219e:	07da      	lsls	r2, r3, #31
{
    21a0:	b08d      	sub	sp, #52	; 0x34
    21a2:	460e      	mov	r6, r1
	if (config->operation & SPI_OP_MODE_SLAVE) {
    21a4:	f100 8182 	bmi.w	24ac <spi_bitbang_transceive+0x31c>
	if (config->operation & (SPI_TRANSFER_LSB | SPI_LINES_DUAL
    21a8:	f013 0910 	ands.w	r9, r3, #16
    21ac:	f040 817e 	bne.w	24ac <spi_bitbang_transceive+0x31c>
	const int bits = SPI_WORD_SIZE_GET(config->operation);
    21b0:	f3c3 1345 	ubfx	r3, r3, #5, #6
	if (bits > 16) {
    21b4:	2b10      	cmp	r3, #16
    21b6:	f200 8179 	bhi.w	24ac <spi_bitbang_transceive+0x31c>
	data->dfs = ((data->bits - 1) / 8) + 1;
    21ba:	1e5a      	subs	r2, r3, #1
    21bc:	bf48      	it	mi
    21be:	1d9a      	addmi	r2, r3, #6
    21c0:	10d2      	asrs	r2, r2, #3
    21c2:	3201      	adds	r2, #1
	data->bits = bits;
    21c4:	6563      	str	r3, [r4, #84]	; 0x54
	data->dfs = ((data->bits - 1) / 8) + 1;
    21c6:	65e2      	str	r2, [r4, #92]	; 0x5c
	if (config->frequency > 0) {
    21c8:	680a      	ldr	r2, [r1, #0]
    21ca:	b1ca      	cbz	r2, 2200 <spi_bitbang_transceive+0x70>
		data->wait_us = (1000000ul * 2000ul / config->frequency) / 2000ul;
    21cc:	4bae      	ldr	r3, [pc, #696]	; (2488 <spi_bitbang_transceive+0x2f8>)
    21ce:	fbb3 f3f2 	udiv	r3, r3, r2
		data->wait_us /= 2;
    21d2:	105b      	asrs	r3, r3, #1
    21d4:	65a3      	str	r3, [r4, #88]	; 0x58
	data->ctx.config = config;
    21d6:	6026      	str	r6, [r4, #0]
	rc = spi_bitbang_configure(info, data, spi_cfg);
	if (rc < 0) {
		return rc;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    21d8:	88b3      	ldrh	r3, [r6, #4]
    21da:	f413 6f00 	tst.w	r3, #2048	; 0x800
    21de:	68bb      	ldr	r3, [r7, #8]
    21e0:	d023      	beq.n	222a <spi_bitbang_transceive+0x9a>
		if (!info->mosi_gpio.port) {
    21e2:	2b00      	cmp	r3, #0
    21e4:	f000 8165 	beq.w	24b2 <spi_bitbang_transceive+0x322>
			LOG_ERR("No MOSI pin specified in half duplex mode");
			return -EINVAL;
		}

		if (tx_bufs && rx_bufs) {
    21e8:	f1bb 0f00 	cmp.w	fp, #0
    21ec:	d00a      	beq.n	2204 <spi_bitbang_transceive+0x74>
    21ee:	f1b8 0f00 	cmp.w	r8, #0
    21f2:	f040 815e 	bne.w	24b2 <spi_bitbang_transceive+0x322>
			LOG_ERR("Both RX and TX specified in half duplex mode");
			return -EINVAL;
		} else if (tx_bufs && !rx_bufs) {
			/* TX mode */
			mosi = &info->mosi_gpio;
    21f6:	f107 0308 	add.w	r3, r7, #8
    21fa:	9300      	str	r3, [sp, #0]
	const struct gpio_dt_spec *miso = NULL;
    21fc:	4645      	mov	r5, r8
    21fe:	e088      	b.n	2312 <spi_bitbang_transceive+0x182>
		data->wait_us = 8 / 2; /* 125 kHz */
    2200:	2304      	movs	r3, #4
    2202:	e7e7      	b.n	21d4 <spi_bitbang_transceive+0x44>
		} else if (!tx_bufs && rx_bufs) {
    2204:	f1b8 0f00 	cmp.w	r8, #0
    2208:	f000 8086 	beq.w	2318 <spi_bitbang_transceive+0x188>
			mosi = &info->mosi_gpio;
    220c:	f107 0508 	add.w	r5, r7, #8
	const struct gpio_dt_spec *mosi = NULL;
    2210:	f8cd b000 	str.w	fp, [sp]
			/* RX mode */
			mosi_flags = GPIO_INPUT;
    2214:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			miso = &info->miso_gpio;
		}
	}

	if (info->mosi_gpio.port) {
		rc = gpio_pin_configure_dt(&info->mosi_gpio, mosi_flags);
    2218:	f107 0008 	add.w	r0, r7, #8
    221c:	f002 fd55 	bl	4cca <gpio_pin_configure_dt>
		if (rc < 0) {
    2220:	2800      	cmp	r0, #0
    2222:	da09      	bge.n	2238 <spi_bitbang_transceive+0xa8>
	spi_context_cs_control(ctx, false);

	spi_context_complete(ctx, dev, 0);

	return 0;
}
    2224:	b00d      	add	sp, #52	; 0x34
    2226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (info->mosi_gpio.port) {
    222a:	693d      	ldr	r5, [r7, #16]
    222c:	9300      	str	r3, [sp, #0]
    222e:	2b00      	cmp	r3, #0
    2230:	d169      	bne.n	2306 <spi_bitbang_transceive+0x176>
		if (info->miso_gpio.port) {
    2232:	b10d      	cbz	r5, 2238 <spi_bitbang_transceive+0xa8>
			miso = &info->miso_gpio;
    2234:	f107 0510 	add.w	r5, r7, #16
	spi_context_buffers_setup(ctx, tx_bufs, rx_bufs, data->dfs);
    2238:	f894 a05c 	ldrb.w	sl, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    223c:	f1bb 0f00 	cmp.w	fp, #0
    2240:	d16d      	bne.n	231e <spi_bitbang_transceive+0x18e>
    2242:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    2246:	2300      	movs	r3, #0
    2248:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    224a:	f104 0334 	add.w	r3, r4, #52	; 0x34
    224e:	9306      	str	r3, [sp, #24]
    2250:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2254:	9307      	str	r3, [sp, #28]
    2256:	f104 0348 	add.w	r3, r4, #72	; 0x48
    225a:	9308      	str	r3, [sp, #32]
    225c:	f104 0248 	add.w	r2, r4, #72	; 0x48
    2260:	4653      	mov	r3, sl
    2262:	f104 0138 	add.w	r1, r4, #56	; 0x38
    2266:	f104 0034 	add.w	r0, r4, #52	; 0x34
    226a:	f002 fd62 	bl	4d32 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
    226e:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    2270:	f1b8 0f00 	cmp.w	r8, #0
    2274:	d15b      	bne.n	232e <spi_bitbang_transceive+0x19e>
    2276:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    227a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    227e:	9309      	str	r3, [sp, #36]	; 0x24
    2280:	f104 0340 	add.w	r3, r4, #64	; 0x40
    2284:	930a      	str	r3, [sp, #40]	; 0x28
    2286:	f104 0350 	add.w	r3, r4, #80	; 0x50
    228a:	930b      	str	r3, [sp, #44]	; 0x2c
    228c:	f104 0250 	add.w	r2, r4, #80	; 0x50
    2290:	4653      	mov	r3, sl
    2292:	f104 0140 	add.w	r1, r4, #64	; 0x40
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    2296:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    229a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    229e:	f002 fd48 	bl	4d32 <spi_context_get_next_buf>
	ctx->sync_status = 0;
    22a2:	f04f 0800 	mov.w	r8, #0
	ctx->rx_buf = (uint8_t *)
    22a6:	64e0      	str	r0, [r4, #76]	; 0x4c
	ctx->sync_status = 0;
    22a8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	if (SPI_MODE_GET(spi_cfg->operation) & SPI_MODE_CPOL) {
    22ac:	88b3      	ldrh	r3, [r6, #4]
    22ae:	f003 0202 	and.w	r2, r3, #2
    22b2:	9204      	str	r2, [sp, #16]
    22b4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    22b8:	9202      	str	r2, [sp, #8]
	gpio_pin_set_dt(&info->clk_gpio, clock_state);
    22ba:	9902      	ldr	r1, [sp, #8]
    22bc:	f003 0204 	and.w	r2, r3, #4
    22c0:	4638      	mov	r0, r7
    22c2:	f003 0308 	and.w	r3, r3, #8
    22c6:	9303      	str	r3, [sp, #12]
    22c8:	9205      	str	r2, [sp, #20]
    22ca:	f002 fd48 	bl	4d5e <gpio_pin_set_dt.isra.0>
	_spi_context_cs_control(ctx, on, false);
    22ce:	4642      	mov	r2, r8
    22d0:	2101      	movs	r1, #1
    22d2:	4620      	mov	r0, r4
    22d4:	f002 fd9d 	bl	4e12 <_spi_context_cs_control>
	const uint32_t wait_us = data->wait_us;
    22d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    22da:	9301      	str	r3, [sp, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    22dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    22de:	b10b      	cbz	r3, 22e4 <spi_bitbang_transceive+0x154>
    22e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    22e2:	bb72      	cbnz	r2, 2342 <spi_bitbang_transceive+0x1b2>
	return !!(ctx->rx_buf && ctx->rx_len);
    22e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    22e6:	b10a      	cbz	r2, 22ec <spi_bitbang_transceive+0x15c>
    22e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    22ea:	bb42      	cbnz	r2, 233e <spi_bitbang_transceive+0x1ae>
	_spi_context_cs_control(ctx, on, false);
    22ec:	2200      	movs	r2, #0
    22ee:	4611      	mov	r1, r2
    22f0:	4620      	mov	r0, r4
	ctx->sync_status = status;
    22f2:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    22f4:	f002 fd8d 	bl	4e12 <_spi_context_cs_control>
	ctx->sync_status = status;
    22f8:	6325      	str	r5, [r4, #48]	; 0x30
    22fa:	f104 0020 	add.w	r0, r4, #32
    22fe:	f001 fc45 	bl	3b8c <z_impl_k_sem_give>
	return 0;
    2302:	4628      	mov	r0, r5
}
    2304:	e78e      	b.n	2224 <spi_bitbang_transceive+0x94>
			mosi = &info->mosi_gpio;
    2306:	f107 0308 	add.w	r3, r7, #8
    230a:	9300      	str	r3, [sp, #0]
		if (info->miso_gpio.port) {
    230c:	b10d      	cbz	r5, 2312 <spi_bitbang_transceive+0x182>
			miso = &info->miso_gpio;
    230e:	f107 0510 	add.w	r5, r7, #16
		if (info->miso_gpio.port) {
    2312:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    2316:	e77f      	b.n	2218 <spi_bitbang_transceive+0x88>
	const struct gpio_dt_spec *mosi = NULL;
    2318:	f8cd 8000 	str.w	r8, [sp]
    231c:	e76e      	b.n	21fc <spi_bitbang_transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    231e:	f8db 3000 	ldr.w	r3, [fp]
    2322:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    2324:	2b00      	cmp	r3, #0
    2326:	d08e      	beq.n	2246 <spi_bitbang_transceive+0xb6>
    2328:	f8db 3004 	ldr.w	r3, [fp, #4]
    232c:	e78c      	b.n	2248 <spi_bitbang_transceive+0xb8>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    232e:	f8d8 3000 	ldr.w	r3, [r8]
    2332:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    2334:	2b00      	cmp	r3, #0
    2336:	d0a0      	beq.n	227a <spi_bitbang_transceive+0xea>
    2338:	f8d8 9004 	ldr.w	r9, [r8, #4]
    233c:	e79d      	b.n	227a <spi_bitbang_transceive+0xea>
		if (ctx->tx_len) {
    233e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2340:	b1e2      	cbz	r2, 237c <spi_bitbang_transceive+0x1ec>
			switch (data->dfs) {
    2342:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    2344:	2a01      	cmp	r2, #1
    2346:	d016      	beq.n	2376 <spi_bitbang_transceive+0x1e6>
    2348:	2a02      	cmp	r2, #2
    234a:	d117      	bne.n	237c <spi_bitbang_transceive+0x1ec>
				w = *(uint16_t *)(ctx->tx_buf);
    234c:	f8b3 9000 	ldrh.w	r9, [r3]
		int shift = data->bits - 1;
    2350:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2352:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
		if (miso && spi_context_rx_buf_on(ctx)) {
    2356:	2d00      	cmp	r5, #0
    2358:	f000 8091 	beq.w	247e <spi_bitbang_transceive+0x2ee>
	return !!(ctx->rx_buf && ctx->rx_len);
    235c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    235e:	2b00      	cmp	r3, #0
    2360:	f000 808f 	beq.w	2482 <spi_bitbang_transceive+0x2f2>
    2364:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2366:	f1b3 0800 	subs.w	r8, r3, #0
    236a:	bf18      	it	ne
    236c:	f04f 0801 	movne.w	r8, #1
		bool do_read = false;
    2370:	f04f 0b00 	mov.w	fp, #0
    2374:	e03d      	b.n	23f2 <spi_bitbang_transceive+0x262>
				w = *(uint8_t *)(ctx->tx_buf);
    2376:	f893 9000 	ldrb.w	r9, [r3]
				break;
    237a:	e7e9      	b.n	2350 <spi_bitbang_transceive+0x1c0>
		uint16_t w = 0;
    237c:	f04f 0900 	mov.w	r9, #0
    2380:	e7e6      	b.n	2350 <spi_bitbang_transceive+0x1c0>
			if (mosi) {
    2382:	9b00      	ldr	r3, [sp, #0]
			const int d = (w >> shift) & 0x1;
    2384:	fa49 f60a 	asr.w	r6, r9, sl
    2388:	f006 0601 	and.w	r6, r6, #1
			if (mosi) {
    238c:	b11b      	cbz	r3, 2396 <spi_bitbang_transceive+0x206>
				gpio_pin_set_dt(mosi, d);
    238e:	4631      	mov	r1, r6
    2390:	4618      	mov	r0, r3
    2392:	f002 fce4 	bl	4d5e <gpio_pin_set_dt.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
    2396:	9801      	ldr	r0, [sp, #4]
    2398:	f002 ffbb 	bl	5312 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, !clock_state);
    239c:	9b04      	ldr	r3, [sp, #16]
    239e:	fab3 f183 	clz	r1, r3
    23a2:	0949      	lsrs	r1, r1, #5
    23a4:	4638      	mov	r0, r7
    23a6:	f002 fcda 	bl	4d5e <gpio_pin_set_dt.isra.0>
			if (!loop && do_read && !cpha) {
    23aa:	9b03      	ldr	r3, [sp, #12]
    23ac:	b13b      	cbz	r3, 23be <spi_bitbang_transceive+0x22e>
    23ae:	9801      	ldr	r0, [sp, #4]
    23b0:	f002 ffaf 	bl	5312 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, clock_state);
    23b4:	9902      	ldr	r1, [sp, #8]
    23b6:	4638      	mov	r0, r7
    23b8:	f002 fcd1 	bl	4d5e <gpio_pin_set_dt.isra.0>
			if (!loop && do_read && cpha) {
    23bc:	e010      	b.n	23e0 <spi_bitbang_transceive+0x250>
			if (!loop && do_read && !cpha) {
    23be:	f1b8 0f00 	cmp.w	r8, #0
    23c2:	d053      	beq.n	246c <spi_bitbang_transceive+0x2dc>
    23c4:	9b05      	ldr	r3, [sp, #20]
    23c6:	2b00      	cmp	r3, #0
    23c8:	d04b      	beq.n	2462 <spi_bitbang_transceive+0x2d2>
    23ca:	9801      	ldr	r0, [sp, #4]
    23cc:	f002 ffa1 	bl	5312 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, clock_state);
    23d0:	9902      	ldr	r1, [sp, #8]
    23d2:	4638      	mov	r0, r7
    23d4:	f002 fcc3 	bl	4d5e <gpio_pin_set_dt.isra.0>
				b = gpio_pin_get_dt(miso);
    23d8:	4628      	mov	r0, r5
    23da:	f002 fc95 	bl	4d08 <gpio_pin_get_dt>
    23de:	4606      	mov	r6, r0
			r = (r << 1) | (b ? 0x1 : 0x0);
    23e0:	3e00      	subs	r6, #0
    23e2:	bf18      	it	ne
    23e4:	2601      	movne	r6, #1
    23e6:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
    23ea:	fa1f fb86 	uxth.w	fp, r6
			--shift;
    23ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
		while (shift >= 0) {
    23f2:	f1ba 0f00 	cmp.w	sl, #0
    23f6:	dac4      	bge.n	2382 <spi_bitbang_transceive+0x1f2>
    23f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    23fa:	b143      	cbz	r3, 240e <spi_bitbang_transceive+0x27e>
    23fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
    23fe:	b132      	cbz	r2, 240e <spi_bitbang_transceive+0x27e>
			switch (data->dfs) {
    2400:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    2402:	2a01      	cmp	r2, #1
    2404:	d042      	beq.n	248c <spi_bitbang_transceive+0x2fc>
    2406:	2a02      	cmp	r2, #2
    2408:	d101      	bne.n	240e <spi_bitbang_transceive+0x27e>
				*(uint16_t *)(ctx->rx_buf) = r;
    240a:	f8a3 b000 	strh.w	fp, [r3]
	if (!ctx->tx_len) {
    240e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		spi_context_update_tx(ctx, data->dfs, 1);
    2410:	f894 605c 	ldrb.w	r6, [r4, #92]	; 0x5c
    2414:	b183      	cbz	r3, 2438 <spi_bitbang_transceive+0x2a8>
	ctx->tx_len -= len;
    2416:	3b01      	subs	r3, #1
    2418:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
    241a:	2b00      	cmp	r3, #0
    241c:	d139      	bne.n	2492 <spi_bitbang_transceive+0x302>
		++ctx->current_tx;
    241e:	6b63      	ldr	r3, [r4, #52]	; 0x34
			spi_context_get_next_buf(&ctx->current_tx,
    2420:	9806      	ldr	r0, [sp, #24]
		++ctx->current_tx;
    2422:	3308      	adds	r3, #8
    2424:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
    2426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2428:	3b01      	subs	r3, #1
    242a:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    242c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
    2430:	4633      	mov	r3, r6
    2432:	f002 fc7e 	bl	4d32 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
    2436:	6460      	str	r0, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    2438:	6d23      	ldr	r3, [r4, #80]	; 0x50
    243a:	2b00      	cmp	r3, #0
    243c:	f43f af4e 	beq.w	22dc <spi_bitbang_transceive+0x14c>
	ctx->rx_len -= len;
    2440:	3b01      	subs	r3, #1
    2442:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    2444:	bb5b      	cbnz	r3, 249e <spi_bitbang_transceive+0x30e>
		++ctx->current_rx;
    2446:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			spi_context_get_next_buf(&ctx->current_rx,
    2448:	9809      	ldr	r0, [sp, #36]	; 0x24
		++ctx->current_rx;
    244a:	3308      	adds	r3, #8
    244c:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    244e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2450:	3b01      	subs	r3, #1
    2452:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    2454:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    2458:	4633      	mov	r3, r6
    245a:	f002 fc6a 	bl	4d32 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
    245e:	64e0      	str	r0, [r4, #76]	; 0x4c
    2460:	e73c      	b.n	22dc <spi_bitbang_transceive+0x14c>
				b = gpio_pin_get_dt(miso);
    2462:	4628      	mov	r0, r5
    2464:	f002 fc50 	bl	4d08 <gpio_pin_get_dt>
    2468:	4606      	mov	r6, r0
    246a:	e7a0      	b.n	23ae <spi_bitbang_transceive+0x21e>
    246c:	9801      	ldr	r0, [sp, #4]
    246e:	f002 ff50 	bl	5312 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, clock_state);
    2472:	9902      	ldr	r1, [sp, #8]
    2474:	4638      	mov	r0, r7
    2476:	f002 fc72 	bl	4d5e <gpio_pin_set_dt.isra.0>
			b = 0;
    247a:	4646      	mov	r6, r8
    247c:	e7b0      	b.n	23e0 <spi_bitbang_transceive+0x250>
		bool do_read = false;
    247e:	46a8      	mov	r8, r5
    2480:	e776      	b.n	2370 <spi_bitbang_transceive+0x1e0>
    2482:	4698      	mov	r8, r3
    2484:	e774      	b.n	2370 <spi_bitbang_transceive+0x1e0>
    2486:	bf00      	nop
    2488:	000f4240 	.word	0x000f4240
				*(uint8_t *)(ctx->rx_buf) = r;
    248c:	f883 b000 	strb.w	fp, [r3]
				break;
    2490:	e7bd      	b.n	240e <spi_bitbang_transceive+0x27e>
	} else if (ctx->tx_buf) {
    2492:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2494:	2b00      	cmp	r3, #0
    2496:	d0cf      	beq.n	2438 <spi_bitbang_transceive+0x2a8>
		ctx->tx_buf += dfs * len;
    2498:	4433      	add	r3, r6
    249a:	6463      	str	r3, [r4, #68]	; 0x44
    249c:	e7cc      	b.n	2438 <spi_bitbang_transceive+0x2a8>
	} else if (ctx->rx_buf) {
    249e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    24a0:	2b00      	cmp	r3, #0
    24a2:	f43f af1b 	beq.w	22dc <spi_bitbang_transceive+0x14c>
		ctx->rx_buf += dfs * len;
    24a6:	4433      	add	r3, r6
    24a8:	64e3      	str	r3, [r4, #76]	; 0x4c
    24aa:	e717      	b.n	22dc <spi_bitbang_transceive+0x14c>
		return -ENOTSUP;
    24ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
    24b0:	e6b8      	b.n	2224 <spi_bitbang_transceive+0x94>
			return -EINVAL;
    24b2:	f06f 0015 	mvn.w	r0, #21
    24b6:	e6b5      	b.n	2224 <spi_bitbang_transceive+0x94>

000024b8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    24b8:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    24ba:	2301      	movs	r3, #1
    24bc:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    24be:	4a0e      	ldr	r2, [pc, #56]	; (24f8 <compare_int_lock+0x40>)
    24c0:	f3bf 8f5b 	dmb	ish
    24c4:	43dc      	mvns	r4, r3
    24c6:	e852 1f00 	ldrex	r1, [r2]
    24ca:	ea01 0504 	and.w	r5, r1, r4
    24ce:	e842 5600 	strex	r6, r5, [r2]
    24d2:	2e00      	cmp	r6, #0
    24d4:	d1f7      	bne.n	24c6 <compare_int_lock+0xe>
    24d6:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    24da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    24de:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    24e0:	4806      	ldr	r0, [pc, #24]	; (24fc <compare_int_lock+0x44>)
    24e2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    24e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24ea:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    24ee:	420b      	tst	r3, r1
}
    24f0:	bf14      	ite	ne
    24f2:	2001      	movne	r0, #1
    24f4:	2000      	moveq	r0, #0
    24f6:	bd70      	pop	{r4, r5, r6, pc}
    24f8:	20000330 	.word	0x20000330
    24fc:	40011000 	.word	0x40011000

00002500 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2502:	491b      	ldr	r1, [pc, #108]	; (2570 <sys_clock_timeout_handler+0x70>)
{
    2504:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2506:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    250a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    250c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2510:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2514:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2516:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    251a:	d30f      	bcc.n	253c <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    251c:	f001 ff6a 	bl	43f4 <sys_clock_announce>
    return p_reg->CC[ch];
    2520:	00a3      	lsls	r3, r4, #2
    2522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2526:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    252a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    252e:	4295      	cmp	r5, r2
    2530:	d11d      	bne.n	256e <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    2532:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2536:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    253a:	e012      	b.n	2562 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    253c:	4b0d      	ldr	r3, [pc, #52]	; (2574 <sys_clock_timeout_handler+0x74>)
    253e:	681b      	ldr	r3, [r3, #0]
    2540:	0a1a      	lsrs	r2, r3, #8
    2542:	061b      	lsls	r3, r3, #24
    2544:	195e      	adds	r6, r3, r5
    2546:	4b0c      	ldr	r3, [pc, #48]	; (2578 <sys_clock_timeout_handler+0x78>)
    2548:	f142 0700 	adc.w	r7, r2, #0
    254c:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2550:	f001 ff50 	bl	43f4 <sys_clock_announce>
    return p_reg->CC[ch];
    2554:	4a09      	ldr	r2, [pc, #36]	; (257c <sys_clock_timeout_handler+0x7c>)
    2556:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    255e:	429d      	cmp	r5, r3
    2560:	d105      	bne.n	256e <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2562:	4a06      	ldr	r2, [pc, #24]	; (257c <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2568:	40a3      	lsls	r3, r4
    256a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    256e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2570:	20000170 	.word	0x20000170
    2574:	20000334 	.word	0x20000334
    2578:	20000178 	.word	0x20000178
    257c:	40011000 	.word	0x40011000

00002580 <compare_int_unlock>:
	if (key) {
    2580:	b311      	cbz	r1, 25c8 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2582:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2586:	2301      	movs	r3, #1
    2588:	4a10      	ldr	r2, [pc, #64]	; (25cc <compare_int_unlock+0x4c>)
    258a:	4083      	lsls	r3, r0
    258c:	e852 cf00 	ldrex	ip, [r2]
    2590:	ea4c 0c03 	orr.w	ip, ip, r3
    2594:	e842 c100 	strex	r1, ip, [r2]
    2598:	2900      	cmp	r1, #0
    259a:	d1f7      	bne.n	258c <compare_int_unlock+0xc>
    259c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    25a0:	4a0b      	ldr	r2, [pc, #44]	; (25d0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    25a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    25a6:	4083      	lsls	r3, r0
    25a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25ac:	4b09      	ldr	r3, [pc, #36]	; (25d4 <compare_int_unlock+0x54>)
    25ae:	f3bf 8f5b 	dmb	ish
    25b2:	681b      	ldr	r3, [r3, #0]
    25b4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    25b8:	40c3      	lsrs	r3, r0
    25ba:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25bc:	bf42      	ittt	mi
    25be:	4b06      	ldrmi	r3, [pc, #24]	; (25d8 <compare_int_unlock+0x58>)
    25c0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    25c4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    25c8:	4770      	bx	lr
    25ca:	bf00      	nop
    25cc:	20000330 	.word	0x20000330
    25d0:	40011000 	.word	0x40011000
    25d4:	2000032c 	.word	0x2000032c
    25d8:	e000e100 	.word	0xe000e100

000025dc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    25dc:	4b0d      	ldr	r3, [pc, #52]	; (2614 <z_nrf_rtc_timer_read+0x38>)
    25de:	6818      	ldr	r0, [r3, #0]
    25e0:	0a01      	lsrs	r1, r0, #8
    25e2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    25e4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    25e8:	4b0b      	ldr	r3, [pc, #44]	; (2618 <z_nrf_rtc_timer_read+0x3c>)
    25ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    25ee:	1818      	adds	r0, r3, r0
    25f0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    25f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    25f8:	d20a      	bcs.n	2610 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    25fa:	4b08      	ldr	r3, [pc, #32]	; (261c <z_nrf_rtc_timer_read+0x40>)
    25fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    2600:	4290      	cmp	r0, r2
    2602:	eb71 0303 	sbcs.w	r3, r1, r3
    2606:	d203      	bcs.n	2610 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2608:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    260c:	f141 0100 	adc.w	r1, r1, #0
}
    2610:	4770      	bx	lr
    2612:	bf00      	nop
    2614:	20000334 	.word	0x20000334
    2618:	40011000 	.word	0x40011000
    261c:	20000178 	.word	0x20000178

00002620 <compare_set>:
{
    2620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2624:	4614      	mov	r4, r2
    2626:	461d      	mov	r5, r3
    2628:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    262a:	f7ff ff45 	bl	24b8 <compare_int_lock>
    262e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2630:	f7ff ffd4 	bl	25dc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2634:	42a0      	cmp	r0, r4
    2636:	eb71 0305 	sbcs.w	r3, r1, r5
    263a:	d27a      	bcs.n	2732 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    263c:	4b46      	ldr	r3, [pc, #280]	; (2758 <compare_set+0x138>)
    263e:	1a20      	subs	r0, r4, r0
    2640:	eb65 0101 	sbc.w	r1, r5, r1
    2644:	4298      	cmp	r0, r3
    2646:	f171 0100 	sbcs.w	r1, r1, #0
    264a:	f080 8081 	bcs.w	2750 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    264e:	4b43      	ldr	r3, [pc, #268]	; (275c <compare_set+0x13c>)
    2650:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    2654:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2658:	429d      	cmp	r5, r3
    265a:	bf08      	it	eq
    265c:	4294      	cmpeq	r4, r2
    265e:	d053      	beq.n	2708 <compare_set+0xe8>
    2660:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    2664:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2668:	f107 0950 	add.w	r9, r7, #80	; 0x50
    266c:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    2670:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2674:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    2678:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    267c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    2684:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    2688:	4a35      	ldr	r2, [pc, #212]	; (2760 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    268a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    268e:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2690:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    2692:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2696:	eba0 000b 	sub.w	r0, r0, fp
    269a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    269e:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    26a2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    26a4:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    26a8:	d105      	bne.n	26b6 <compare_set+0x96>
    26aa:	9301      	str	r3, [sp, #4]
    26ac:	2013      	movs	r0, #19
    26ae:	f002 fe30 	bl	5312 <z_impl_k_busy_wait>
    26b2:	4a2b      	ldr	r2, [pc, #172]	; (2760 <compare_set+0x140>)
    26b4:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    26b6:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    26ba:	eba6 000c 	sub.w	r0, r6, ip
    26be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    26c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26c6:	bf88      	it	hi
    26c8:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26ca:	2000      	movs	r0, #0
    26cc:	f8c9 0000 	str.w	r0, [r9]
    26d0:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    26d4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26d8:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    26dc:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    26e0:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    26e4:	4583      	cmp	fp, r0
    26e6:	d006      	beq.n	26f6 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    26e8:	1a30      	subs	r0, r6, r0
    26ea:	3802      	subs	r0, #2
    26ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    26f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26f4:	d81b      	bhi.n	272e <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    26f6:	eba6 0608 	sub.w	r6, r6, r8
    26fa:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    26fe:	1936      	adds	r6, r6, r4
    2700:	f145 0300 	adc.w	r3, r5, #0
    2704:	4634      	mov	r4, r6
    2706:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    2708:	4914      	ldr	r1, [pc, #80]	; (275c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    270a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    270c:	013b      	lsls	r3, r7, #4
    270e:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    2712:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2716:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    2718:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    271c:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    271e:	4638      	mov	r0, r7
    2720:	9900      	ldr	r1, [sp, #0]
    2722:	f7ff ff2d 	bl	2580 <compare_int_unlock>
}
    2726:	4620      	mov	r0, r4
    2728:	b003      	add	sp, #12
    272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    272e:	4630      	mov	r0, r6
    2730:	e7af      	b.n	2692 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    2732:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2734:	4a0b      	ldr	r2, [pc, #44]	; (2764 <compare_set+0x144>)
    2736:	f3bf 8f5b 	dmb	ish
    273a:	40bb      	lsls	r3, r7
    273c:	e852 0f00 	ldrex	r0, [r2]
    2740:	4318      	orrs	r0, r3
    2742:	e842 0100 	strex	r1, r0, [r2]
    2746:	2900      	cmp	r1, #0
    2748:	d1f8      	bne.n	273c <compare_set+0x11c>
    274a:	f3bf 8f5b 	dmb	ish
    274e:	e7db      	b.n	2708 <compare_set+0xe8>
			return -EINVAL;
    2750:	f06f 0415 	mvn.w	r4, #21
    2754:	e7e3      	b.n	271e <compare_set+0xfe>
    2756:	bf00      	nop
    2758:	01000001 	.word	0x01000001
    275c:	20000160 	.word	0x20000160
    2760:	40011000 	.word	0x40011000
    2764:	2000032c 	.word	0x2000032c

00002768 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2768:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    276a:	4b19      	ldr	r3, [pc, #100]	; (27d0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    276c:	4d19      	ldr	r5, [pc, #100]	; (27d4 <sys_clock_driver_init+0x6c>)
    276e:	2400      	movs	r4, #0
    2770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2778:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    277c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2784:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2788:	4b13      	ldr	r3, [pc, #76]	; (27d8 <sys_clock_driver_init+0x70>)
    278a:	2602      	movs	r6, #2
    278c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2790:	2101      	movs	r1, #1
    2792:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    2796:	2011      	movs	r0, #17
    2798:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    279c:	4622      	mov	r2, r4
    279e:	f7fe fdeb 	bl	1378 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    27a2:	2011      	movs	r0, #17
    27a4:	f7fe fdb8 	bl	1318 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    27a8:	4a0c      	ldr	r2, [pc, #48]	; (27dc <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    27aa:	2301      	movs	r3, #1
    27ac:	60ab      	str	r3, [r5, #8]
    27ae:	602b      	str	r3, [r5, #0]
    27b0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    27b2:	4b0b      	ldr	r3, [pc, #44]	; (27e0 <sys_clock_driver_init+0x78>)
    27b4:	4a0b      	ldr	r2, [pc, #44]	; (27e4 <sys_clock_driver_init+0x7c>)
    27b6:	9300      	str	r3, [sp, #0]
    27b8:	9401      	str	r4, [sp, #4]
    27ba:	2300      	movs	r3, #0
    27bc:	4620      	mov	r0, r4
    27be:	f7ff ff2f 	bl	2620 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    27c2:	4630      	mov	r0, r6
    27c4:	f7ff f9c8 	bl	1b58 <z_nrf_clock_control_lf_on>

	return 0;
}
    27c8:	4620      	mov	r0, r4
    27ca:	b002      	add	sp, #8
    27cc:	bd70      	pop	{r4, r5, r6, pc}
    27ce:	bf00      	nop
    27d0:	20000160 	.word	0x20000160
    27d4:	40011000 	.word	0x40011000
    27d8:	e000e100 	.word	0xe000e100
    27dc:	20000330 	.word	0x20000330
    27e0:	00002501 	.word	0x00002501
    27e4:	007fffff 	.word	0x007fffff

000027e8 <rtc_nrf_isr>:
{
    27e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    27ec:	4c33      	ldr	r4, [pc, #204]	; (28bc <rtc_nrf_isr+0xd4>)
    27ee:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    27f2:	079a      	lsls	r2, r3, #30
    27f4:	d50b      	bpl.n	280e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    27f6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    27fa:	b143      	cbz	r3, 280e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    27fc:	4a30      	ldr	r2, [pc, #192]	; (28c0 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27fe:	2300      	movs	r3, #0
    2800:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2804:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2808:	6813      	ldr	r3, [r2, #0]
    280a:	3301      	adds	r3, #1
    280c:	6013      	str	r3, [r2, #0]
    280e:	f04f 0320 	mov.w	r3, #32
    2812:	f3ef 8211 	mrs	r2, BASEPRI
    2816:	f383 8812 	msr	BASEPRI_MAX, r3
    281a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    281e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2822:	03db      	lsls	r3, r3, #15
    2824:	d529      	bpl.n	287a <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2826:	f3bf 8f5b 	dmb	ish
    282a:	4b26      	ldr	r3, [pc, #152]	; (28c4 <rtc_nrf_isr+0xdc>)
    282c:	e853 1f00 	ldrex	r1, [r3]
    2830:	f021 0001 	bic.w	r0, r1, #1
    2834:	e843 0500 	strex	r5, r0, [r3]
    2838:	2d00      	cmp	r5, #0
    283a:	d1f7      	bne.n	282c <rtc_nrf_isr+0x44>
    283c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2840:	b911      	cbnz	r1, 2848 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2842:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2846:	b1c3      	cbz	r3, 287a <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2848:	2500      	movs	r5, #0
    284a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    284e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    2852:	f382 8811 	msr	BASEPRI, r2
    2856:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    285a:	f7ff febf 	bl	25dc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    285e:	f04f 0320 	mov.w	r3, #32
    2862:	f3ef 8211 	mrs	r2, BASEPRI
    2866:	f383 8812 	msr	BASEPRI_MAX, r3
    286a:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    286e:	4b16      	ldr	r3, [pc, #88]	; (28c8 <rtc_nrf_isr+0xe0>)
    2870:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2874:	42b0      	cmp	r0, r6
    2876:	41b9      	sbcs	r1, r7
    2878:	d206      	bcs.n	2888 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    287a:	f382 8811 	msr	BASEPRI, r2
    287e:	f3bf 8f6f 	isb	sy
}
    2882:	b003      	add	sp, #12
    2884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2888:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    288c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    2890:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2894:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    2898:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    289a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    289e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    28a2:	f382 8811 	msr	BASEPRI, r2
    28a6:	f3bf 8f6f 	isb	sy
		if (handler) {
    28aa:	2900      	cmp	r1, #0
    28ac:	d0e9      	beq.n	2882 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    28ae:	9000      	str	r0, [sp, #0]
    28b0:	4632      	mov	r2, r6
    28b2:	463b      	mov	r3, r7
    28b4:	4628      	mov	r0, r5
    28b6:	4788      	blx	r1
}
    28b8:	e7e3      	b.n	2882 <rtc_nrf_isr+0x9a>
    28ba:	bf00      	nop
    28bc:	40011000 	.word	0x40011000
    28c0:	20000334 	.word	0x20000334
    28c4:	2000032c 	.word	0x2000032c
    28c8:	20000160 	.word	0x20000160

000028cc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    28cc:	1c43      	adds	r3, r0, #1
{
    28ce:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    28d0:	d021      	beq.n	2916 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    28d2:	2801      	cmp	r0, #1
    28d4:	dd21      	ble.n	291a <sys_clock_set_timeout+0x4e>
    28d6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    28da:	da20      	bge.n	291e <sys_clock_set_timeout+0x52>
    28dc:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    28de:	f7ff fe7d 	bl	25dc <z_nrf_rtc_timer_read>
    28e2:	4b10      	ldr	r3, [pc, #64]	; (2924 <sys_clock_set_timeout+0x58>)
    28e4:	e9d3 1300 	ldrd	r1, r3, [r3]
    28e8:	1a42      	subs	r2, r0, r1
		ticks = 0;
    28ea:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    28ee:	480e      	ldr	r0, [pc, #56]	; (2928 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    28f0:	bf28      	it	cs
    28f2:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    28f4:	3201      	adds	r2, #1
    28f6:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    28f8:	4282      	cmp	r2, r0
    28fa:	bf28      	it	cs
    28fc:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    28fe:	1852      	adds	r2, r2, r1
    2900:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2904:	4909      	ldr	r1, [pc, #36]	; (292c <sys_clock_set_timeout+0x60>)
    2906:	9001      	str	r0, [sp, #4]
    2908:	9100      	str	r1, [sp, #0]
    290a:	f143 0300 	adc.w	r3, r3, #0
    290e:	f7ff fe87 	bl	2620 <compare_set>
}
    2912:	b002      	add	sp, #8
    2914:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2916:	4804      	ldr	r0, [pc, #16]	; (2928 <sys_clock_set_timeout+0x5c>)
    2918:	e7e0      	b.n	28dc <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    291a:	2400      	movs	r4, #0
    291c:	e7df      	b.n	28de <sys_clock_set_timeout+0x12>
    291e:	4c02      	ldr	r4, [pc, #8]	; (2928 <sys_clock_set_timeout+0x5c>)
    2920:	e7dd      	b.n	28de <sys_clock_set_timeout+0x12>
    2922:	bf00      	nop
    2924:	20000170 	.word	0x20000170
    2928:	007fffff 	.word	0x007fffff
    292c:	00002501 	.word	0x00002501

00002930 <sys_clock_elapsed>:
{
    2930:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2932:	f7ff fe53 	bl	25dc <z_nrf_rtc_timer_read>
    2936:	4b02      	ldr	r3, [pc, #8]	; (2940 <sys_clock_elapsed+0x10>)
    2938:	681b      	ldr	r3, [r3, #0]
}
    293a:	1ac0      	subs	r0, r0, r3
    293c:	bd08      	pop	{r3, pc}
    293e:	bf00      	nop
    2940:	20000170 	.word	0x20000170

00002944 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    2944:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2948:	4905      	ldr	r1, [pc, #20]	; (2960 <__NVIC_SystemReset+0x1c>)
    294a:	4b06      	ldr	r3, [pc, #24]	; (2964 <__NVIC_SystemReset+0x20>)
    294c:	68ca      	ldr	r2, [r1, #12]
    294e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2952:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2954:	60cb      	str	r3, [r1, #12]
    2956:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    295a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    295c:	e7fd      	b.n	295a <__NVIC_SystemReset+0x16>
    295e:	bf00      	nop
    2960:	e000ed00 	.word	0xe000ed00
    2964:	05fa0004 	.word	0x05fa0004

00002968 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2968:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    296c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2970:	2a06      	cmp	r2, #6
    2972:	d109      	bne.n	2988 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2974:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    2978:	f3c3 1303 	ubfx	r3, r3, #4, #4
    297c:	3b03      	subs	r3, #3
    297e:	2b04      	cmp	r3, #4
    2980:	d802      	bhi.n	2988 <nrf52_errata_16+0x20>
    2982:	4a02      	ldr	r2, [pc, #8]	; (298c <nrf52_errata_16+0x24>)
    2984:	5cd0      	ldrb	r0, [r2, r3]
    2986:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    2988:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    298a:	4770      	bx	lr
    298c:	00005692 	.word	0x00005692

00002990 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2990:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2994:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2998:	2a06      	cmp	r2, #6
    299a:	d105      	bne.n	29a8 <nrf52_configuration_249+0x18>
            {
                switch(var2)
    299c:	3b03      	subs	r3, #3
    299e:	2b04      	cmp	r3, #4
    29a0:	d80a      	bhi.n	29b8 <nrf52_configuration_249+0x28>
    29a2:	4a06      	ldr	r2, [pc, #24]	; (29bc <nrf52_configuration_249+0x2c>)
    29a4:	5cd0      	ldrb	r0, [r2, r3]
    29a6:	4770      	bx	lr
                        return true;
                }
            }
        #endif
        #if defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)
            if (var1 == 0x0A)
    29a8:	2a0a      	cmp	r2, #10
    29aa:	d103      	bne.n	29b4 <nrf52_configuration_249+0x24>
            {
                switch(var2)
    29ac:	2b02      	cmp	r3, #2
    29ae:	d803      	bhi.n	29b8 <nrf52_configuration_249+0x28>
    29b0:	4a03      	ldr	r2, [pc, #12]	; (29c0 <nrf52_configuration_249+0x30>)
    29b2:	e7f7      	b.n	29a4 <nrf52_configuration_249+0x14>
                        return false;
    29b4:	2000      	movs	r0, #0
    29b6:	4770      	bx	lr
            if (var1 == 0x0A)
    29b8:	2001      	movs	r0, #1
                }
            }
        #endif
        return false;
    #endif
}
    29ba:	4770      	bx	lr
    29bc:	00005683 	.word	0x00005683
    29c0:	00005680 	.word	0x00005680

000029c4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    29c4:	4a02      	ldr	r2, [pc, #8]	; (29d0 <nvmc_wait+0xc>)
    29c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    29ca:	2b00      	cmp	r3, #0
    29cc:	d0fb      	beq.n	29c6 <nvmc_wait+0x2>
}
    29ce:	4770      	bx	lr
    29d0:	4001e000 	.word	0x4001e000

000029d4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    29d4:	b510      	push	{r4, lr}
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    29d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    29da:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    29de:	1c5a      	adds	r2, r3, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    29e0:	bf04      	itt	eq
    29e2:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    29e6:	f893 3fe0 	ldrbeq.w	r3, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
    29ea:	2b06      	cmp	r3, #6
    29ec:	d108      	bne.n	2a00 <SystemInit+0x2c>

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    29ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    29f2:	4aad      	ldr	r2, [pc, #692]	; (2ca8 <SystemInit+0x2d4>)
    29f4:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    29f8:	f3c3 2304 	ubfx	r3, r3, #8, #5
    29fc:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2a00:	f7ff ffb2 	bl	2968 <nrf52_errata_16>
    2a04:	b110      	cbz	r0, 2a0c <SystemInit+0x38>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2a06:	4ba9      	ldr	r3, [pc, #676]	; (2cac <SystemInit+0x2d8>)
    2a08:	4aa9      	ldr	r2, [pc, #676]	; (2cb0 <SystemInit+0x2dc>)
    2a0a:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2a0c:	f002 fab8 	bl	4f80 <nrf52_errata_136>
    2a10:	b148      	cbz	r0, 2a26 <SystemInit+0x52>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2a12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a1a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2a1e:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2a22:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    2a26:	f7ff ff9f 	bl	2968 <nrf52_errata_16>
    2a2a:	b130      	cbz	r0, 2a3a <SystemInit+0x66>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2a2c:	4aa1      	ldr	r2, [pc, #644]	; (2cb4 <SystemInit+0x2e0>)
    2a2e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    2a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2a36:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2a3a:	f002 faa1 	bl	4f80 <nrf52_errata_136>
    2a3e:	b140      	cbz	r0, 2a52 <SystemInit+0x7e>
            NRF_CLOCK->EVENTS_DONE = 0;
    2a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a44:	2200      	movs	r2, #0
    2a46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2a4a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2a4e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2a52:	f7ff ff89 	bl	2968 <nrf52_errata_16>
    2a56:	b120      	cbz	r0, 2a62 <SystemInit+0x8e>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    2a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a5c:	2203      	movs	r2, #3
    2a5e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2a62:	f7ff ff81 	bl	2968 <nrf52_errata_16>
    2a66:	b160      	cbz	r0, 2a82 <SystemInit+0xae>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    2a68:	4b93      	ldr	r3, [pc, #588]	; (2cb8 <SystemInit+0x2e4>)
    2a6a:	2205      	movs	r2, #5
    2a6c:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2a70:	2201      	movs	r2, #1
    2a72:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    2a76:	2200      	movs	r2, #0
    2a78:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2a7c:	223f      	movs	r2, #63	; 0x3f
    2a7e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2a82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2a86:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2a8a:	1c54      	adds	r4, r2, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2a8c:	bf09      	itett	eq
    2a8e:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = *(uint32_t *)0x10000134ul;
    2a92:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2a96:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2a9a:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    2a9e:	bf08      	it	eq
    2aa0:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            if (var1 == 0x06)
    2aa4:	2a06      	cmp	r2, #6
    2aa6:	d14e      	bne.n	2b46 <SystemInit+0x172>
                switch(var2)
    2aa8:	3b03      	subs	r3, #3
    2aaa:	2b04      	cmp	r3, #4
    2aac:	d803      	bhi.n	2ab6 <SystemInit+0xe2>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2aae:	4a83      	ldr	r2, [pc, #524]	; (2cbc <SystemInit+0x2e8>)
    2ab0:	5cd3      	ldrb	r3, [r2, r3]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d049      	beq.n	2b4a <SystemInit+0x176>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2aba:	4b81      	ldr	r3, [pc, #516]	; (2cc0 <SystemInit+0x2ec>)
    2abc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2ac0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2ac4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2ac8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2acc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2ad0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2ad4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2ad8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2adc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2ae0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2ae4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2ae8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2aec:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2af0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2af4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2af8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2afc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2b00:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2b04:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2b08:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2b0c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2b10:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2b14:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2b18:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2b1c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2b20:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2b24:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2b28:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2b2c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2b30:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2b34:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2b38:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2b3c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2b40:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    2b44:	e001      	b.n	2b4a <SystemInit+0x176>
            if (var1 == 0x0A)
    2b46:	2a0a      	cmp	r2, #10
    2b48:	d0b5      	beq.n	2ab6 <SystemInit+0xe2>
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2b4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2b4e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2b52:	1c58      	adds	r0, r3, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2b54:	bf04      	itt	eq
    2b56:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    2b5a:	f893 3fe0 	ldrbeq.w	r3, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
    2b5e:	2b06      	cmp	r3, #6
    2b60:	d109      	bne.n	2b76 <SystemInit+0x1a2>

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2b62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b6a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2b6e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2b72:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2b76:	f002 fa03 	bl	4f80 <nrf52_errata_136>
    2b7a:	b148      	cbz	r0, 2b90 <SystemInit+0x1bc>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b80:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2b84:	07d1      	lsls	r1, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2b86:	bf44      	itt	mi
    2b88:	f06f 0201 	mvnmi.w	r2, #1
    2b8c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x06)
    2b94:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2b98:	2a06      	cmp	r2, #6
    2b9a:	d10e      	bne.n	2bba <SystemInit+0x1e6>
                switch(var2)
    2b9c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2ba0:	3b03      	subs	r3, #3
    2ba2:	2b04      	cmp	r3, #4
    2ba4:	d802      	bhi.n	2bac <SystemInit+0x1d8>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    2ba6:	4a47      	ldr	r2, [pc, #284]	; (2cc4 <SystemInit+0x2f0>)
    2ba8:	5cd3      	ldrb	r3, [r2, r3]
    2baa:	b1d3      	cbz	r3, 2be2 <SystemInit+0x20e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    2bac:	4a46      	ldr	r2, [pc, #280]	; (2cc8 <SystemInit+0x2f4>)
    2bae:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    2bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2bb6:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2bba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x0A)
    2bbe:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2bc2:	2a0a      	cmp	r2, #10
    2bc4:	d10d      	bne.n	2be2 <SystemInit+0x20e>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2bc6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    2bca:	2b02      	cmp	r3, #2
    2bcc:	d809      	bhi.n	2be2 <SystemInit+0x20e>
    #endif

    #if NRF52_ERRATA_217_ENABLE_WORKAROUND
        /* Workaround for Errata 217 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_217()){
    2bce:	07da      	lsls	r2, r3, #31
            *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
    2bd0:	bf41      	itttt	mi
    2bd2:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
    2bd6:	f8d2 3ee4 	ldrmi.w	r3, [r2, #3812]	; 0xee4
    2bda:	f043 030f 	orrmi.w	r3, r3, #15
    2bde:	f8c2 3ee4 	strmi.w	r3, [r2, #3812]	; 0xee4
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2be2:	f7ff fed5 	bl	2990 <nrf52_configuration_249>
    2be6:	b338      	cbz	r0, 2c38 <SystemInit+0x264>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2be8:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    2bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bf0:	f8d1 2208 	ldr.w	r2, [r1, #520]	; 0x208
    2bf4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #endif

    nrf52_handle_approtect();

    #if NRF52_CONFIGURATION_249_ENABLE && (defined(NRF52805_XXAA) || defined(NRF52810_XXAA) || defined(NRF52811_XXAA))
        if (nrf52_configuration_249() && (NRF_UICR->NRFMDK[0] == 0xFFFFFFFF || NRF_UICR->NRFMDK[1] == 0xFFFFFFFF))
    2bf8:	f7ff feca 	bl	2990 <nrf52_configuration_249>
    2bfc:	b1e0      	cbz	r0, 2c38 <SystemInit+0x264>
    2bfe:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    2c02:	3301      	adds	r3, #1
    2c04:	d003      	beq.n	2c0e <SystemInit+0x23a>
    2c06:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
    2c0a:	3301      	adds	r3, #1
    2c0c:	d114      	bne.n	2c38 <SystemInit+0x264>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c0e:	482f      	ldr	r0, [pc, #188]	; (2ccc <SystemInit+0x2f8>)
    2c10:	2301      	movs	r3, #1
        {
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NRFMDK[0] = 0;
    2c12:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c16:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            NRF_UICR->NRFMDK[0] = 0;
    2c1a:	2100      	movs	r1, #0
    nvmc_wait();
    2c1c:	f7ff fed2 	bl	29c4 <nvmc_wait>
            NRF_UICR->NRFMDK[0] = 0;
    2c20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
            nvmc_wait();
    2c24:	f7ff fece 	bl	29c4 <nvmc_wait>
            NRF_UICR->NRFMDK[1] = 0;
    2c28:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
            nvmc_wait();
    2c2c:	f7ff feca 	bl	29c4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c30:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    nvmc_wait();
    2c34:	f7ff fec6 	bl	29c4 <nvmc_wait>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2c38:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    2c3c:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    2c40:	2b00      	cmp	r3, #0
    2c42:	db03      	blt.n	2c4c <SystemInit+0x278>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2c44:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2c48:	2b00      	cmp	r3, #0
    2c4a:	da17      	bge.n	2c7c <SystemInit+0x2a8>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c4c:	491f      	ldr	r1, [pc, #124]	; (2ccc <SystemInit+0x2f8>)
    2c4e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2c50:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c54:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2c58:	2415      	movs	r4, #21
    nvmc_wait();
    2c5a:	f7ff feb3 	bl	29c4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2c5e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2c62:	f7ff feaf 	bl	29c4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2c66:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2c6a:	f7ff feab 	bl	29c4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c6e:	2300      	movs	r3, #0
    2c70:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2c74:	f7ff fea6 	bl	29c4 <nvmc_wait>
        if ((*((uint32_t *)0x1000120C) & (1 << 0)) != 0){
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            *((uint32_t *)0x1000120C) = 0;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    2c78:	f7ff fe64 	bl	2944 <__NVIC_SystemReset>
        if ((*((uint32_t *)0x1000120C) & (1 << 0)) != 0){
    2c7c:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    2c80:	07db      	lsls	r3, r3, #31
    2c82:	d50d      	bpl.n	2ca0 <SystemInit+0x2cc>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c84:	4811      	ldr	r0, [pc, #68]	; (2ccc <SystemInit+0x2f8>)
    2c86:	2301      	movs	r3, #1
    2c88:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            *((uint32_t *)0x1000120C) = 0;
    2c8c:	2400      	movs	r4, #0
    nvmc_wait();
    2c8e:	f7ff fe99 	bl	29c4 <nvmc_wait>
            *((uint32_t *)0x1000120C) = 0;
    2c92:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
            nvmc_wait();
    2c96:	f7ff fe95 	bl	29c4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c9a:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
    2c9e:	e7e9      	b.n	2c74 <SystemInit+0x2a0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2ca0:	4b0b      	ldr	r3, [pc, #44]	; (2cd0 <SystemInit+0x2fc>)
    2ca2:	4a0c      	ldr	r2, [pc, #48]	; (2cd4 <SystemInit+0x300>)
    2ca4:	601a      	str	r2, [r3, #0]
        }
    #endif

    SystemCoreClockUpdate();
}
    2ca6:	bd10      	pop	{r4, pc}
    2ca8:	40013000 	.word	0x40013000
    2cac:	4007c000 	.word	0x4007c000
    2cb0:	baadf00d 	.word	0xbaadf00d
    2cb4:	e000ed00 	.word	0xe000ed00
    2cb8:	40005000 	.word	0x40005000
    2cbc:	0000568d 	.word	0x0000568d
    2cc0:	4000c000 	.word	0x4000c000
    2cc4:	00005688 	.word	0x00005688
    2cc8:	40001000 	.word	0x40001000
    2ccc:	4001e000 	.word	0x4001e000
    2cd0:	200000e8 	.word	0x200000e8
    2cd4:	03d09000 	.word	0x03d09000

00002cd8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2cd8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2cda:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2cdc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2cde:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    2ce2:	fab2 f382 	clz	r3, r2
    2ce6:	f1c3 031f 	rsb	r3, r3, #31
    2cea:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2cec:	fa05 f403 	lsl.w	r4, r5, r3
    2cf0:	ea22 0404 	bic.w	r4, r2, r4
    2cf4:	e850 6f00 	ldrex	r6, [r0]
    2cf8:	4296      	cmp	r6, r2
    2cfa:	d104      	bne.n	2d06 <nrfx_flag32_alloc+0x2e>
    2cfc:	e840 4c00 	strex	ip, r4, [r0]
    2d00:	f1bc 0f00 	cmp.w	ip, #0
    2d04:	d1f6      	bne.n	2cf4 <nrfx_flag32_alloc+0x1c>
    2d06:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2d0a:	d1e7      	bne.n	2cdc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2d0c:	4801      	ldr	r0, [pc, #4]	; (2d14 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    2d0e:	700b      	strb	r3, [r1, #0]
}
    2d10:	bd70      	pop	{r4, r5, r6, pc}
    2d12:	bf00      	nop
    2d14:	0bad0000 	.word	0x0bad0000

00002d18 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2d18:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2d1a:	6803      	ldr	r3, [r0, #0]
    2d1c:	40cb      	lsrs	r3, r1
    2d1e:	07db      	lsls	r3, r3, #31
    2d20:	d414      	bmi.n	2d4c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2d22:	2301      	movs	r3, #1
    2d24:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    2d26:	6802      	ldr	r2, [r0, #0]
    2d28:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2d2c:	ea43 0102 	orr.w	r1, r3, r2
    2d30:	e850 4f00 	ldrex	r4, [r0]
    2d34:	4294      	cmp	r4, r2
    2d36:	d104      	bne.n	2d42 <nrfx_flag32_free+0x2a>
    2d38:	e840 1c00 	strex	ip, r1, [r0]
    2d3c:	f1bc 0f00 	cmp.w	ip, #0
    2d40:	d1f6      	bne.n	2d30 <nrfx_flag32_free+0x18>
    2d42:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2d46:	d1ee      	bne.n	2d26 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2d48:	4801      	ldr	r0, [pc, #4]	; (2d50 <nrfx_flag32_free+0x38>)
}
    2d4a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2d4c:	4801      	ldr	r0, [pc, #4]	; (2d54 <nrfx_flag32_free+0x3c>)
    2d4e:	e7fc      	b.n	2d4a <nrfx_flag32_free+0x32>
    2d50:	0bad0000 	.word	0x0bad0000
    2d54:	0bad0004 	.word	0x0bad0004

00002d58 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2d5a:	4604      	mov	r4, r0
    2d5c:	b118      	cbz	r0, 2d66 <clock_stop+0xe>
    2d5e:	2801      	cmp	r0, #1
    2d60:	d022      	beq.n	2da8 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2d62:	b003      	add	sp, #12
    2d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    2d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d6a:	2202      	movs	r2, #2
    2d6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d70:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    2d74:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d78:	2201      	movs	r2, #1
    2d7a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2d7c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2d7e:	2301      	movs	r3, #1
    2d80:	f88d 3007 	strb.w	r3, [sp, #7]
    2d84:	f242 7510 	movw	r5, #10000	; 0x2710
    2d88:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    2d8c:	b1cc      	cbz	r4, 2dc2 <clock_stop+0x6a>
    2d8e:	2c01      	cmp	r4, #1
    2d90:	d1e7      	bne.n	2d62 <clock_stop+0xa>
            if (p_clk_src != NULL)
    2d92:	b3c7      	cbz	r7, 2e06 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2d94:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2d98:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2d9c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2d9e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2da2:	03da      	lsls	r2, r3, #15
    2da4:	d521      	bpl.n	2dea <clock_stop+0x92>
    2da6:	e016      	b.n	2dd6 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    2da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dac:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2dae:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2db2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2db6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dba:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2dbc:	f10d 0707 	add.w	r7, sp, #7
    2dc0:	e7dd      	b.n	2d7e <clock_stop+0x26>
            if (p_clk_src != NULL)
    2dc2:	b1b7      	cbz	r7, 2df2 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2dc4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2dc8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2dcc:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2dce:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2dd2:	03d8      	lsls	r0, r3, #15
    2dd4:	d5c5      	bpl.n	2d62 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2dd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2dda:	2801      	cmp	r0, #1
    2ddc:	d103      	bne.n	2de6 <clock_stop+0x8e>
    2dde:	f002 f8e3 	bl	4fa8 <nrfx_busy_wait>
    2de2:	3d01      	subs	r5, #1
    2de4:	d1d2      	bne.n	2d8c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2de6:	2c01      	cmp	r4, #1
    2de8:	d1bb      	bne.n	2d62 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    2dea:	4b0c      	ldr	r3, [pc, #48]	; (2e1c <clock_stop+0xc4>)
    2dec:	2200      	movs	r2, #0
    2dee:	715a      	strb	r2, [r3, #5]
    2df0:	e7b7      	b.n	2d62 <clock_stop+0xa>
    2df2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2df6:	03d9      	lsls	r1, r3, #15
    2df8:	d5b3      	bpl.n	2d62 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2dfa:	2001      	movs	r0, #1
    2dfc:	f002 f8d4 	bl	4fa8 <nrfx_busy_wait>
    2e00:	3d01      	subs	r5, #1
    2e02:	d1f6      	bne.n	2df2 <clock_stop+0x9a>
    2e04:	e7ad      	b.n	2d62 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2e06:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2e0a:	03db      	lsls	r3, r3, #15
    2e0c:	d5ed      	bpl.n	2dea <clock_stop+0x92>
    2e0e:	2001      	movs	r0, #1
    2e10:	f002 f8ca 	bl	4fa8 <nrfx_busy_wait>
    2e14:	3d01      	subs	r5, #1
    2e16:	d1f6      	bne.n	2e06 <clock_stop+0xae>
    2e18:	e7e7      	b.n	2dea <clock_stop+0x92>
    2e1a:	bf00      	nop
    2e1c:	20000338 	.word	0x20000338

00002e20 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2e20:	4b04      	ldr	r3, [pc, #16]	; (2e34 <nrfx_clock_init+0x14>)
    2e22:	791a      	ldrb	r2, [r3, #4]
    2e24:	b922      	cbnz	r2, 2e30 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2e26:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2e28:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2e2a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2e2c:	4802      	ldr	r0, [pc, #8]	; (2e38 <nrfx_clock_init+0x18>)
    2e2e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2e30:	4802      	ldr	r0, [pc, #8]	; (2e3c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2e32:	4770      	bx	lr
    2e34:	20000338 	.word	0x20000338
    2e38:	0bad0000 	.word	0x0bad0000
    2e3c:	0bad000c 	.word	0x0bad000c

00002e40 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2e40:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e46:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2e4a:	b16a      	cbz	r2, 2e68 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e4c:	2200      	movs	r2, #0
    2e4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2e52:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2e56:	2201      	movs	r2, #1
    2e58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2e5c:	4b11      	ldr	r3, [pc, #68]	; (2ea4 <nrfx_power_clock_irq_handler+0x64>)
    2e5e:	7958      	ldrb	r0, [r3, #5]
    2e60:	b910      	cbnz	r0, 2e68 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    2e62:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2e64:	681b      	ldr	r3, [r3, #0]
    2e66:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e6c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2e70:	b172      	cbz	r2, 2e90 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e72:	2200      	movs	r2, #0
    2e74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2e78:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e7c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e80:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2e84:	0792      	lsls	r2, r2, #30
    2e86:	d104      	bne.n	2e92 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e88:	2201      	movs	r2, #1
    2e8a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e8e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2e90:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2e92:	2202      	movs	r2, #2
    2e94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e98:	4b02      	ldr	r3, [pc, #8]	; (2ea4 <nrfx_power_clock_irq_handler+0x64>)
}
    2e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	2001      	movs	r0, #1
    2ea2:	4718      	bx	r3
    2ea4:	20000338 	.word	0x20000338

00002ea8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2ea8:	4b03      	ldr	r3, [pc, #12]	; (2eb8 <pin_in_use_by_te+0x10>)
    2eaa:	3008      	adds	r0, #8
    2eac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2eb0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2eb4:	4770      	bx	lr
    2eb6:	bf00      	nop
    2eb8:	200000ec 	.word	0x200000ec

00002ebc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2ebc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2ebe:	f100 0308 	add.w	r3, r0, #8
    2ec2:	4c0c      	ldr	r4, [pc, #48]	; (2ef4 <call_handler+0x38>)
    2ec4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    2ec8:	05da      	lsls	r2, r3, #23
{
    2eca:	4605      	mov	r5, r0
    2ecc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2ece:	d507      	bpl.n	2ee0 <call_handler+0x24>
    2ed0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2ed4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2ed8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2edc:	6852      	ldr	r2, [r2, #4]
    2ede:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2ee0:	68a3      	ldr	r3, [r4, #8]
    2ee2:	b12b      	cbz	r3, 2ef0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2ee4:	68e2      	ldr	r2, [r4, #12]
    2ee6:	4631      	mov	r1, r6
    2ee8:	4628      	mov	r0, r5
    }
}
    2eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2eee:	4718      	bx	r3
}
    2ef0:	bd70      	pop	{r4, r5, r6, pc}
    2ef2:	bf00      	nop
    2ef4:	200000ec 	.word	0x200000ec

00002ef8 <release_handler>:
{
    2ef8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2efa:	4a12      	ldr	r2, [pc, #72]	; (2f44 <release_handler+0x4c>)
    2efc:	3008      	adds	r0, #8
    2efe:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2f02:	05d9      	lsls	r1, r3, #23
    2f04:	d51b      	bpl.n	2f3e <release_handler+0x46>
    2f06:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2f0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2f0e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f12:	f102 040e 	add.w	r4, r2, #14
    2f16:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2f18:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2f1c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f20:	d003      	beq.n	2f2a <release_handler+0x32>
    2f22:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2f26:	4299      	cmp	r1, r3
    2f28:	d009      	beq.n	2f3e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f2a:	3001      	adds	r0, #1
    2f2c:	2820      	cmp	r0, #32
    2f2e:	d1f3      	bne.n	2f18 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2f30:	2300      	movs	r3, #0
    2f32:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f36:	4804      	ldr	r0, [pc, #16]	; (2f48 <release_handler+0x50>)
}
    2f38:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f3a:	f7ff beed 	b.w	2d18 <nrfx_flag32_free>
}
    2f3e:	bc10      	pop	{r4}
    2f40:	4770      	bx	lr
    2f42:	bf00      	nop
    2f44:	200000ec 	.word	0x200000ec
    2f48:	20000140 	.word	0x20000140

00002f4c <pin_handler_trigger_uninit>:
{
    2f4c:	b538      	push	{r3, r4, r5, lr}
    2f4e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2f50:	f7ff ffaa 	bl	2ea8 <pin_in_use_by_te>
    2f54:	4c09      	ldr	r4, [pc, #36]	; (2f7c <pin_handler_trigger_uninit+0x30>)
    2f56:	f102 0508 	add.w	r5, r2, #8
    2f5a:	b140      	cbz	r0, 2f6e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f5c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2f60:	4907      	ldr	r1, [pc, #28]	; (2f80 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2f62:	0b5b      	lsrs	r3, r3, #13
    2f64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2f68:	2000      	movs	r0, #0
    2f6a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    2f6e:	4610      	mov	r0, r2
    2f70:	f7ff ffc2 	bl	2ef8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2f74:	2300      	movs	r3, #0
    2f76:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2f7a:	bd38      	pop	{r3, r4, r5, pc}
    2f7c:	200000ec 	.word	0x200000ec
    2f80:	40006000 	.word	0x40006000

00002f84 <nrfx_gpiote_input_configure>:
{
    2f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2f88:	4604      	mov	r4, r0
    2f8a:	461d      	mov	r5, r3
    if (p_input_config)
    2f8c:	b309      	cbz	r1, 2fd2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2f8e:	4f4f      	ldr	r7, [pc, #316]	; (30cc <nrfx_gpiote_input_configure+0x148>)
    2f90:	f100 0808 	add.w	r8, r0, #8
    2f94:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2f98:	07b3      	lsls	r3, r6, #30
    2f9a:	d506      	bpl.n	2faa <nrfx_gpiote_input_configure+0x26>
    2f9c:	f7ff ff84 	bl	2ea8 <pin_in_use_by_te>
    2fa0:	b118      	cbz	r0, 2faa <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    2fa2:	484b      	ldr	r0, [pc, #300]	; (30d0 <nrfx_gpiote_input_configure+0x14c>)
}
    2fa4:	b002      	add	sp, #8
    2fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    2faa:	f004 031f 	and.w	r3, r4, #31
    2fae:	009b      	lsls	r3, r3, #2
    2fb0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2fb4:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2fb6:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2fba:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    2fbe:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2fc2:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2fc6:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    2fca:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    2fce:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    2fd2:	b19a      	cbz	r2, 2ffc <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fd4:	4b3d      	ldr	r3, [pc, #244]	; (30cc <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2fd6:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2fd8:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fda:	f104 0608 	add.w	r6, r4, #8
    2fde:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    2fe2:	f011 0f02 	tst.w	r1, #2
    2fe6:	d00d      	beq.n	3004 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    2fe8:	2800      	cmp	r0, #0
    2fea:	d1da      	bne.n	2fa2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2fec:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    2ff0:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2ff4:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    2ff8:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    2ffc:	2d00      	cmp	r5, #0
    2ffe:	d13b      	bne.n	3078 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    3000:	4834      	ldr	r0, [pc, #208]	; (30d4 <nrfx_gpiote_input_configure+0x150>)
    3002:	e7cf      	b.n	2fa4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3004:	f021 0120 	bic.w	r1, r1, #32
    3008:	04c9      	lsls	r1, r1, #19
    300a:	0cc9      	lsrs	r1, r1, #19
    300c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    3010:	2800      	cmp	r0, #0
    3012:	d0eb      	beq.n	2fec <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    3014:	2f03      	cmp	r7, #3
    3016:	d8c4      	bhi.n	2fa2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3018:	6852      	ldr	r2, [r2, #4]
    301a:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    301e:	b92f      	cbnz	r7, 302c <nrfx_gpiote_input_configure+0xa8>
    3020:	4a2d      	ldr	r2, [pc, #180]	; (30d8 <nrfx_gpiote_input_configure+0x154>)
    3022:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    3026:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    302a:	e7df      	b.n	2fec <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    302c:	ea4f 028c 	mov.w	r2, ip, lsl #2
    3030:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3034:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3038:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    303c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3040:	f020 0003 	bic.w	r0, r0, #3
    3044:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3048:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    304c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    3050:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    3054:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3058:	0220      	lsls	r0, r4, #8
    305a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    305e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    3062:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    3066:	ea40 000e 	orr.w	r0, r0, lr
    306a:	f041 0120 	orr.w	r1, r1, #32
    306e:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    3072:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    3076:	e7b9      	b.n	2fec <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3078:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    307c:	4620      	mov	r0, r4
    307e:	f7ff ff3b 	bl	2ef8 <release_handler>
    if (!handler)
    3082:	2e00      	cmp	r6, #0
    3084:	d0bc      	beq.n	3000 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3086:	4d11      	ldr	r5, [pc, #68]	; (30cc <nrfx_gpiote_input_configure+0x148>)
    3088:	e9d5 2300 	ldrd	r2, r3, [r5]
    308c:	4296      	cmp	r6, r2
    308e:	d101      	bne.n	3094 <nrfx_gpiote_input_configure+0x110>
    3090:	429f      	cmp	r7, r3
    3092:	d019      	beq.n	30c8 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3094:	4811      	ldr	r0, [pc, #68]	; (30dc <nrfx_gpiote_input_configure+0x158>)
    3096:	f10d 0107 	add.w	r1, sp, #7
    309a:	f7ff fe1d 	bl	2cd8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    309e:	4b0d      	ldr	r3, [pc, #52]	; (30d4 <nrfx_gpiote_input_configure+0x150>)
    30a0:	4298      	cmp	r0, r3
    30a2:	f47f af7f 	bne.w	2fa4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    30a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    30aa:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    30ae:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30b2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    30b4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30b6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    30ba:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    30be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    30c2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    30c6:	e79b      	b.n	3000 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    30c8:	2200      	movs	r2, #0
    30ca:	e7ee      	b.n	30aa <nrfx_gpiote_input_configure+0x126>
    30cc:	200000ec 	.word	0x200000ec
    30d0:	0bad0004 	.word	0x0bad0004
    30d4:	0bad0000 	.word	0x0bad0000
    30d8:	40006000 	.word	0x40006000
    30dc:	20000140 	.word	0x20000140

000030e0 <nrfx_gpiote_output_configure>:
{
    30e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30e2:	4604      	mov	r4, r0
    if (p_config)
    30e4:	b389      	cbz	r1, 314a <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    30e6:	4e3a      	ldr	r6, [pc, #232]	; (31d0 <nrfx_gpiote_output_configure+0xf0>)
    30e8:	f100 0708 	add.w	r7, r0, #8
    30ec:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    30f0:	07ab      	lsls	r3, r5, #30
    30f2:	d404      	bmi.n	30fe <nrfx_gpiote_output_configure+0x1e>
    30f4:	f7ff fed8 	bl	2ea8 <pin_in_use_by_te>
    30f8:	b108      	cbz	r0, 30fe <nrfx_gpiote_output_configure+0x1e>
{
    30fa:	4836      	ldr	r0, [pc, #216]	; (31d4 <nrfx_gpiote_output_configure+0xf4>)
}
    30fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    30fe:	f015 0f1c 	tst.w	r5, #28
    3102:	784b      	ldrb	r3, [r1, #1]
    3104:	d124      	bne.n	3150 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    3106:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    310a:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    310e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3112:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3114:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3118:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    311c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    311e:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    3122:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    3126:	f02c 0c07 	bic.w	ip, ip, #7
    312a:	ea43 030c 	orr.w	r3, r3, ip
    312e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    3132:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    3136:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    313a:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    313e:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    3142:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    3146:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    314a:	b922      	cbnz	r2, 3156 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    314c:	4822      	ldr	r0, [pc, #136]	; (31d8 <nrfx_gpiote_output_configure+0xf8>)
    314e:	e7d5      	b.n	30fc <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3150:	2b01      	cmp	r3, #1
    3152:	d1d8      	bne.n	3106 <nrfx_gpiote_output_configure+0x26>
    3154:	e7d1      	b.n	30fa <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3156:	4e1e      	ldr	r6, [pc, #120]	; (31d0 <nrfx_gpiote_output_configure+0xf0>)
    3158:	f104 0708 	add.w	r7, r4, #8
    315c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3160:	0783      	lsls	r3, r0, #30
    3162:	d5ca      	bpl.n	30fa <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    3164:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    3168:	4661      	mov	r1, ip
    316a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    316c:	f020 0020 	bic.w	r0, r0, #32
    3170:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3174:	04c0      	lsls	r0, r0, #19
    3176:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    317a:	0cc0      	lsrs	r0, r0, #19
    317c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3180:	2300      	movs	r3, #0
    3182:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3186:	7855      	ldrb	r5, [r2, #1]
    3188:	2d00      	cmp	r5, #0
    318a:	d0df      	beq.n	314c <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    318c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3190:	7892      	ldrb	r2, [r2, #2]
    3192:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    3196:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    319a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    319e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    31a2:	0223      	lsls	r3, r4, #8
    31a4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    31a8:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31aa:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    31ae:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    31b2:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31b4:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    31b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    31ba:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31be:	4313      	orrs	r3, r2
    31c0:	f040 0020 	orr.w	r0, r0, #32
    31c4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    31c8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    31cc:	e7be      	b.n	314c <nrfx_gpiote_output_configure+0x6c>
    31ce:	bf00      	nop
    31d0:	200000ec 	.word	0x200000ec
    31d4:	0bad0004 	.word	0x0bad0004
    31d8:	0bad0000 	.word	0x0bad0000

000031dc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    31dc:	4b01      	ldr	r3, [pc, #4]	; (31e4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    31de:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    31e2:	4770      	bx	lr
    31e4:	200000ec 	.word	0x200000ec

000031e8 <nrfx_gpiote_channel_get>:
{
    31e8:	b508      	push	{r3, lr}
    31ea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    31ec:	f7ff fe5c 	bl	2ea8 <pin_in_use_by_te>
    31f0:	b138      	cbz	r0, 3202 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31f2:	4b05      	ldr	r3, [pc, #20]	; (3208 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    31f4:	4805      	ldr	r0, [pc, #20]	; (320c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31f6:	3208      	adds	r2, #8
    31f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    31fc:	0b5b      	lsrs	r3, r3, #13
    31fe:	700b      	strb	r3, [r1, #0]
}
    3200:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3202:	4803      	ldr	r0, [pc, #12]	; (3210 <nrfx_gpiote_channel_get+0x28>)
    3204:	e7fc      	b.n	3200 <nrfx_gpiote_channel_get+0x18>
    3206:	bf00      	nop
    3208:	200000ec 	.word	0x200000ec
    320c:	0bad0000 	.word	0x0bad0000
    3210:	0bad0004 	.word	0x0bad0004

00003214 <nrfx_gpiote_init>:
{
    3214:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3216:	4c0f      	ldr	r4, [pc, #60]	; (3254 <nrfx_gpiote_init+0x40>)
    3218:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    321c:	b9bd      	cbnz	r5, 324e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    321e:	2240      	movs	r2, #64	; 0x40
    3220:	4629      	mov	r1, r5
    3222:	f104 0010 	add.w	r0, r4, #16
    3226:	f001 fb32 	bl	488e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    322a:	2006      	movs	r0, #6
    322c:	f7fe f874 	bl	1318 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3230:	4b09      	ldr	r3, [pc, #36]	; (3258 <nrfx_gpiote_init+0x44>)
    return err_code;
    3232:	480a      	ldr	r0, [pc, #40]	; (325c <nrfx_gpiote_init+0x48>)
    3234:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3238:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    323c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3240:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3244:	2301      	movs	r3, #1
    3246:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    324a:	6563      	str	r3, [r4, #84]	; 0x54
}
    324c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    324e:	4804      	ldr	r0, [pc, #16]	; (3260 <nrfx_gpiote_init+0x4c>)
    3250:	e7fc      	b.n	324c <nrfx_gpiote_init+0x38>
    3252:	bf00      	nop
    3254:	200000ec 	.word	0x200000ec
    3258:	40006000 	.word	0x40006000
    325c:	0bad0000 	.word	0x0bad0000
    3260:	0bad0005 	.word	0x0bad0005

00003264 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3264:	4b03      	ldr	r3, [pc, #12]	; (3274 <nrfx_gpiote_is_init+0x10>)
    3266:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    326a:	3800      	subs	r0, #0
    326c:	bf18      	it	ne
    326e:	2001      	movne	r0, #1
    3270:	4770      	bx	lr
    3272:	bf00      	nop
    3274:	200000ec 	.word	0x200000ec

00003278 <nrfx_gpiote_channel_free>:
{
    3278:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    327a:	4801      	ldr	r0, [pc, #4]	; (3280 <nrfx_gpiote_channel_free+0x8>)
    327c:	f7ff bd4c 	b.w	2d18 <nrfx_flag32_free>
    3280:	2000013c 	.word	0x2000013c

00003284 <nrfx_gpiote_channel_alloc>:
{
    3284:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3286:	4801      	ldr	r0, [pc, #4]	; (328c <nrfx_gpiote_channel_alloc+0x8>)
    3288:	f7ff bd26 	b.w	2cd8 <nrfx_flag32_alloc>
    328c:	2000013c 	.word	0x2000013c

00003290 <nrfx_gpiote_trigger_enable>:
{
    3290:	b510      	push	{r4, lr}
    3292:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3294:	f7ff fe08 	bl	2ea8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3298:	f102 0408 	add.w	r4, r2, #8
    329c:	4b1c      	ldr	r3, [pc, #112]	; (3310 <nrfx_gpiote_trigger_enable+0x80>)
    329e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    32a2:	b1e0      	cbz	r0, 32de <nrfx_gpiote_trigger_enable+0x4e>
    32a4:	f013 0402 	ands.w	r4, r3, #2
    32a8:	d119      	bne.n	32de <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    32aa:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    32ac:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    32ae:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    32b2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    32b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32ba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32be:	6004      	str	r4, [r0, #0]
    32c0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    32c2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    32c6:	f040 0001 	orr.w	r0, r0, #1
    32ca:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    32ce:	b129      	cbz	r1, 32dc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    32d0:	2201      	movs	r2, #1
    32d2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    32d6:	4a0f      	ldr	r2, [pc, #60]	; (3314 <nrfx_gpiote_trigger_enable+0x84>)
    32d8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    32dc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    32de:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    32e2:	2b04      	cmp	r3, #4
    32e4:	d010      	beq.n	3308 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    32e6:	2b05      	cmp	r3, #5
    32e8:	d010      	beq.n	330c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    32ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    32ee:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    32f2:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    32f6:	40d9      	lsrs	r1, r3
    32f8:	f001 0101 	and.w	r1, r1, #1
    32fc:	3102      	adds	r1, #2
}
    32fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3302:	4610      	mov	r0, r2
    3304:	f001 be9d 	b.w	5042 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3308:	2103      	movs	r1, #3
    330a:	e7f8      	b.n	32fe <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    330c:	2102      	movs	r1, #2
    330e:	e7f6      	b.n	32fe <nrfx_gpiote_trigger_enable+0x6e>
    3310:	200000ec 	.word	0x200000ec
    3314:	40006000 	.word	0x40006000

00003318 <nrfx_gpiote_trigger_disable>:
{
    3318:	b508      	push	{r3, lr}
    331a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    331c:	f7ff fdc4 	bl	2ea8 <pin_in_use_by_te>
    3320:	b1c0      	cbz	r0, 3354 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3322:	f102 0108 	add.w	r1, r2, #8
    3326:	4b0e      	ldr	r3, [pc, #56]	; (3360 <nrfx_gpiote_trigger_disable+0x48>)
    3328:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    332c:	0799      	lsls	r1, r3, #30
    332e:	d411      	bmi.n	3354 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3330:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3332:	2201      	movs	r2, #1
    3334:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3336:	009b      	lsls	r3, r3, #2
    3338:	490a      	ldr	r1, [pc, #40]	; (3364 <nrfx_gpiote_trigger_disable+0x4c>)
    333a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    333e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3342:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3346:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    334a:	f022 0203 	bic.w	r2, r2, #3
    334e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3352:	bd08      	pop	{r3, pc}
    3354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3358:	2100      	movs	r1, #0
    335a:	4610      	mov	r0, r2
    335c:	f001 be71 	b.w	5042 <nrf_gpio_cfg_sense_set>
    3360:	200000ec 	.word	0x200000ec
    3364:	40006000 	.word	0x40006000

00003368 <nrfx_gpiote_pin_uninit>:
{
    3368:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    336a:	4b0d      	ldr	r3, [pc, #52]	; (33a0 <nrfx_gpiote_pin_uninit+0x38>)
    336c:	f100 0208 	add.w	r2, r0, #8
{
    3370:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3372:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3376:	07db      	lsls	r3, r3, #31
    3378:	d50f      	bpl.n	339a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    337a:	f7ff ffcd 	bl	3318 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    337e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    3380:	f004 041f 	and.w	r4, r4, #31
    3384:	f7ff fde2 	bl	2f4c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3388:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    338c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3390:	2202      	movs	r2, #2
    3392:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    3396:	4803      	ldr	r0, [pc, #12]	; (33a4 <nrfx_gpiote_pin_uninit+0x3c>)
}
    3398:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    339a:	4803      	ldr	r0, [pc, #12]	; (33a8 <nrfx_gpiote_pin_uninit+0x40>)
    339c:	e7fc      	b.n	3398 <nrfx_gpiote_pin_uninit+0x30>
    339e:	bf00      	nop
    33a0:	200000ec 	.word	0x200000ec
    33a4:	0bad0000 	.word	0x0bad0000
    33a8:	0bad0004 	.word	0x0bad0004

000033ac <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    33ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33b0:	4b4f      	ldr	r3, [pc, #316]	; (34f0 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    33b2:	4850      	ldr	r0, [pc, #320]	; (34f4 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33b4:	4950      	ldr	r1, [pc, #320]	; (34f8 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    33b6:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    33b8:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33ba:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33bc:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    33be:	b136      	cbz	r6, 33ce <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    33c0:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    33c4:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33c6:	bf1e      	ittt	ne
    33c8:	601c      	strne	r4, [r3, #0]
    33ca:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    33cc:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33ce:	3304      	adds	r3, #4
    33d0:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    33d2:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33d6:	d1f1      	bne.n	33bc <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33d8:	4b46      	ldr	r3, [pc, #280]	; (34f4 <nrfx_gpiote_irq_handler+0x148>)
    33da:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    33de:	b1bb      	cbz	r3, 3410 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    33e0:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    33e4:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    33e8:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    33ea:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    33ee:	af01      	add	r7, sp, #4
    33f0:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    33f4:	9c01      	ldr	r4, [sp, #4]
    33f6:	b98c      	cbnz	r4, 341c <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33f8:	4b3e      	ldr	r3, [pc, #248]	; (34f4 <nrfx_gpiote_irq_handler+0x148>)
    33fa:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    33fe:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3402:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3406:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3408:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    340c:	2b00      	cmp	r3, #0
    340e:	d1ee      	bne.n	33ee <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    3410:	2401      	movs	r4, #1
    while (mask)
    3412:	2d00      	cmp	r5, #0
    3414:	d153      	bne.n	34be <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3416:	b003      	add	sp, #12
    3418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    341c:	fa94 f4a4 	rbit	r4, r4
    3420:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3424:	4a35      	ldr	r2, [pc, #212]	; (34fc <nrfx_gpiote_irq_handler+0x150>)
    3426:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    342a:	08e0      	lsrs	r0, r4, #3
    342c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    3430:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    3432:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3436:	fa08 f202 	lsl.w	r2, r8, r2
    343a:	ea23 0302 	bic.w	r3, r3, r2
    343e:	543b      	strb	r3, [r7, r0]
    3440:	00a3      	lsls	r3, r4, #2
    3442:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    3446:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    344a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    344e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3450:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3452:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    3456:	d518      	bpl.n	348a <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    3458:	4659      	mov	r1, fp
    345a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    345c:	fa5f fa82 	uxtb.w	sl, r2
    3460:	f7ff fd2c 	bl	2ebc <call_handler>
    3464:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3468:	f3c3 4301 	ubfx	r3, r3, #16, #2
    346c:	459a      	cmp	sl, r3
    346e:	d107      	bne.n	3480 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3470:	2100      	movs	r1, #0
    3472:	4620      	mov	r0, r4
    3474:	f001 fde5 	bl	5042 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3478:	4651      	mov	r1, sl
    347a:	4620      	mov	r0, r4
    347c:	f001 fde1 	bl	5042 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3480:	fa08 f404 	lsl.w	r4, r8, r4
    3484:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    3488:	e7b4      	b.n	33f4 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    348a:	2a02      	cmp	r2, #2
    348c:	d10c      	bne.n	34a8 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    348e:	2103      	movs	r1, #3
    3490:	4620      	mov	r0, r4
    3492:	f001 fdd6 	bl	5042 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3496:	f00a 0305 	and.w	r3, sl, #5
    349a:	2b01      	cmp	r3, #1
    349c:	d1f0      	bne.n	3480 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    349e:	4659      	mov	r1, fp
    34a0:	4620      	mov	r0, r4
    34a2:	f7ff fd0b 	bl	2ebc <call_handler>
    34a6:	e7eb      	b.n	3480 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    34a8:	2102      	movs	r1, #2
    34aa:	4620      	mov	r0, r4
    34ac:	f001 fdc9 	bl	5042 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    34b0:	f1ba 0f03 	cmp.w	sl, #3
    34b4:	d0f3      	beq.n	349e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    34b6:	2a03      	cmp	r2, #3
    34b8:	d1e2      	bne.n	3480 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    34ba:	458a      	cmp	sl, r1
    34bc:	e7ee      	b.n	349c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    34be:	fa95 f3a5 	rbit	r3, r5
    34c2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    34c6:	fa04 f203 	lsl.w	r2, r4, r3
    34ca:	009b      	lsls	r3, r3, #2
    34cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    34d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    34d4:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    34d8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    34dc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    34e0:	f3c0 2004 	ubfx	r0, r0, #8, #5
    34e4:	f3c1 4101 	ubfx	r1, r1, #16, #2
    34e8:	f7ff fce8 	bl	2ebc <call_handler>
    34ec:	e791      	b.n	3412 <nrfx_gpiote_irq_handler+0x66>
    34ee:	bf00      	nop
    34f0:	40006100 	.word	0x40006100
    34f4:	40006000 	.word	0x40006000
    34f8:	40006120 	.word	0x40006120
    34fc:	200000ec 	.word	0x200000ec

00003500 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    3500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3502:	7906      	ldrb	r6, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3504:	4c52      	ldr	r4, [pc, #328]	; (3650 <nrfx_spi_init+0x150>)
    3506:	f04f 0c28 	mov.w	ip, #40	; 0x28
    350a:	fb0c fc06 	mul.w	ip, ip, r6
    350e:	eb04 070c 	add.w	r7, r4, ip
    3512:	7f3d      	ldrb	r5, [r7, #28]
    3514:	2d00      	cmp	r5, #0
    3516:	f040 8098 	bne.w	364a <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    351a:	6805      	ldr	r5, [r0, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    351c:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
    3520:	607b      	str	r3, [r7, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    3522:	7bcb      	ldrb	r3, [r1, #15]
    3524:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    3528:	78cb      	ldrb	r3, [r1, #3]
    352a:	77bb      	strb	r3, [r7, #30]
    p_cb->orc = p_config->orc;
    352c:	794b      	ldrb	r3, [r1, #5]
    352e:	77fb      	strb	r3, [r7, #31]
    if (!p_config->skip_gpio_cfg)
    3530:	7bcb      	ldrb	r3, [r1, #15]
    3532:	2b00      	cmp	r3, #0
    3534:	d149      	bne.n	35ca <nrfx_spi_init+0xca>
    *p_pin = pin_number & 0x1F;
    3536:	780f      	ldrb	r7, [r1, #0]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3538:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
    353a:	f007 071f 	and.w	r7, r7, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    353e:	40bb      	lsls	r3, r7
    if (value == 0)
    3540:	7b0f      	ldrb	r7, [r1, #12]
    3542:	2f01      	cmp	r7, #1
    3544:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3548:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    p_reg->OUTCLR = clr_mask;
    354c:	bf94      	ite	ls
    354e:	f8c7 350c 	strls.w	r3, [r7, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    3552:	f8c7 3508 	strhi.w	r3, [r7, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    3556:	780b      	ldrb	r3, [r1, #0]
    3558:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    355c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3560:	2701      	movs	r7, #1
    3562:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    3566:	784b      	ldrb	r3, [r1, #1]
    3568:	2bff      	cmp	r3, #255	; 0xff
    356a:	d00c      	beq.n	3586 <nrfx_spi_init+0x86>
    *p_pin = pin_number & 0x1F;
    356c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3570:	409f      	lsls	r7, r3
    p_reg->OUTCLR = clr_mask;
    3572:	f8cc 750c 	str.w	r7, [ip, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    3576:	784b      	ldrb	r3, [r1, #1]
    3578:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    357c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3580:	2703      	movs	r7, #3
    3582:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    3586:	788b      	ldrb	r3, [r1, #2]
    3588:	2bff      	cmp	r3, #255	; 0xff
    358a:	d009      	beq.n	35a0 <nrfx_spi_init+0xa0>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    358c:	7b8f      	ldrb	r7, [r1, #14]
    *p_pin = pin_number & 0x1F;
    358e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    3592:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3596:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    359a:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
    359c:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    35a0:	78cb      	ldrb	r3, [r1, #3]
    35a2:	2bff      	cmp	r3, #255	; 0xff
    35a4:	d011      	beq.n	35ca <nrfx_spi_init+0xca>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    35a6:	2701      	movs	r7, #1
    *p_pin = pin_number & 0x1F;
    35a8:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    35ac:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    35b0:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    35b4:	f04f 0c03 	mov.w	ip, #3
    p_reg->OUTSET = set_mask;
    35b8:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    35bc:	78cb      	ldrb	r3, [r1, #3]
    35be:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    35c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    35c6:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    35ca:	7c0b      	ldrb	r3, [r1, #16]
    35cc:	b99b      	cbnz	r3, 35f6 <nrfx_spi_init+0xf6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    35ce:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    35d0:	f891 c000 	ldrb.w	ip, [r1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    35d4:	2bff      	cmp	r3, #255	; 0xff
    35d6:	bf18      	it	ne
    35d8:	461f      	movne	r7, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    35da:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    35dc:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    35e0:	bf08      	it	eq
    35e2:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
                            : NRF_SPI_PIN_NOT_CONNECTED;
    35e6:	2bff      	cmp	r3, #255	; 0xff
    35e8:	bf08      	it	eq
    35ea:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
    35ee:	f8c5 750c 	str.w	r7, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
    35f2:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    35f6:	688b      	ldr	r3, [r1, #8]
    35f8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    35fc:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    35fe:	7b0f      	ldrb	r7, [r1, #12]
    3600:	3b00      	subs	r3, #0
    3602:	bf18      	it	ne
    3604:	2301      	movne	r3, #1
    switch (spi_mode)
    3606:	2f02      	cmp	r7, #2
    3608:	d019      	beq.n	363e <nrfx_spi_init+0x13e>
    360a:	2f03      	cmp	r7, #3
    360c:	d01a      	beq.n	3644 <nrfx_spi_init+0x144>
    360e:	2f01      	cmp	r7, #1
    3610:	d101      	bne.n	3616 <nrfx_spi_init+0x116>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    3612:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    3616:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    361a:	2301      	movs	r3, #1
    361c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    3620:	b122      	cbz	r2, 362c <nrfx_spi_init+0x12c>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3622:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    3624:	f340 3007 	sbfx	r0, r0, #12, #8
    3628:	f7fd fe76 	bl	1318 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    362c:	2328      	movs	r3, #40	; 0x28
    362e:	fb03 4406 	mla	r4, r3, r6, r4
    3632:	2300      	movs	r3, #0
    3634:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3636:	4807      	ldr	r0, [pc, #28]	; (3654 <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3638:	2301      	movs	r3, #1
    363a:	7723      	strb	r3, [r4, #28]
}
    363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    363e:	f043 0304 	orr.w	r3, r3, #4
        break;
    3642:	e7e8      	b.n	3616 <nrfx_spi_init+0x116>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    3644:	f043 0306 	orr.w	r3, r3, #6
        break;
    3648:	e7e5      	b.n	3616 <nrfx_spi_init+0x116>
        return err_code;
    364a:	4803      	ldr	r0, [pc, #12]	; (3658 <nrfx_spi_init+0x158>)
    364c:	e7f6      	b.n	363c <nrfx_spi_init+0x13c>
    364e:	bf00      	nop
    3650:	20000340 	.word	0x20000340
    3654:	0bad0000 	.word	0x0bad0000
    3658:	0bad0005 	.word	0x0bad0005

0000365c <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    365c:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    365e:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    3660:	4c26      	ldr	r4, [pc, #152]	; (36fc <nrfx_spi_uninit+0xa0>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    3662:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    3664:	2328      	movs	r3, #40	; 0x28
    3666:	4373      	muls	r3, r6
    3668:	58e3      	ldr	r3, [r4, r3]
    366a:	b133      	cbz	r3, 367a <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    366c:	f345 3007 	sbfx	r0, r5, #12, #8
    3670:	f7fd fe60 	bl	1334 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    3674:	2304      	movs	r3, #4
    3676:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    367a:	2300      	movs	r3, #0
    367c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    3680:	2328      	movs	r3, #40	; 0x28
    3682:	fb03 4306 	mla	r3, r3, r6, r4
    3686:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    368a:	bb83      	cbnz	r3, 36ee <nrfx_spi_uninit+0x92>
    return p_reg->PSEL.SCK;
    368c:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    3690:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    3694:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3698:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    369c:	2102      	movs	r1, #2
    369e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSEL.MISO;
    36a2:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    36a6:	1c58      	adds	r0, r3, #1
    *p_pin = pin_number & 0x1F;
    36a8:	bf1e      	ittt	ne
    36aa:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    36ae:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    36b2:	f842 1023 	strne.w	r1, [r2, r3, lsl #2]
    return p_reg->PSEL.MOSI;
    36b6:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        {
            nrf_gpio_cfg_default(miso_pin);
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    36ba:	1c5a      	adds	r2, r3, #1
    36bc:	d008      	beq.n	36d0 <nrfx_spi_uninit+0x74>
    *p_pin = pin_number & 0x1F;
    36be:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    36c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    36c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    36ca:	2102      	movs	r1, #2
    36cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        {
            nrf_gpio_cfg_default(mosi_pin);
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    36d0:	2328      	movs	r3, #40	; 0x28
    36d2:	fb03 4306 	mla	r3, r3, r6, r4
    36d6:	7f9b      	ldrb	r3, [r3, #30]
    36d8:	2bff      	cmp	r3, #255	; 0xff
    36da:	d008      	beq.n	36ee <nrfx_spi_uninit+0x92>
    *p_pin = pin_number & 0x1F;
    36dc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    36e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    36e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    36e8:	2102      	movs	r1, #2
    36ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    36ee:	2328      	movs	r3, #40	; 0x28
    36f0:	fb03 4406 	mla	r4, r3, r6, r4
    36f4:	2300      	movs	r3, #0
    36f6:	7723      	strb	r3, [r4, #28]
}
    36f8:	bd70      	pop	{r4, r5, r6, pc}
    36fa:	bf00      	nop
    36fc:	20000340 	.word	0x20000340

00003700 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    3700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3704:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    3706:	4e41      	ldr	r6, [pc, #260]	; (380c <nrfx_spi_xfer+0x10c>)
    3708:	2328      	movs	r3, #40	; 0x28
    370a:	437b      	muls	r3, r7
{
    370c:	4694      	mov	ip, r2
    if (p_cb->transfer_in_progress)
    370e:	18f2      	adds	r2, r6, r3
{
    3710:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    3712:	7f51      	ldrb	r1, [r2, #29]
{
    3714:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
    3716:	2900      	cmp	r1, #0
    3718:	d176      	bne.n	3808 <nrfx_spi_xfer+0x108>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    371a:	f856 8003 	ldr.w	r8, [r6, r3]
    371e:	f1b8 0f00 	cmp.w	r8, #0
    3722:	d001      	beq.n	3728 <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
    3724:	2301      	movs	r3, #1
    3726:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    3728:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    372c:	2428      	movs	r4, #40	; 0x28
    372e:	fb04 6407 	mla	r4, r4, r7, r6
    3732:	f104 090c 	add.w	r9, r4, #12
    3736:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
    373a:	2300      	movs	r3, #0
    373c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    3740:	7fa3      	ldrb	r3, [r4, #30]
    3742:	2bff      	cmp	r3, #255	; 0xff
    3744:	d008      	beq.n	3758 <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3746:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    3748:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    374c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    3750:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3754:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    3758:	2328      	movs	r3, #40	; 0x28
    375a:	f1bc 0f00 	cmp.w	ip, #0
    375e:	d006      	beq.n	376e <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
    3760:	fb03 6307 	mla	r3, r3, r7, r6
    3764:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    3766:	482a      	ldr	r0, [pc, #168]	; (3810 <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
    3768:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    376e:	f8de 4000 	ldr.w	r4, [lr]
    p_cb->bytes_transferred = 0;
    3772:	fb03 6307 	mla	r3, r3, r7, r6
    p_reg->INTENCLR = mask;
    3776:	2204      	movs	r2, #4
    3778:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    377c:	f8c3 c020 	str.w	ip, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3780:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
    3784:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
    3788:	686a      	ldr	r2, [r5, #4]
    378a:	b192      	cbz	r2, 37b2 <nrfx_spi_xfer+0xb2>
    378c:	682b      	ldr	r3, [r5, #0]
    378e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    3790:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    3794:	686b      	ldr	r3, [r5, #4]
    3796:	2b01      	cmp	r3, #1
    3798:	d90d      	bls.n	37b6 <nrfx_spi_xfer+0xb6>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    379a:	682b      	ldr	r3, [r5, #0]
    379c:	785b      	ldrb	r3, [r3, #1]
    379e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    37a2:	f1b8 0f00 	cmp.w	r8, #0
    37a6:	d00e      	beq.n	37c6 <nrfx_spi_xfer+0xc6>
    p_reg->INTENSET = mask;
    37a8:	2304      	movs	r3, #4
    37aa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    37ae:	4819      	ldr	r0, [pc, #100]	; (3814 <nrfx_spi_xfer+0x114>)
    37b0:	e7db      	b.n	376a <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
    37b2:	7fdb      	ldrb	r3, [r3, #31]
    37b4:	e7ec      	b.n	3790 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
    37b6:	68eb      	ldr	r3, [r5, #12]
    37b8:	2b01      	cmp	r3, #1
    37ba:	d9f2      	bls.n	37a2 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    37bc:	2328      	movs	r3, #40	; 0x28
    37be:	fb03 6307 	mla	r3, r3, r7, r6
    p_reg->TXD = data;
    37c2:	7fdb      	ldrb	r3, [r3, #31]
    37c4:	e7eb      	b.n	379e <nrfx_spi_xfer+0x9e>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    37c6:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    37ca:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    37ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    37d2:	2b00      	cmp	r3, #0
    37d4:	d0fb      	beq.n	37ce <nrfx_spi_xfer+0xce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37d6:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    37da:	4620      	mov	r0, r4
    37dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    37e0:	f001 fc3d 	bl	505e <transfer_byte>
    37e4:	2800      	cmp	r0, #0
    37e6:	d1f2      	bne.n	37ce <nrfx_spi_xfer+0xce>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    37e8:	2328      	movs	r3, #40	; 0x28
    37ea:	fb03 6607 	mla	r6, r3, r7, r6
    37ee:	7fb3      	ldrb	r3, [r6, #30]
    37f0:	2bff      	cmp	r3, #255	; 0xff
    37f2:	d0dc      	beq.n	37ae <nrfx_spi_xfer+0xae>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    37f4:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    37f6:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    37fa:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    37fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3802:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    3806:	e7d2      	b.n	37ae <nrfx_spi_xfer+0xae>
        return err_code;
    3808:	4803      	ldr	r0, [pc, #12]	; (3818 <nrfx_spi_xfer+0x118>)
    380a:	e7ae      	b.n	376a <nrfx_spi_xfer+0x6a>
    380c:	20000340 	.word	0x20000340
    3810:	0bad0003 	.word	0x0bad0003
    3814:	0bad0000 	.word	0x0bad0000
    3818:	0bad000b 	.word	0x0bad000b

0000381c <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
    381c:	b510      	push	{r4, lr}
    381e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3822:	2300      	movs	r3, #0
    3824:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
    3828:	490d      	ldr	r1, [pc, #52]	; (3860 <nrfx_spi_0_irq_handler+0x44>)
    382a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    382e:	f001 fc16 	bl	505e <transfer_byte>
    3832:	b9a0      	cbnz	r0, 385e <nrfx_spi_0_irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    3834:	7f8b      	ldrb	r3, [r1, #30]
    3836:	2bff      	cmp	r3, #255	; 0xff
    3838:	d008      	beq.n	384c <nrfx_spi_0_irq_handler+0x30>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    383a:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    383c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3840:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    3844:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3848:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    384c:	2300      	movs	r3, #0
    384e:	774b      	strb	r3, [r1, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    3850:	720b      	strb	r3, [r1, #8]
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
}
    3852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    3856:	e9d1 3100 	ldrd	r3, r1, [r1]
    385a:	4802      	ldr	r0, [pc, #8]	; (3864 <nrfx_spi_0_irq_handler+0x48>)
    385c:	4718      	bx	r3
}
    385e:	bd10      	pop	{r4, pc}
    3860:	20000340 	.word	0x20000340
    3864:	20000348 	.word	0x20000348

00003868 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3868:	4b0f      	ldr	r3, [pc, #60]	; (38a8 <z_sys_init_run_level+0x40>)
{
    386a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    386c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3870:	3001      	adds	r0, #1
    3872:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3876:	42a6      	cmp	r6, r4
    3878:	d800      	bhi.n	387c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    387a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    387c:	e9d4 3500 	ldrd	r3, r5, [r4]
    3880:	4628      	mov	r0, r5
    3882:	4798      	blx	r3
		if (dev != NULL) {
    3884:	b16d      	cbz	r5, 38a2 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    3886:	b138      	cbz	r0, 3898 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3888:	2800      	cmp	r0, #0
    388a:	bfb8      	it	lt
    388c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    388e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    3890:	28ff      	cmp	r0, #255	; 0xff
    3892:	bfa8      	it	ge
    3894:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    3896:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3898:	68ea      	ldr	r2, [r5, #12]
    389a:	7853      	ldrb	r3, [r2, #1]
    389c:	f043 0301 	orr.w	r3, r3, #1
    38a0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    38a2:	3408      	adds	r4, #8
    38a4:	e7e7      	b.n	3876 <z_sys_init_run_level+0xe>
    38a6:	bf00      	nop
    38a8:	0000561c 	.word	0x0000561c

000038ac <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    38ac:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    38ae:	4b0a      	ldr	r3, [pc, #40]	; (38d8 <bg_thread_main+0x2c>)
    38b0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    38b2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    38b4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    38b6:	f7ff ffd7 	bl	3868 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    38ba:	f000 fe0f 	bl	44dc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    38be:	2003      	movs	r0, #3
    38c0:	f7ff ffd2 	bl	3868 <z_sys_init_run_level>

	z_init_static_threads();
    38c4:	f000 f8ea 	bl	3a9c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    38c8:	f7fc fee4 	bl	694 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    38cc:	4a03      	ldr	r2, [pc, #12]	; (38dc <bg_thread_main+0x30>)
    38ce:	7b13      	ldrb	r3, [r2, #12]
    38d0:	f023 0301 	bic.w	r3, r3, #1
    38d4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    38d6:	bd08      	pop	{r3, pc}
    38d8:	200003a1 	.word	0x200003a1
    38dc:	20000200 	.word	0x20000200

000038e0 <z_bss_zero>:
{
    38e0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    38e2:	4803      	ldr	r0, [pc, #12]	; (38f0 <z_bss_zero+0x10>)
    38e4:	4a03      	ldr	r2, [pc, #12]	; (38f4 <z_bss_zero+0x14>)
    38e6:	2100      	movs	r1, #0
    38e8:	1a12      	subs	r2, r2, r0
    38ea:	f001 fc1d 	bl	5128 <z_early_memset>
}
    38ee:	bd08      	pop	{r3, pc}
    38f0:	20000160 	.word	0x20000160
    38f4:	200003a4 	.word	0x200003a4

000038f8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    38f8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    38fa:	2300      	movs	r3, #0
{
    38fc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    38fe:	2201      	movs	r2, #1
    3900:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    3904:	4e13      	ldr	r6, [pc, #76]	; (3954 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3906:	4d14      	ldr	r5, [pc, #80]	; (3958 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3908:	9301      	str	r3, [sp, #4]
    390a:	220f      	movs	r2, #15
    390c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3910:	4912      	ldr	r1, [pc, #72]	; (395c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3912:	2318      	movs	r3, #24
    3914:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3918:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    391c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    391e:	f44f 70a0 	mov.w	r0, #320	; 0x140
    3922:	fb00 1104 	mla	r1, r0, r4, r1
    3926:	4b0e      	ldr	r3, [pc, #56]	; (3960 <z_init_cpu+0x68>)
    3928:	9500      	str	r5, [sp, #0]
    392a:	f44f 7280 	mov.w	r2, #256	; 0x100
    392e:	4630      	mov	r0, r6
    3930:	f000 f882 	bl	3a38 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3934:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3936:	4a0b      	ldr	r2, [pc, #44]	; (3964 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3938:	60ee      	str	r6, [r5, #12]
    393a:	f023 0304 	bic.w	r3, r3, #4
    393e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3940:	f44f 6304 	mov.w	r3, #2112	; 0x840
    3944:	fb04 3303 	mla	r3, r4, r3, r3
    3948:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    394a:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    394c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    394e:	b006      	add	sp, #24
    3950:	bd70      	pop	{r4, r5, r6, pc}
    3952:	bf00      	nop
    3954:	20000180 	.word	0x20000180
    3958:	20000368 	.word	0x20000368
    395c:	20000c00 	.word	0x20000c00
    3960:	00003b55 	.word	0x00003b55
    3964:	200003c0 	.word	0x200003c0

00003968 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3968:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    396a:	4b2c      	ldr	r3, [pc, #176]	; (3a1c <z_cstart+0xb4>)
    396c:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    396e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3972:	4d2b      	ldr	r5, [pc, #172]	; (3a20 <z_cstart+0xb8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    3974:	4e2b      	ldr	r6, [pc, #172]	; (3a24 <z_cstart+0xbc>)
    3976:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3978:	4f2b      	ldr	r7, [pc, #172]	; (3a28 <z_cstart+0xc0>)
    397a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    397e:	2400      	movs	r4, #0
    3980:	616b      	str	r3, [r5, #20]
    3982:	23e0      	movs	r3, #224	; 0xe0
    3984:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3988:	77ec      	strb	r4, [r5, #31]
    398a:	762c      	strb	r4, [r5, #24]
    398c:	766c      	strb	r4, [r5, #25]
    398e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3990:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3992:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3996:	626b      	str	r3, [r5, #36]	; 0x24
    3998:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    399c:	f7fd fece 	bl	173c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    39a0:	f7fd fc9c 	bl	12dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    39a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    39a8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    39aa:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    39ac:	f7fd ffaa 	bl	1904 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    39b0:	f7fd ff10 	bl	17d4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    39b4:	f240 1301 	movw	r3, #257	; 0x101
    39b8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    39bc:	ab06      	add	r3, sp, #24
    39be:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    39c0:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    39c4:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    39c6:	f001 fb7d 	bl	50c4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    39ca:	4620      	mov	r0, r4
    39cc:	f7ff ff4c 	bl	3868 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    39d0:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    39d2:	4d16      	ldr	r5, [pc, #88]	; (3a2c <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    39d4:	f7ff ff48 	bl	3868 <z_sys_init_run_level>
	z_sched_init();
    39d8:	f000 fb18 	bl	400c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    39dc:	4b14      	ldr	r3, [pc, #80]	; (3a30 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
    39de:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    39e0:	9305      	str	r3, [sp, #20]
    39e2:	2301      	movs	r3, #1
    39e4:	4913      	ldr	r1, [pc, #76]	; (3a34 <z_cstart+0xcc>)
    39e6:	9400      	str	r4, [sp, #0]
    39e8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    39ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    39f0:	463b      	mov	r3, r7
    39f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    39f6:	4628      	mov	r0, r5
    39f8:	f000 f81e 	bl	3a38 <z_setup_new_thread>
    39fc:	7b6a      	ldrb	r2, [r5, #13]
    39fe:	4606      	mov	r6, r0
    3a00:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3a04:	4628      	mov	r0, r5
    3a06:	736a      	strb	r2, [r5, #13]
    3a08:	f001 fbfb 	bl	5202 <z_ready_thread>
	z_init_cpu(0);
    3a0c:	4620      	mov	r0, r4
    3a0e:	f7ff ff73 	bl	38f8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3a12:	463a      	mov	r2, r7
    3a14:	4631      	mov	r1, r6
    3a16:	4628      	mov	r0, r5
    3a18:	f7fd fd66 	bl	14e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3a1c:	20000c00 	.word	0x20000c00
    3a20:	e000ed00 	.word	0xe000ed00
    3a24:	20000368 	.word	0x20000368
    3a28:	000038ad 	.word	0x000038ad
    3a2c:	20000200 	.word	0x20000200
    3a30:	00005697 	.word	0x00005697
    3a34:	20000d40 	.word	0x20000d40

00003a38 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3a38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3a3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3a3e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3a40:	2604      	movs	r6, #4
    3a42:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3a44:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3a46:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3a48:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3a4c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a4e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3a50:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    3a56:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a58:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3a5c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3a5e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3a62:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    3a66:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3a68:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3a6a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a6c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a70:	9202      	str	r2, [sp, #8]
    3a72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3a74:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3a76:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3a7a:	9200      	str	r2, [sp, #0]
    3a7c:	4642      	mov	r2, r8
{
    3a7e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a80:	f7fd fd00 	bl	1484 <arch_new_thread>
	if (!_current) {
    3a84:	4b04      	ldr	r3, [pc, #16]	; (3a98 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    3a86:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3a88:	689b      	ldr	r3, [r3, #8]
    3a8a:	b103      	cbz	r3, 3a8e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3a8e:	6723      	str	r3, [r4, #112]	; 0x70
}
    3a90:	4640      	mov	r0, r8
    3a92:	b004      	add	sp, #16
    3a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a98:	20000368 	.word	0x20000368

00003a9c <z_init_static_threads>:
{
    3a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3aa0:	4c29      	ldr	r4, [pc, #164]	; (3b48 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3aa2:	4d2a      	ldr	r5, [pc, #168]	; (3b4c <z_init_static_threads+0xb0>)
{
    3aa4:	b087      	sub	sp, #28
    3aa6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3aa8:	42ae      	cmp	r6, r5
    3aaa:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3aae:	d30f      	bcc.n	3ad0 <z_init_static_threads+0x34>
	k_sched_lock();
    3ab0:	f000 fa7c 	bl	3fac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3ab4:	4c24      	ldr	r4, [pc, #144]	; (3b48 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3ab6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3b50 <z_init_static_threads+0xb4>
    3aba:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3abe:	f240 37e7 	movw	r7, #999	; 0x3e7
    3ac2:	42ac      	cmp	r4, r5
    3ac4:	d320      	bcc.n	3b08 <z_init_static_threads+0x6c>
}
    3ac6:	b007      	add	sp, #28
    3ac8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3acc:	f000 ba82 	b.w	3fd4 <k_sched_unlock>
		z_setup_new_thread(
    3ad0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3ad4:	9305      	str	r3, [sp, #20]
    3ad6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3ada:	9304      	str	r3, [sp, #16]
    3adc:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3ae0:	9303      	str	r3, [sp, #12]
    3ae2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3ae6:	9302      	str	r3, [sp, #8]
    3ae8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3aec:	9301      	str	r3, [sp, #4]
    3aee:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3af2:	9300      	str	r3, [sp, #0]
    3af4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3af8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3afc:	f7ff ff9c 	bl	3a38 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3b00:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3b04:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3b06:	e7ce      	b.n	3aa6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b0a:	1c5a      	adds	r2, r3, #1
    3b0c:	d00d      	beq.n	3b2a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3b0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3b12:	2100      	movs	r1, #0
    3b14:	4638      	mov	r0, r7
    3b16:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3b1a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3b1e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3b22:	d104      	bne.n	3b2e <z_init_static_threads+0x92>
	z_sched_start(thread);
    3b24:	4640      	mov	r0, r8
    3b26:	f000 f9f1 	bl	3f0c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3b2a:	3430      	adds	r4, #48	; 0x30
    3b2c:	e7c9      	b.n	3ac2 <z_init_static_threads+0x26>
    3b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3b32:	2300      	movs	r3, #0
    3b34:	f7fc fac0 	bl	b8 <__aeabi_uldivmod>
    3b38:	4602      	mov	r2, r0
    3b3a:	460b      	mov	r3, r1
    3b3c:	f108 0018 	add.w	r0, r8, #24
    3b40:	4649      	mov	r1, r9
    3b42:	f000 fbd9 	bl	42f8 <z_add_timeout>
    3b46:	e7f0      	b.n	3b2a <z_init_static_threads+0x8e>
    3b48:	20000160 	.word	0x20000160
    3b4c:	20000160 	.word	0x20000160
    3b50:	0000516f 	.word	0x0000516f

00003b54 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3b54:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3b56:	4c0b      	ldr	r4, [pc, #44]	; (3b84 <idle+0x30>)
	return !z_sys_post_kernel;
    3b58:	4d0b      	ldr	r5, [pc, #44]	; (3b88 <idle+0x34>)
	__asm__ volatile(
    3b5a:	f04f 0220 	mov.w	r2, #32
    3b5e:	f3ef 8311 	mrs	r3, BASEPRI
    3b62:	f382 8812 	msr	BASEPRI_MAX, r2
    3b66:	f3bf 8f6f 	isb	sy
    3b6a:	f001 fba2 	bl	52b2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3b6e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    3b70:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3b72:	b913      	cbnz	r3, 3b7a <idle+0x26>
	arch_cpu_idle();
    3b74:	f7fd fbb8 	bl	12e8 <arch_cpu_idle>
}
    3b78:	e7ef      	b.n	3b5a <idle+0x6>
    3b7a:	f7fd fae1 	bl	1140 <pm_system_suspend>
    3b7e:	2800      	cmp	r0, #0
    3b80:	d1eb      	bne.n	3b5a <idle+0x6>
    3b82:	e7f7      	b.n	3b74 <idle+0x20>
    3b84:	20000368 	.word	0x20000368
    3b88:	200003a1 	.word	0x200003a1

00003b8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3b8c:	b538      	push	{r3, r4, r5, lr}
    3b8e:	4604      	mov	r4, r0
    3b90:	f04f 0320 	mov.w	r3, #32
    3b94:	f3ef 8511 	mrs	r5, BASEPRI
    3b98:	f383 8812 	msr	BASEPRI_MAX, r3
    3b9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3ba0:	f001 fb3f 	bl	5222 <z_unpend_first_thread>

	if (thread != NULL) {
    3ba4:	b148      	cbz	r0, 3bba <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3ba6:	2200      	movs	r2, #0
    3ba8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3baa:	f001 fb2a 	bl	5202 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3bae:	4629      	mov	r1, r5
    3bb0:	4805      	ldr	r0, [pc, #20]	; (3bc8 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3bb6:	f000 b997 	b.w	3ee8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3bba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3bbe:	429a      	cmp	r2, r3
    3bc0:	bf18      	it	ne
    3bc2:	3301      	addne	r3, #1
    3bc4:	60a3      	str	r3, [r4, #8]
}
    3bc6:	e7f2      	b.n	3bae <z_impl_k_sem_give+0x22>
    3bc8:	200003a2 	.word	0x200003a2

00003bcc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3bcc:	b513      	push	{r0, r1, r4, lr}
    3bce:	f04f 0420 	mov.w	r4, #32
    3bd2:	f3ef 8111 	mrs	r1, BASEPRI
    3bd6:	f384 8812 	msr	BASEPRI_MAX, r4
    3bda:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3bde:	6884      	ldr	r4, [r0, #8]
    3be0:	b144      	cbz	r4, 3bf4 <z_impl_k_sem_take+0x28>
		sem->count--;
    3be2:	3c01      	subs	r4, #1
    3be4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3be6:	f381 8811 	msr	BASEPRI, r1
    3bea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3bee:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3bf0:	b002      	add	sp, #8
    3bf2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3bf4:	ea52 0403 	orrs.w	r4, r2, r3
    3bf8:	d106      	bne.n	3c08 <z_impl_k_sem_take+0x3c>
    3bfa:	f381 8811 	msr	BASEPRI, r1
    3bfe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3c02:	f06f 000f 	mvn.w	r0, #15
    3c06:	e7f3      	b.n	3bf0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3c08:	e9cd 2300 	strd	r2, r3, [sp]
    3c0c:	4602      	mov	r2, r0
    3c0e:	4802      	ldr	r0, [pc, #8]	; (3c18 <z_impl_k_sem_take+0x4c>)
    3c10:	f000 f956 	bl	3ec0 <z_pend_curr>
	return ret;
    3c14:	e7ec      	b.n	3bf0 <z_impl_k_sem_take+0x24>
    3c16:	bf00      	nop
    3c18:	200003a2 	.word	0x200003a2

00003c1c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    3c1c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    3c1e:	4d07      	ldr	r5, [pc, #28]	; (3c3c <z_reset_time_slice+0x20>)
    3c20:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    3c22:	b154      	cbz	r4, 3c3a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3c24:	f7fe fe84 	bl	2930 <sys_clock_elapsed>
    3c28:	4b05      	ldr	r3, [pc, #20]	; (3c40 <z_reset_time_slice+0x24>)
    3c2a:	4404      	add	r4, r0
    3c2c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3c2e:	6828      	ldr	r0, [r5, #0]
    3c30:	2100      	movs	r1, #0
	}
}
    3c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    3c36:	f001 bb4c 	b.w	52d2 <z_set_timeout_expiry>
}
    3c3a:	bd38      	pop	{r3, r4, r5, pc}
    3c3c:	20000398 	.word	0x20000398
    3c40:	20000368 	.word	0x20000368

00003c44 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3c44:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3c46:	4d0d      	ldr	r5, [pc, #52]	; (3c7c <update_cache+0x38>)
    3c48:	462b      	mov	r3, r5
    3c4a:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c4e:	429c      	cmp	r4, r3
    3c50:	d000      	beq.n	3c54 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3c52:	b904      	cbnz	r4, 3c56 <update_cache+0x12>
    3c54:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3c56:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3c58:	b938      	cbnz	r0, 3c6a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    3c5a:	7b5a      	ldrb	r2, [r3, #13]
    3c5c:	06d2      	lsls	r2, r2, #27
    3c5e:	d104      	bne.n	3c6a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3c60:	69a2      	ldr	r2, [r4, #24]
    3c62:	b912      	cbnz	r2, 3c6a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3c64:	89da      	ldrh	r2, [r3, #14]
    3c66:	2a7f      	cmp	r2, #127	; 0x7f
    3c68:	d805      	bhi.n	3c76 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3c6a:	429c      	cmp	r4, r3
    3c6c:	d002      	beq.n	3c74 <update_cache+0x30>
			z_reset_time_slice(thread);
    3c6e:	4620      	mov	r0, r4
    3c70:	f7ff ffd4 	bl	3c1c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3c74:	4623      	mov	r3, r4
    3c76:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3c78:	bd38      	pop	{r3, r4, r5, pc}
    3c7a:	bf00      	nop
    3c7c:	20000368 	.word	0x20000368

00003c80 <move_thread_to_end_of_prio_q>:
{
    3c80:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3c82:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3c86:	7b43      	ldrb	r3, [r0, #13]
    3c88:	2a00      	cmp	r2, #0
{
    3c8a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3c8c:	da04      	bge.n	3c98 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3c92:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3c94:	f001 fa59 	bl	514a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3c98:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    3c9a:	4a15      	ldr	r2, [pc, #84]	; (3cf0 <move_thread_to_end_of_prio_q+0x70>)
    3c9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3ca0:	4610      	mov	r0, r2
    3ca2:	734b      	strb	r3, [r1, #13]
    3ca4:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3ca8:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3caa:	4283      	cmp	r3, r0
    3cac:	bf08      	it	eq
    3cae:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3cb0:	b923      	cbnz	r3, 3cbc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3cb2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    3cb6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3cb8:	6251      	str	r1, [r2, #36]	; 0x24
}
    3cba:	e00c      	b.n	3cd6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    3cbc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3cc0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3cc4:	42b5      	cmp	r5, r6
    3cc6:	d00e      	beq.n	3ce6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3cc8:	42ae      	cmp	r6, r5
    3cca:	dd0c      	ble.n	3ce6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3ccc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3cce:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3cd2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3cd4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3cd6:	6890      	ldr	r0, [r2, #8]
    3cd8:	1a43      	subs	r3, r0, r1
    3cda:	4258      	negs	r0, r3
}
    3cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3ce0:	4158      	adcs	r0, r3
    3ce2:	f7ff bfaf 	b.w	3c44 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3ce6:	429c      	cmp	r4, r3
    3ce8:	d0e3      	beq.n	3cb2 <move_thread_to_end_of_prio_q+0x32>
    3cea:	681b      	ldr	r3, [r3, #0]
    3cec:	e7e0      	b.n	3cb0 <move_thread_to_end_of_prio_q+0x30>
    3cee:	bf00      	nop
    3cf0:	20000368 	.word	0x20000368

00003cf4 <ready_thread>:
{
    3cf4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3cf6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3cfa:	7b42      	ldrb	r2, [r0, #13]
    3cfc:	2b00      	cmp	r3, #0
    3cfe:	db29      	blt.n	3d54 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3d00:	06d3      	lsls	r3, r2, #27
    3d02:	d127      	bne.n	3d54 <ready_thread+0x60>
	return node->next != NULL;
    3d04:	6983      	ldr	r3, [r0, #24]
    3d06:	bb2b      	cbnz	r3, 3d54 <ready_thread+0x60>
	return list->head == list;
    3d08:	4913      	ldr	r1, [pc, #76]	; (3d58 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3d0e:	7342      	strb	r2, [r0, #13]
    3d10:	460a      	mov	r2, r1
    3d12:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d16:	4294      	cmp	r4, r2
    3d18:	bf18      	it	ne
    3d1a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    3d1c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3d1e:	b923      	cbnz	r3, 3d2a <ready_thread+0x36>
	node->prev = tail;
    3d20:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3d24:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3d26:	6248      	str	r0, [r1, #36]	; 0x24
}
    3d28:	e00c      	b.n	3d44 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    3d2a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3d2e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3d32:	42b5      	cmp	r5, r6
    3d34:	d00a      	beq.n	3d4c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3d36:	42ae      	cmp	r6, r5
    3d38:	dd08      	ble.n	3d4c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    3d3a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3d3c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3d40:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3d42:	6058      	str	r0, [r3, #4]
}
    3d44:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3d46:	2000      	movs	r0, #0
    3d48:	f7ff bf7c 	b.w	3c44 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3d4c:	42a3      	cmp	r3, r4
    3d4e:	d0e7      	beq.n	3d20 <ready_thread+0x2c>
    3d50:	681b      	ldr	r3, [r3, #0]
    3d52:	e7e4      	b.n	3d1e <ready_thread+0x2a>
}
    3d54:	bc70      	pop	{r4, r5, r6}
    3d56:	4770      	bx	lr
    3d58:	20000368 	.word	0x20000368

00003d5c <unready_thread>:
{
    3d5c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3d5e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3d62:	7b43      	ldrb	r3, [r0, #13]
    3d64:	2a00      	cmp	r2, #0
{
    3d66:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3d68:	da04      	bge.n	3d74 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3d6e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3d70:	f001 f9eb 	bl	514a <sys_dlist_remove>
	update_cache(thread == _current);
    3d74:	4b04      	ldr	r3, [pc, #16]	; (3d88 <unready_thread+0x2c>)
    3d76:	6898      	ldr	r0, [r3, #8]
    3d78:	1a43      	subs	r3, r0, r1
    3d7a:	4258      	negs	r0, r3
    3d7c:	4158      	adcs	r0, r3
}
    3d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3d82:	f7ff bf5f 	b.w	3c44 <update_cache>
    3d86:	bf00      	nop
    3d88:	20000368 	.word	0x20000368

00003d8c <pend>:
{
    3d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d90:	4606      	mov	r6, r0
    3d92:	4615      	mov	r5, r2
    3d94:	461c      	mov	r4, r3
	__asm__ volatile(
    3d96:	f04f 0320 	mov.w	r3, #32
    3d9a:	f3ef 8711 	mrs	r7, BASEPRI
    3d9e:	f383 8812 	msr	BASEPRI_MAX, r3
    3da2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3da6:	f001 fa04 	bl	51b2 <add_to_waitq_locked>
	__asm__ volatile(
    3daa:	f387 8811 	msr	BASEPRI, r7
    3dae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3db2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3db6:	bf08      	it	eq
    3db8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    3dbc:	d008      	beq.n	3dd0 <pend+0x44>
    3dbe:	462a      	mov	r2, r5
    3dc0:	4623      	mov	r3, r4
    3dc2:	f106 0018 	add.w	r0, r6, #24
    3dc6:	4903      	ldr	r1, [pc, #12]	; (3dd4 <pend+0x48>)
}
    3dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3dcc:	f000 ba94 	b.w	42f8 <z_add_timeout>
    3dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dd4:	0000516f 	.word	0x0000516f

00003dd8 <k_sched_time_slice_set>:
{
    3dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dda:	4604      	mov	r4, r0
    3ddc:	460d      	mov	r5, r1
	__asm__ volatile(
    3dde:	f04f 0320 	mov.w	r3, #32
    3de2:	f3ef 8711 	mrs	r7, BASEPRI
    3de6:	f383 8812 	msr	BASEPRI_MAX, r3
    3dea:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    3dee:	2600      	movs	r6, #0
    3df0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    3df4:	f240 30e7 	movw	r0, #999	; 0x3e7
    3df8:	4631      	mov	r1, r6
    3dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3dfe:	2300      	movs	r3, #0
    3e00:	fbe4 010c 	umlal	r0, r1, r4, ip
    3e04:	f7fc f958 	bl	b8 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3e08:	42b4      	cmp	r4, r6
    3e0a:	dd02      	ble.n	3e12 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    3e0c:	2802      	cmp	r0, #2
    3e0e:	bfb8      	it	lt
    3e10:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3e12:	4a07      	ldr	r2, [pc, #28]	; (3e30 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    3e14:	4b07      	ldr	r3, [pc, #28]	; (3e34 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3e16:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    3e18:	4a07      	ldr	r2, [pc, #28]	; (3e38 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    3e1a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    3e1c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    3e1e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    3e20:	f7ff fefc 	bl	3c1c <z_reset_time_slice>
	__asm__ volatile(
    3e24:	f387 8811 	msr	BASEPRI, r7
    3e28:	f3bf 8f6f 	isb	sy
}
    3e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e2e:	bf00      	nop
    3e30:	20000398 	.word	0x20000398
    3e34:	20000368 	.word	0x20000368
    3e38:	20000394 	.word	0x20000394

00003e3c <z_time_slice>:
{
    3e3c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3e3e:	f04f 0320 	mov.w	r3, #32
    3e42:	f3ef 8511 	mrs	r5, BASEPRI
    3e46:	f383 8812 	msr	BASEPRI_MAX, r3
    3e4a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3e4e:	4b17      	ldr	r3, [pc, #92]	; (3eac <z_time_slice+0x70>)
    3e50:	4a17      	ldr	r2, [pc, #92]	; (3eb0 <z_time_slice+0x74>)
    3e52:	689c      	ldr	r4, [r3, #8]
    3e54:	6811      	ldr	r1, [r2, #0]
    3e56:	428c      	cmp	r4, r1
    3e58:	d107      	bne.n	3e6a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    3e5a:	4620      	mov	r0, r4
    3e5c:	f7ff fede 	bl	3c1c <z_reset_time_slice>
	__asm__ volatile(
    3e60:	f385 8811 	msr	BASEPRI, r5
    3e64:	f3bf 8f6f 	isb	sy
}
    3e68:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3e6a:	2100      	movs	r1, #0
    3e6c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    3e6e:	4a11      	ldr	r2, [pc, #68]	; (3eb4 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    3e70:	6812      	ldr	r2, [r2, #0]
    3e72:	b1c2      	cbz	r2, 3ea6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3e74:	89e2      	ldrh	r2, [r4, #14]
    3e76:	2a7f      	cmp	r2, #127	; 0x7f
    3e78:	d815      	bhi.n	3ea6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3e7a:	7b62      	ldrb	r2, [r4, #13]
    3e7c:	06d2      	lsls	r2, r2, #27
    3e7e:	d112      	bne.n	3ea6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3e80:	4a0d      	ldr	r2, [pc, #52]	; (3eb8 <z_time_slice+0x7c>)
    3e82:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3e86:	6812      	ldr	r2, [r2, #0]
    3e88:	4291      	cmp	r1, r2
    3e8a:	db0c      	blt.n	3ea6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3e8c:	4a0b      	ldr	r2, [pc, #44]	; (3ebc <z_time_slice+0x80>)
    3e8e:	4294      	cmp	r4, r2
    3e90:	d009      	beq.n	3ea6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3e92:	691a      	ldr	r2, [r3, #16]
    3e94:	4282      	cmp	r2, r0
    3e96:	dc03      	bgt.n	3ea0 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    3e98:	4620      	mov	r0, r4
    3e9a:	f7ff fef1 	bl	3c80 <move_thread_to_end_of_prio_q>
    3e9e:	e7dc      	b.n	3e5a <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    3ea0:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    3ea2:	611a      	str	r2, [r3, #16]
    3ea4:	e7dc      	b.n	3e60 <z_time_slice+0x24>
    3ea6:	2200      	movs	r2, #0
    3ea8:	e7fb      	b.n	3ea2 <z_time_slice+0x66>
    3eaa:	bf00      	nop
    3eac:	20000368 	.word	0x20000368
    3eb0:	20000390 	.word	0x20000390
    3eb4:	20000398 	.word	0x20000398
    3eb8:	20000394 	.word	0x20000394
    3ebc:	20000180 	.word	0x20000180

00003ec0 <z_pend_curr>:
{
    3ec0:	b510      	push	{r4, lr}
	pending_current = _current;
    3ec2:	4b07      	ldr	r3, [pc, #28]	; (3ee0 <z_pend_curr+0x20>)
    3ec4:	6898      	ldr	r0, [r3, #8]
    3ec6:	4b07      	ldr	r3, [pc, #28]	; (3ee4 <z_pend_curr+0x24>)
{
    3ec8:	460c      	mov	r4, r1
	pending_current = _current;
    3eca:	6018      	str	r0, [r3, #0]
{
    3ecc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    3ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3ed2:	f7ff ff5b 	bl	3d8c <pend>
	ret = arch_swap(key);
    3ed6:	4620      	mov	r0, r4
}
    3ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3edc:	f7fd ba7e 	b.w	13dc <arch_swap>
    3ee0:	20000368 	.word	0x20000368
    3ee4:	20000390 	.word	0x20000390

00003ee8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3ee8:	b949      	cbnz	r1, 3efe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3eea:	f3ef 8005 	mrs	r0, IPSR
    3eee:	b930      	cbnz	r0, 3efe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3ef0:	4b05      	ldr	r3, [pc, #20]	; (3f08 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3ef2:	69da      	ldr	r2, [r3, #28]
    3ef4:	689b      	ldr	r3, [r3, #8]
    3ef6:	429a      	cmp	r2, r3
    3ef8:	d001      	beq.n	3efe <z_reschedule+0x16>
    3efa:	f7fd ba6f 	b.w	13dc <arch_swap>
    3efe:	f381 8811 	msr	BASEPRI, r1
    3f02:	f3bf 8f6f 	isb	sy
}
    3f06:	4770      	bx	lr
    3f08:	20000368 	.word	0x20000368

00003f0c <z_sched_start>:
{
    3f0c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f0e:	f04f 0220 	mov.w	r2, #32
    3f12:	f3ef 8411 	mrs	r4, BASEPRI
    3f16:	f382 8812 	msr	BASEPRI_MAX, r2
    3f1a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3f1e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3f20:	0751      	lsls	r1, r2, #29
    3f22:	d404      	bmi.n	3f2e <z_sched_start+0x22>
	__asm__ volatile(
    3f24:	f384 8811 	msr	BASEPRI, r4
    3f28:	f3bf 8f6f 	isb	sy
}
    3f2c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3f2e:	f022 0204 	bic.w	r2, r2, #4
    3f32:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3f34:	f7ff fede 	bl	3cf4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3f38:	4621      	mov	r1, r4
    3f3a:	4802      	ldr	r0, [pc, #8]	; (3f44 <z_sched_start+0x38>)
}
    3f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3f40:	f7ff bfd2 	b.w	3ee8 <z_reschedule>
    3f44:	200003a2 	.word	0x200003a2

00003f48 <z_impl_k_thread_suspend>:
{
    3f48:	b570      	push	{r4, r5, r6, lr}
    3f4a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f4c:	3018      	adds	r0, #24
    3f4e:	f001 f99a 	bl	5286 <z_abort_timeout>
	__asm__ volatile(
    3f52:	f04f 0320 	mov.w	r3, #32
    3f56:	f3ef 8611 	mrs	r6, BASEPRI
    3f5a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f5e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3f62:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    3f66:	7b63      	ldrb	r3, [r4, #13]
    3f68:	2a00      	cmp	r2, #0
    3f6a:	da05      	bge.n	3f78 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f70:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f72:	4620      	mov	r0, r4
    3f74:	f001 f8e9 	bl	514a <sys_dlist_remove>
		update_cache(thread == _current);
    3f78:	4d0b      	ldr	r5, [pc, #44]	; (3fa8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3f7a:	7b63      	ldrb	r3, [r4, #13]
    3f7c:	68a8      	ldr	r0, [r5, #8]
    3f7e:	f043 0310 	orr.w	r3, r3, #16
    3f82:	7363      	strb	r3, [r4, #13]
    3f84:	1b03      	subs	r3, r0, r4
    3f86:	4258      	negs	r0, r3
    3f88:	4158      	adcs	r0, r3
    3f8a:	f7ff fe5b 	bl	3c44 <update_cache>
	__asm__ volatile(
    3f8e:	f386 8811 	msr	BASEPRI, r6
    3f92:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3f96:	68ab      	ldr	r3, [r5, #8]
    3f98:	42a3      	cmp	r3, r4
    3f9a:	d103      	bne.n	3fa4 <z_impl_k_thread_suspend+0x5c>
}
    3f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3fa0:	f001 b967 	b.w	5272 <z_reschedule_unlocked>
}
    3fa4:	bd70      	pop	{r4, r5, r6, pc}
    3fa6:	bf00      	nop
    3fa8:	20000368 	.word	0x20000368

00003fac <k_sched_lock>:
	__asm__ volatile(
    3fac:	f04f 0320 	mov.w	r3, #32
    3fb0:	f3ef 8111 	mrs	r1, BASEPRI
    3fb4:	f383 8812 	msr	BASEPRI_MAX, r3
    3fb8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3fbc:	4b04      	ldr	r3, [pc, #16]	; (3fd0 <k_sched_lock+0x24>)
    3fbe:	689a      	ldr	r2, [r3, #8]
    3fc0:	7bd3      	ldrb	r3, [r2, #15]
    3fc2:	3b01      	subs	r3, #1
    3fc4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3fc6:	f381 8811 	msr	BASEPRI, r1
    3fca:	f3bf 8f6f 	isb	sy
}
    3fce:	4770      	bx	lr
    3fd0:	20000368 	.word	0x20000368

00003fd4 <k_sched_unlock>:
{
    3fd4:	b510      	push	{r4, lr}
	__asm__ volatile(
    3fd6:	f04f 0320 	mov.w	r3, #32
    3fda:	f3ef 8411 	mrs	r4, BASEPRI
    3fde:	f383 8812 	msr	BASEPRI_MAX, r3
    3fe2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3fe6:	4b08      	ldr	r3, [pc, #32]	; (4008 <k_sched_unlock+0x34>)
    3fe8:	689a      	ldr	r2, [r3, #8]
    3fea:	7bd3      	ldrb	r3, [r2, #15]
    3fec:	3301      	adds	r3, #1
    3fee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3ff0:	2000      	movs	r0, #0
    3ff2:	f7ff fe27 	bl	3c44 <update_cache>
	__asm__ volatile(
    3ff6:	f384 8811 	msr	BASEPRI, r4
    3ffa:	f3bf 8f6f 	isb	sy
}
    3ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4002:	f001 b936 	b.w	5272 <z_reschedule_unlocked>
    4006:	bf00      	nop
    4008:	20000368 	.word	0x20000368

0000400c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    400c:	4b04      	ldr	r3, [pc, #16]	; (4020 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    400e:	2100      	movs	r1, #0
    4010:	f103 0220 	add.w	r2, r3, #32
    4014:	4608      	mov	r0, r1
	list->tail = (sys_dnode_t *)list;
    4016:	e9c3 2208 	strd	r2, r2, [r3, #32]
    401a:	f7ff bedd 	b.w	3dd8 <k_sched_time_slice_set>
    401e:	bf00      	nop
    4020:	20000368 	.word	0x20000368

00004024 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    4024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4026:	f04f 0320 	mov.w	r3, #32
    402a:	f3ef 8511 	mrs	r5, BASEPRI
    402e:	f383 8812 	msr	BASEPRI_MAX, r3
    4032:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4036:	4919      	ldr	r1, [pc, #100]	; (409c <z_impl_k_yield+0x78>)
    4038:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    403a:	7b43      	ldrb	r3, [r0, #13]
    403c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4040:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4042:	f001 f882 	bl	514a <sys_dlist_remove>
	}
	queue_thread(_current);
    4046:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4048:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    404a:	4608      	mov	r0, r1
    404c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4050:	735a      	strb	r2, [r3, #13]
    4052:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    4056:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4058:	4282      	cmp	r2, r0
    405a:	bf08      	it	eq
    405c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    405e:	b922      	cbnz	r2, 406a <z_impl_k_yield+0x46>
	node->prev = tail;
    4060:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    4064:	6023      	str	r3, [r4, #0]
	list->tail = node;
    4066:	624b      	str	r3, [r1, #36]	; 0x24
}
    4068:	e00c      	b.n	4084 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    406a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    406e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    4072:	42be      	cmp	r6, r7
    4074:	d00e      	beq.n	4094 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4076:	42b7      	cmp	r7, r6
    4078:	dd0c      	ble.n	4094 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    407a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    407c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4080:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4082:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4084:	2001      	movs	r0, #1
    4086:	f7ff fddd 	bl	3c44 <update_cache>
    408a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    408c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4090:	f7fd b9a4 	b.w	13dc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4094:	42a2      	cmp	r2, r4
    4096:	d0e3      	beq.n	4060 <z_impl_k_yield+0x3c>
    4098:	6812      	ldr	r2, [r2, #0]
    409a:	e7e0      	b.n	405e <z_impl_k_yield+0x3a>
    409c:	20000368 	.word	0x20000368

000040a0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    40a0:	ea50 0301 	orrs.w	r3, r0, r1
{
    40a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40a8:	4605      	mov	r5, r0
    40aa:	460e      	mov	r6, r1
	if (ticks == 0) {
    40ac:	d103      	bne.n	40b6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    40ae:	f7ff ffb9 	bl	4024 <z_impl_k_yield>
		k_yield();
		return 0;
    40b2:	2000      	movs	r0, #0
    40b4:	e02c      	b.n	4110 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    40b6:	1c83      	adds	r3, r0, #2
    40b8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    40bc:	db2a      	blt.n	4114 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    40be:	f001 f924 	bl	530a <sys_clock_tick_get_32>
    40c2:	1944      	adds	r4, r0, r5
    40c4:	f04f 0320 	mov.w	r3, #32
    40c8:	f3ef 8811 	mrs	r8, BASEPRI
    40cc:	f383 8812 	msr	BASEPRI_MAX, r3
    40d0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    40d4:	4f11      	ldr	r7, [pc, #68]	; (411c <z_tick_sleep+0x7c>)
    40d6:	4b12      	ldr	r3, [pc, #72]	; (4120 <z_tick_sleep+0x80>)
    40d8:	68b8      	ldr	r0, [r7, #8]
    40da:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    40dc:	f7ff fe3e 	bl	3d5c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    40e0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    40e2:	4910      	ldr	r1, [pc, #64]	; (4124 <z_tick_sleep+0x84>)
    40e4:	462a      	mov	r2, r5
    40e6:	4633      	mov	r3, r6
    40e8:	3018      	adds	r0, #24
    40ea:	f000 f905 	bl	42f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    40ee:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    40f0:	7b53      	ldrb	r3, [r2, #13]
    40f2:	f043 0310 	orr.w	r3, r3, #16
    40f6:	7353      	strb	r3, [r2, #13]
    40f8:	4640      	mov	r0, r8
    40fa:	f7fd f96f 	bl	13dc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    40fe:	f001 f904 	bl	530a <sys_clock_tick_get_32>
    4102:	1a20      	subs	r0, r4, r0
    4104:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4108:	2801      	cmp	r0, #1
    410a:	f173 0300 	sbcs.w	r3, r3, #0
    410e:	dbd0      	blt.n	40b2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    4110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4114:	f06f 0401 	mvn.w	r4, #1
    4118:	1a24      	subs	r4, r4, r0
    411a:	e7d3      	b.n	40c4 <z_tick_sleep+0x24>
    411c:	20000368 	.word	0x20000368
    4120:	20000390 	.word	0x20000390
    4124:	0000516f 	.word	0x0000516f

00004128 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4128:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    412c:	bf08      	it	eq
    412e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4132:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4134:	d106      	bne.n	4144 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4136:	4b08      	ldr	r3, [pc, #32]	; (4158 <z_impl_k_sleep+0x30>)
    4138:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    413a:	f7ff ff05 	bl	3f48 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    413e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4142:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4144:	f7ff ffac 	bl	40a0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    414c:	fb80 0303 	smull	r0, r3, r0, r3
    4150:	0bc0      	lsrs	r0, r0, #15
    4152:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4156:	e7f4      	b.n	4142 <z_impl_k_sleep+0x1a>
    4158:	20000368 	.word	0x20000368

0000415c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    415c:	4b01      	ldr	r3, [pc, #4]	; (4164 <z_impl_z_current_get+0x8>)
    415e:	6898      	ldr	r0, [r3, #8]
    4160:	4770      	bx	lr
    4162:	bf00      	nop
    4164:	20000368 	.word	0x20000368

00004168 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    416c:	4604      	mov	r4, r0
    416e:	f04f 0320 	mov.w	r3, #32
    4172:	f3ef 8611 	mrs	r6, BASEPRI
    4176:	f383 8812 	msr	BASEPRI_MAX, r3
    417a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    417e:	7b03      	ldrb	r3, [r0, #12]
    4180:	07d9      	lsls	r1, r3, #31
    4182:	d50b      	bpl.n	419c <z_thread_abort+0x34>
	__asm__ volatile(
    4184:	f386 8811 	msr	BASEPRI, r6
    4188:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    418c:	4040      	eors	r0, r0
    418e:	f380 8811 	msr	BASEPRI, r0
    4192:	f04f 0004 	mov.w	r0, #4
    4196:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    419c:	7b43      	ldrb	r3, [r0, #13]
    419e:	071a      	lsls	r2, r3, #28
    41a0:	d504      	bpl.n	41ac <z_thread_abort+0x44>
    41a2:	f386 8811 	msr	BASEPRI, r6
    41a6:	f3bf 8f6f 	isb	sy
    41aa:	e7f5      	b.n	4198 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    41ac:	f023 0220 	bic.w	r2, r3, #32
    41b0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    41b4:	09d2      	lsrs	r2, r2, #7
    41b6:	d120      	bne.n	41fa <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    41b8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    41ba:	68a3      	ldr	r3, [r4, #8]
    41bc:	b113      	cbz	r3, 41c4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    41be:	4620      	mov	r0, r4
    41c0:	f000 ffcb 	bl	515a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    41c4:	f104 0018 	add.w	r0, r4, #24
    41c8:	f001 f85d 	bl	5286 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    41cc:	f104 0758 	add.w	r7, r4, #88	; 0x58
    41d0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    41d4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41d6:	42bd      	cmp	r5, r7
    41d8:	d000      	beq.n	41dc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    41da:	b9b5      	cbnz	r5, 420a <z_thread_abort+0xa2>
		update_cache(1);
    41dc:	2001      	movs	r0, #1
    41de:	f7ff fd31 	bl	3c44 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    41e2:	4b10      	ldr	r3, [pc, #64]	; (4224 <z_thread_abort+0xbc>)
    41e4:	689b      	ldr	r3, [r3, #8]
    41e6:	42a3      	cmp	r3, r4
    41e8:	d1db      	bne.n	41a2 <z_thread_abort+0x3a>
    41ea:	f3ef 8305 	mrs	r3, IPSR
    41ee:	2b00      	cmp	r3, #0
    41f0:	d1d7      	bne.n	41a2 <z_thread_abort+0x3a>
    41f2:	4630      	mov	r0, r6
    41f4:	f7fd f8f2 	bl	13dc <arch_swap>
	return ret;
    41f8:	e7d3      	b.n	41a2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41fa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    41fe:	f043 0308 	orr.w	r3, r3, #8
    4202:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4204:	f000 ffa1 	bl	514a <sys_dlist_remove>
}
    4208:	e7d7      	b.n	41ba <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    420a:	4628      	mov	r0, r5
    420c:	f000 ffa5 	bl	515a <unpend_thread_no_timeout>
    4210:	f105 0018 	add.w	r0, r5, #24
    4214:	f001 f837 	bl	5286 <z_abort_timeout>
    4218:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    421c:	4628      	mov	r0, r5
    421e:	f7ff fd69 	bl	3cf4 <ready_thread>
    4222:	e7d7      	b.n	41d4 <z_thread_abort+0x6c>
    4224:	20000368 	.word	0x20000368

00004228 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4228:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    422a:	4806      	ldr	r0, [pc, #24]	; (4244 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    422c:	4a06      	ldr	r2, [pc, #24]	; (4248 <z_data_copy+0x20>)
    422e:	4907      	ldr	r1, [pc, #28]	; (424c <z_data_copy+0x24>)
    4230:	1a12      	subs	r2, r2, r0
    4232:	f000 ff7b 	bl	512c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    423a:	4a05      	ldr	r2, [pc, #20]	; (4250 <z_data_copy+0x28>)
    423c:	4905      	ldr	r1, [pc, #20]	; (4254 <z_data_copy+0x2c>)
    423e:	4806      	ldr	r0, [pc, #24]	; (4258 <z_data_copy+0x30>)
    4240:	f000 bf74 	b.w	512c <z_early_memcpy>
    4244:	20000000 	.word	0x20000000
    4248:	20000160 	.word	0x20000160
    424c:	000056c4 	.word	0x000056c4
    4250:	00000000 	.word	0x00000000
    4254:	000056c4 	.word	0x000056c4
    4258:	20000000 	.word	0x20000000

0000425c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    425c:	4b03      	ldr	r3, [pc, #12]	; (426c <elapsed+0x10>)
    425e:	681b      	ldr	r3, [r3, #0]
    4260:	b90b      	cbnz	r3, 4266 <elapsed+0xa>
    4262:	f7fe bb65 	b.w	2930 <sys_clock_elapsed>
}
    4266:	2000      	movs	r0, #0
    4268:	4770      	bx	lr
    426a:	bf00      	nop
    426c:	2000039c 	.word	0x2000039c

00004270 <next_timeout>:

static int32_t next_timeout(void)
{
    4270:	b510      	push	{r4, lr}
	return list->head == list;
    4272:	4b11      	ldr	r3, [pc, #68]	; (42b8 <next_timeout+0x48>)
    4274:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4276:	429c      	cmp	r4, r3
    4278:	d10a      	bne.n	4290 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    427a:	f7ff ffef 	bl	425c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    427e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4282:	4b0e      	ldr	r3, [pc, #56]	; (42bc <next_timeout+0x4c>)
    4284:	691b      	ldr	r3, [r3, #16]
    4286:	b113      	cbz	r3, 428e <next_timeout+0x1e>
    4288:	4298      	cmp	r0, r3
    428a:	bfa8      	it	ge
    428c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    428e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    4290:	f7ff ffe4 	bl	425c <elapsed>
	if ((to == NULL) ||
    4294:	2c00      	cmp	r4, #0
    4296:	d0f2      	beq.n	427e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4298:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    429c:	1a1b      	subs	r3, r3, r0
    429e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    42a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    42a6:	f172 0100 	sbcs.w	r1, r2, #0
    42aa:	dae8      	bge.n	427e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    42ac:	2a00      	cmp	r2, #0
    42ae:	bfac      	ite	ge
    42b0:	4618      	movge	r0, r3
    42b2:	2000      	movlt	r0, #0
    42b4:	e7e5      	b.n	4282 <next_timeout+0x12>
    42b6:	bf00      	nop
    42b8:	20000148 	.word	0x20000148
    42bc:	20000368 	.word	0x20000368

000042c0 <remove_timeout>:
{
    42c0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42c2:	b170      	cbz	r0, 42e2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    42c4:	4b0b      	ldr	r3, [pc, #44]	; (42f4 <remove_timeout+0x34>)
    42c6:	685b      	ldr	r3, [r3, #4]
    42c8:	4298      	cmp	r0, r3
    42ca:	d00a      	beq.n	42e2 <remove_timeout+0x22>
    42cc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    42ce:	b143      	cbz	r3, 42e2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    42d0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    42d4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    42d8:	1912      	adds	r2, r2, r4
    42da:	eb41 0105 	adc.w	r1, r1, r5
    42de:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    42e2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    42e6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    42e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    42ea:	2300      	movs	r3, #0
	node->prev = NULL;
    42ec:	e9c0 3300 	strd	r3, r3, [r0]
}
    42f0:	bd30      	pop	{r4, r5, pc}
    42f2:	bf00      	nop
    42f4:	20000148 	.word	0x20000148

000042f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    42f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    42fc:	bf08      	it	eq
    42fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    4302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4304:	4604      	mov	r4, r0
    4306:	461d      	mov	r5, r3
    4308:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    430a:	d061      	beq.n	43d0 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    430c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    430e:	f04f 0320 	mov.w	r3, #32
    4312:	f3ef 8711 	mrs	r7, BASEPRI
    4316:	f383 8812 	msr	BASEPRI_MAX, r3
    431a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    431e:	3201      	adds	r2, #1
    4320:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    4324:	da24      	bge.n	4370 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4326:	4930      	ldr	r1, [pc, #192]	; (43e8 <z_add_timeout+0xf0>)
    4328:	e9d1 2000 	ldrd	r2, r0, [r1]
    432c:	f06f 0301 	mvn.w	r3, #1
    4330:	1a9b      	subs	r3, r3, r2
    4332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4336:	eb62 0000 	sbc.w	r0, r2, r0
    433a:	1b9e      	subs	r6, r3, r6
    433c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    4340:	2e01      	cmp	r6, #1
    4342:	f170 0300 	sbcs.w	r3, r0, #0
    4346:	da01      	bge.n	434c <z_add_timeout+0x54>
    4348:	2601      	movs	r6, #1
    434a:	2000      	movs	r0, #0
    434c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    4350:	4e26      	ldr	r6, [pc, #152]	; (43ec <z_add_timeout+0xf4>)
    4352:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    4356:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4358:	45b4      	cmp	ip, r6
    435a:	bf08      	it	eq
    435c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    4360:	f1bc 0f00 	cmp.w	ip, #0
    4364:	d10d      	bne.n	4382 <z_add_timeout+0x8a>
	node->prev = tail;
    4366:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    436a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    436c:	6074      	str	r4, [r6, #4]
}
    436e:	e01c      	b.n	43aa <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    4370:	f7ff ff74 	bl	425c <elapsed>
    4374:	3601      	adds	r6, #1
    4376:	f145 0500 	adc.w	r5, r5, #0
    437a:	1836      	adds	r6, r6, r0
    437c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    4380:	e7e4      	b.n	434c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    4382:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    4386:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    438a:	4293      	cmp	r3, r2
    438c:	eb71 0e00 	sbcs.w	lr, r1, r0
    4390:	da1f      	bge.n	43d2 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    4392:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    4394:	f8dc 3004 	ldr.w	r3, [ip, #4]
    4398:	eb60 0001 	sbc.w	r0, r0, r1
    439c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    43a0:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    43a4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    43a6:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    43aa:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43ac:	42b3      	cmp	r3, r6
    43ae:	d00b      	beq.n	43c8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    43b0:	429c      	cmp	r4, r3
    43b2:	d109      	bne.n	43c8 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    43b4:	f7ff ff5c 	bl	4270 <next_timeout>

			if (next_time == 0 ||
    43b8:	b118      	cbz	r0, 43c2 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    43ba:	4b0d      	ldr	r3, [pc, #52]	; (43f0 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    43bc:	691b      	ldr	r3, [r3, #16]
    43be:	4283      	cmp	r3, r0
    43c0:	d002      	beq.n	43c8 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    43c2:	2100      	movs	r1, #0
    43c4:	f7fe fa82 	bl	28cc <sys_clock_set_timeout>
	__asm__ volatile(
    43c8:	f387 8811 	msr	BASEPRI, r7
    43cc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    43d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    43d2:	1a9b      	subs	r3, r3, r2
    43d4:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    43d8:	45ac      	cmp	ip, r5
    43da:	e9c4 3104 	strd	r3, r1, [r4, #16]
    43de:	d0c2      	beq.n	4366 <z_add_timeout+0x6e>
    43e0:	f8dc c000 	ldr.w	ip, [ip]
    43e4:	e7bc      	b.n	4360 <z_add_timeout+0x68>
    43e6:	bf00      	nop
    43e8:	20000280 	.word	0x20000280
    43ec:	20000148 	.word	0x20000148
    43f0:	20000368 	.word	0x20000368

000043f4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    43f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43f8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    43fa:	f7ff fd1f 	bl	3e3c <z_time_slice>
	__asm__ volatile(
    43fe:	f04f 0320 	mov.w	r3, #32
    4402:	f3ef 8611 	mrs	r6, BASEPRI
    4406:	f383 8812 	msr	BASEPRI_MAX, r3
    440a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    440e:	4f23      	ldr	r7, [pc, #140]	; (449c <sys_clock_announce+0xa8>)
	return list->head == list;
    4410:	f8df 808c 	ldr.w	r8, [pc, #140]	; 44a0 <sys_clock_announce+0xac>
    4414:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4418:	4a22      	ldr	r2, [pc, #136]	; (44a4 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    441a:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    441c:	4540      	cmp	r0, r8
		curr_tick += dt;
    441e:	e9d2 3e00 	ldrd	r3, lr, [r2]
    4422:	ea4f 71e4 	mov.w	r1, r4, asr #31
    4426:	d00b      	beq.n	4440 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4428:	b150      	cbz	r0, 4440 <sys_clock_announce+0x4c>
    442a:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    442e:	42ac      	cmp	r4, r5
    4430:	eb71 090c 	sbcs.w	r9, r1, ip
    4434:	da16      	bge.n	4464 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4436:	1b2d      	subs	r5, r5, r4
    4438:	eb6c 0c01 	sbc.w	ip, ip, r1
    443c:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    4440:	18e3      	adds	r3, r4, r3
    4442:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    4446:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4448:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    444c:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    444e:	f7ff ff0f 	bl	4270 <next_timeout>
    4452:	4621      	mov	r1, r4
    4454:	f7fe fa3a 	bl	28cc <sys_clock_set_timeout>
	__asm__ volatile(
    4458:	f386 8811 	msr	BASEPRI, r6
    445c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4464:	18eb      	adds	r3, r5, r3
    4466:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    446a:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    446e:	2200      	movs	r2, #0
    4470:	2300      	movs	r3, #0
    4472:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    4476:	f7ff ff23 	bl	42c0 <remove_timeout>
    447a:	f386 8811 	msr	BASEPRI, r6
    447e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4482:	6883      	ldr	r3, [r0, #8]
    4484:	4798      	blx	r3
	__asm__ volatile(
    4486:	f04f 0320 	mov.w	r3, #32
    448a:	f3ef 8611 	mrs	r6, BASEPRI
    448e:	f383 8812 	msr	BASEPRI_MAX, r3
    4492:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    4496:	683c      	ldr	r4, [r7, #0]
    4498:	1b64      	subs	r4, r4, r5
    449a:	e7bb      	b.n	4414 <sys_clock_announce+0x20>
    449c:	2000039c 	.word	0x2000039c
    44a0:	20000148 	.word	0x20000148
    44a4:	20000280 	.word	0x20000280

000044a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    44a8:	b510      	push	{r4, lr}
    44aa:	f04f 0320 	mov.w	r3, #32
    44ae:	f3ef 8411 	mrs	r4, BASEPRI
    44b2:	f383 8812 	msr	BASEPRI_MAX, r3
    44b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    44ba:	f7ff fecf 	bl	425c <elapsed>
    44be:	4a06      	ldr	r2, [pc, #24]	; (44d8 <sys_clock_tick_get+0x30>)
    44c0:	4603      	mov	r3, r0
    44c2:	e9d2 0100 	ldrd	r0, r1, [r2]
    44c6:	1818      	adds	r0, r3, r0
    44c8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    44cc:	f384 8811 	msr	BASEPRI, r4
    44d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    44d4:	bd10      	pop	{r4, pc}
    44d6:	bf00      	nop
    44d8:	20000280 	.word	0x20000280

000044dc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    44dc:	4a02      	ldr	r2, [pc, #8]	; (44e8 <boot_banner+0xc>)
    44de:	4803      	ldr	r0, [pc, #12]	; (44ec <boot_banner+0x10>)
    44e0:	4611      	mov	r1, r2
    44e2:	f000 b878 	b.w	45d6 <printk>
    44e6:	bf00      	nop
    44e8:	00005639 	.word	0x00005639
    44ec:	0000569c 	.word	0x0000569c

000044f0 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    44f0:	4603      	mov	r3, r0
    44f2:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    44f4:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    44f6:	7919      	ldrb	r1, [r3, #4]
    44f8:	2301      	movs	r3, #1
    44fa:	fa03 f101 	lsl.w	r1, r3, r1
    44fe:	6903      	ldr	r3, [r0, #16]
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    4504:	bf18      	it	ne
    4506:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    450a:	b112      	cbz	r2, 4512 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    450c:	6883      	ldr	r3, [r0, #8]
    450e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    4510:	4718      	bx	r3
    4512:	6883      	ldr	r3, [r0, #8]
    4514:	691b      	ldr	r3, [r3, #16]
    4516:	e7fb      	b.n	4510 <gpio_pin_set_dt.isra.0+0x20>

00004518 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    4518:	b470      	push	{r4, r5, r6}
    451a:	4603      	mov	r3, r0
    451c:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    451e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    4520:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    4522:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    4524:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
    4526:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    4528:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    452a:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    452c:	2401      	movs	r4, #1
    452e:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4530:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4534:	bf14      	ite	ne
    4536:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4538:	43a3      	biceq	r3, r4
    453a:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    453c:	6833      	ldr	r3, [r6, #0]
}
    453e:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    4540:	4718      	bx	r3

00004542 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    4542:	4601      	mov	r1, r0
    4544:	f240 30e7 	movw	r0, #999	; 0x3e7
    4548:	b508      	push	{r3, lr}
    454a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    454e:	2300      	movs	r3, #0
    4550:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    4554:	1449      	asrs	r1, r1, #17
    4556:	f7fb fdaf 	bl	b8 <__aeabi_uldivmod>
}
    455a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    455e:	f7ff bde3 	b.w	4128 <z_impl_k_sleep>

00004562 <EPD_DeepSleep>:
{  
    4562:	b508      	push	{r3, lr}
  Epaper_Write_Command(0x10); //enter deep sleep
    4564:	2010      	movs	r0, #16
    4566:	f7fb ff31 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0x01); 
    456a:	2001      	movs	r0, #1
    456c:	f7fb ff46 	bl	3fc <Epaper_Write_Data>
}
    4570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  k_msleep(100);
    4574:	2064      	movs	r0, #100	; 0x64
    4576:	f7ff bfe4 	b.w	4542 <k_msleep.isra.0>

0000457a <EPD_Update>:
{
    457a:	b508      	push	{r3, lr}
  Epaper_Write_Command(0x22); //Display Update Control
    457c:	2022      	movs	r0, #34	; 0x22
    457e:	f7fb ff25 	bl	3cc <Epaper_Write_Command>
  Epaper_Write_Data(0xF7);   
    4582:	20f7      	movs	r0, #247	; 0xf7
    4584:	f7fb ff3a 	bl	3fc <Epaper_Write_Data>
  Epaper_Write_Command(0x20);  //Activate Display Update Sequence
    4588:	2020      	movs	r0, #32
    458a:	f7fb ff1f 	bl	3cc <Epaper_Write_Command>
}
    458e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Epaper_READBUSY();   
    4592:	f7fb bf4b 	b.w	42c <Epaper_READBUSY>

00004596 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4596:	4603      	mov	r3, r0
    4598:	b158      	cbz	r0, 45b2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    459a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    459c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    45a0:	2a01      	cmp	r2, #1
    45a2:	d003      	beq.n	45ac <sys_notify_validate+0x16>
    45a4:	2a03      	cmp	r2, #3
    45a6:	d104      	bne.n	45b2 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    45a8:	6802      	ldr	r2, [r0, #0]
    45aa:	b112      	cbz	r2, 45b2 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    45ac:	2000      	movs	r0, #0
    45ae:	6098      	str	r0, [r3, #8]
    45b0:	4770      	bx	lr
    45b2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    45b6:	4770      	bx	lr

000045b8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    45b8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    45ba:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    45bc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    45c0:	2a03      	cmp	r2, #3
    45c2:	f04f 0200 	mov.w	r2, #0
{
    45c6:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    45c8:	bf0c      	ite	eq
    45ca:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    45cc:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    45ce:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    45d0:	4770      	bx	lr

000045d2 <arch_printk_char_out>:
}
    45d2:	2000      	movs	r0, #0
    45d4:	4770      	bx	lr

000045d6 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    45d6:	b40f      	push	{r0, r1, r2, r3}
    45d8:	b507      	push	{r0, r1, r2, lr}
    45da:	a904      	add	r1, sp, #16
    45dc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    45e0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    45e2:	f7fc f873 	bl	6cc <vprintk>

	va_end(ap);
}
    45e6:	b003      	add	sp, #12
    45e8:	f85d eb04 	ldr.w	lr, [sp], #4
    45ec:	b004      	add	sp, #16
    45ee:	4770      	bx	lr

000045f0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    45f0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    45f2:	f013 0307 	ands.w	r3, r3, #7
    45f6:	d105      	bne.n	4604 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    45f8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    45fa:	2b00      	cmp	r3, #0
    45fc:	bf0c      	ite	eq
    45fe:	2000      	moveq	r0, #0
    4600:	2003      	movne	r0, #3
    4602:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4604:	2b02      	cmp	r3, #2
    4606:	d105      	bne.n	4614 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4608:	8b40      	ldrh	r0, [r0, #26]
    460a:	fab0 f080 	clz	r0, r0
    460e:	0940      	lsrs	r0, r0, #5
    4610:	0080      	lsls	r0, r0, #2
    4612:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4614:	2b01      	cmp	r3, #1
    4616:	d105      	bne.n	4624 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4618:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    461a:	2b00      	cmp	r3, #0
    461c:	bf0c      	ite	eq
    461e:	2000      	moveq	r0, #0
    4620:	2005      	movne	r0, #5
    4622:	4770      	bx	lr
	int evt = EVT_NOP;
    4624:	2000      	movs	r0, #0
}
    4626:	4770      	bx	lr

00004628 <validate_args>:
{
    4628:	b510      	push	{r4, lr}
    462a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    462c:	b100      	cbz	r0, 4630 <validate_args+0x8>
    462e:	b911      	cbnz	r1, 4636 <validate_args+0xe>
		return -EINVAL;
    4630:	f06f 0015 	mvn.w	r0, #21
}
    4634:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    4636:	1d08      	adds	r0, r1, #4
    4638:	f7ff ffad 	bl	4596 <sys_notify_validate>
	if ((rv == 0)
    463c:	2800      	cmp	r0, #0
    463e:	d1f9      	bne.n	4634 <validate_args+0xc>
	    && ((cli->notify.flags
    4640:	68a3      	ldr	r3, [r4, #8]
    4642:	2b03      	cmp	r3, #3
    4644:	d9f6      	bls.n	4634 <validate_args+0xc>
    4646:	e7f3      	b.n	4630 <validate_args+0x8>

00004648 <notify_one>:
{
    4648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    464c:	460d      	mov	r5, r1
    464e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4650:	4619      	mov	r1, r3
    4652:	1d28      	adds	r0, r5, #4
{
    4654:	4690      	mov	r8, r2
    4656:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4658:	f7ff ffae 	bl	45b8 <sys_notify_finalize>
	if (cb) {
    465c:	4604      	mov	r4, r0
    465e:	b138      	cbz	r0, 4670 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4660:	4633      	mov	r3, r6
    4662:	4642      	mov	r2, r8
    4664:	4629      	mov	r1, r5
    4666:	4638      	mov	r0, r7
    4668:	46a4      	mov	ip, r4
}
    466a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    466e:	4760      	bx	ip
}
    4670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004674 <transition_complete>:
{
    4674:	b410      	push	{r4}
	__asm__ volatile(
    4676:	f04f 0420 	mov.w	r4, #32
    467a:	f3ef 8211 	mrs	r2, BASEPRI
    467e:	f384 8812 	msr	BASEPRI_MAX, r4
    4682:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4686:	6141      	str	r1, [r0, #20]
}
    4688:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    468a:	2101      	movs	r1, #1
    468c:	f7fc b82c 	b.w	6e8 <process_event>

00004690 <onoff_manager_init>:
{
    4690:	b538      	push	{r3, r4, r5, lr}
    4692:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4694:	4605      	mov	r5, r0
    4696:	b158      	cbz	r0, 46b0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4698:	b151      	cbz	r1, 46b0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    469a:	680b      	ldr	r3, [r1, #0]
    469c:	b143      	cbz	r3, 46b0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    469e:	684b      	ldr	r3, [r1, #4]
    46a0:	b133      	cbz	r3, 46b0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    46a2:	221c      	movs	r2, #28
    46a4:	2100      	movs	r1, #0
    46a6:	f000 f8f2 	bl	488e <memset>
    46aa:	612c      	str	r4, [r5, #16]
	return 0;
    46ac:	2000      	movs	r0, #0
}
    46ae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    46b0:	f06f 0015 	mvn.w	r0, #21
    46b4:	e7fb      	b.n	46ae <onoff_manager_init+0x1e>

000046b6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    46b6:	b570      	push	{r4, r5, r6, lr}
    46b8:	4605      	mov	r5, r0
    46ba:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    46bc:	f7ff ffb4 	bl	4628 <validate_args>

	if (rv < 0) {
    46c0:	1e04      	subs	r4, r0, #0
    46c2:	db15      	blt.n	46f0 <onoff_request+0x3a>
    46c4:	f04f 0320 	mov.w	r3, #32
    46c8:	f3ef 8211 	mrs	r2, BASEPRI
    46cc:	f383 8812 	msr	BASEPRI_MAX, r3
    46d0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    46d4:	8b6b      	ldrh	r3, [r5, #26]
    46d6:	8b2c      	ldrh	r4, [r5, #24]
    46d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    46dc:	428b      	cmp	r3, r1
    46de:	f004 0407 	and.w	r4, r4, #7
    46e2:	d107      	bne.n	46f4 <onoff_request+0x3e>
	__asm__ volatile(
    46e4:	f382 8811 	msr	BASEPRI, r2
    46e8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    46ec:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    46f0:	4620      	mov	r0, r4
    46f2:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    46f4:	2c02      	cmp	r4, #2
    46f6:	d10c      	bne.n	4712 <onoff_request+0x5c>
		mgr->refs += 1U;
    46f8:	3301      	adds	r3, #1
    46fa:	836b      	strh	r3, [r5, #26]
    46fc:	f382 8811 	msr	BASEPRI, r2
    4700:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    4704:	2300      	movs	r3, #0
    4706:	4622      	mov	r2, r4
    4708:	4631      	mov	r1, r6
    470a:	4628      	mov	r0, r5
    470c:	f7ff ff9c 	bl	4648 <notify_one>
    4710:	e7ee      	b.n	46f0 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    4712:	2c06      	cmp	r4, #6
    4714:	d814      	bhi.n	4740 <onoff_request+0x8a>
    4716:	e8df f004 	tbb	[pc, r4]
    471a:	1304      	.short	0x1304
    471c:	1a041313 	.word	0x1a041313
    4720:	04          	.byte	0x04
    4721:	00          	.byte	0x00
	parent->next = child;
    4722:	2300      	movs	r3, #0
    4724:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4726:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4728:	b93b      	cbnz	r3, 473a <onoff_request+0x84>
	list->head = node;
    472a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    472e:	b9ac      	cbnz	r4, 475c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4730:	2102      	movs	r1, #2
    4732:	4628      	mov	r0, r5
    4734:	f7fb ffd8 	bl	6e8 <process_event>
    4738:	e7da      	b.n	46f0 <onoff_request+0x3a>
	parent->next = child;
    473a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    473c:	606e      	str	r6, [r5, #4]
}
    473e:	e7f6      	b.n	472e <onoff_request+0x78>
    4740:	f382 8811 	msr	BASEPRI, r2
    4744:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    4748:	f06f 0404 	mvn.w	r4, #4
    474c:	e7d0      	b.n	46f0 <onoff_request+0x3a>
    474e:	f382 8811 	msr	BASEPRI, r2
    4752:	f3bf 8f6f 	isb	sy
    4756:	f06f 0485 	mvn.w	r4, #133	; 0x85
    475a:	e7c9      	b.n	46f0 <onoff_request+0x3a>
    475c:	f382 8811 	msr	BASEPRI, r2
    4760:	f3bf 8f6f 	isb	sy
		if (notify) {
    4764:	e7c4      	b.n	46f0 <onoff_request+0x3a>

00004766 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4766:	4604      	mov	r4, r0
    4768:	b508      	push	{r3, lr}
    476a:	4608      	mov	r0, r1
    476c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    476e:	461a      	mov	r2, r3
    4770:	47a0      	blx	r4
	return z_impl_z_current_get();
    4772:	f7ff fcf3 	bl	415c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4776:	f7fd f817 	bl	17a8 <z_impl_k_thread_abort>

0000477a <encode_uint>:
{
    477a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    477e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    4780:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    4782:	2b6f      	cmp	r3, #111	; 0x6f
{
    4784:	4680      	mov	r8, r0
    4786:	460f      	mov	r7, r1
    4788:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    478a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    478e:	d029      	beq.n	47e4 <encode_uint+0x6a>
    4790:	d824      	bhi.n	47dc <encode_uint+0x62>
		return 10;
    4792:	2b58      	cmp	r3, #88	; 0x58
    4794:	bf0c      	ite	eq
    4796:	2610      	moveq	r6, #16
    4798:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    479a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    479e:	4632      	mov	r2, r6
    47a0:	2300      	movs	r3, #0
    47a2:	4640      	mov	r0, r8
    47a4:	4639      	mov	r1, r7
    47a6:	f7fb fc87 	bl	b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47aa:	2a09      	cmp	r2, #9
    47ac:	b2d4      	uxtb	r4, r2
    47ae:	d81e      	bhi.n	47ee <encode_uint+0x74>
    47b0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    47b2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47b4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    47b6:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47ba:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    47be:	d301      	bcc.n	47c4 <encode_uint+0x4a>
    47c0:	45d1      	cmp	r9, sl
    47c2:	d811      	bhi.n	47e8 <encode_uint+0x6e>
	if (conv->flag_hash) {
    47c4:	782b      	ldrb	r3, [r5, #0]
    47c6:	069b      	lsls	r3, r3, #26
    47c8:	d505      	bpl.n	47d6 <encode_uint+0x5c>
		if (radix == 8) {
    47ca:	2e08      	cmp	r6, #8
    47cc:	d115      	bne.n	47fa <encode_uint+0x80>
			conv->altform_0 = true;
    47ce:	78ab      	ldrb	r3, [r5, #2]
    47d0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    47d4:	70ab      	strb	r3, [r5, #2]
}
    47d6:	4648      	mov	r0, r9
    47d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    47dc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    47e0:	2b70      	cmp	r3, #112	; 0x70
    47e2:	e7d7      	b.n	4794 <encode_uint+0x1a>
	switch (specifier) {
    47e4:	2608      	movs	r6, #8
    47e6:	e7d8      	b.n	479a <encode_uint+0x20>
		value /= radix;
    47e8:	4680      	mov	r8, r0
    47ea:	460f      	mov	r7, r1
    47ec:	e7d7      	b.n	479e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47ee:	f1bb 0f19 	cmp.w	fp, #25
    47f2:	bf94      	ite	ls
    47f4:	3437      	addls	r4, #55	; 0x37
    47f6:	3457      	addhi	r4, #87	; 0x57
    47f8:	e7db      	b.n	47b2 <encode_uint+0x38>
		} else if (radix == 16) {
    47fa:	2e10      	cmp	r6, #16
    47fc:	d1eb      	bne.n	47d6 <encode_uint+0x5c>
			conv->altform_0c = true;
    47fe:	78ab      	ldrb	r3, [r5, #2]
    4800:	f043 0310 	orr.w	r3, r3, #16
    4804:	e7e6      	b.n	47d4 <encode_uint+0x5a>

00004806 <outs>:
{
    4806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    480a:	4607      	mov	r7, r0
    480c:	4688      	mov	r8, r1
    480e:	4615      	mov	r5, r2
    4810:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4812:	4614      	mov	r4, r2
    4814:	42b4      	cmp	r4, r6
    4816:	d305      	bcc.n	4824 <outs+0x1e>
    4818:	b10e      	cbz	r6, 481e <outs+0x18>
	return (int)count;
    481a:	1b60      	subs	r0, r4, r5
    481c:	e008      	b.n	4830 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    481e:	7823      	ldrb	r3, [r4, #0]
    4820:	2b00      	cmp	r3, #0
    4822:	d0fa      	beq.n	481a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    4824:	f814 0b01 	ldrb.w	r0, [r4], #1
    4828:	4641      	mov	r1, r8
    482a:	47b8      	blx	r7
		if (rc < 0) {
    482c:	2800      	cmp	r0, #0
    482e:	daf1      	bge.n	4814 <outs+0xe>
}
    4830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004834 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_TAINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4834:	4770      	bx	lr

00004836 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4836:	f000 bc5c 	b.w	50f2 <z_fatal_error>

0000483a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    483a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    483c:	6800      	ldr	r0, [r0, #0]
    483e:	f000 bc58 	b.w	50f2 <z_fatal_error>

00004842 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4842:	2100      	movs	r1, #0
    4844:	2001      	movs	r0, #1
    4846:	f7ff bff6 	b.w	4836 <z_arm_fatal_error>

0000484a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    484a:	b508      	push	{r3, lr}
	handler();
    484c:	f7fc fdac 	bl	13a8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4854:	f7fc be7e 	b.w	1554 <z_arm_exc_exit>

00004858 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4858:	4603      	mov	r3, r0
	size_t n = 0;
    485a:	2000      	movs	r0, #0

	while (*s != '\0') {
    485c:	5c1a      	ldrb	r2, [r3, r0]
    485e:	b902      	cbnz	r2, 4862 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4860:	4770      	bx	lr
		n++;
    4862:	3001      	adds	r0, #1
    4864:	e7fa      	b.n	485c <strlen+0x4>

00004866 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4866:	4603      	mov	r3, r0
	size_t n = 0;
    4868:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    486a:	5c1a      	ldrb	r2, [r3, r0]
    486c:	b10a      	cbz	r2, 4872 <strnlen+0xc>
    486e:	4288      	cmp	r0, r1
    4870:	d100      	bne.n	4874 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4872:	4770      	bx	lr
		n++;
    4874:	3001      	adds	r0, #1
    4876:	e7f8      	b.n	486a <strnlen+0x4>

00004878 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4878:	b510      	push	{r4, lr}
    487a:	1e43      	subs	r3, r0, #1
    487c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    487e:	4291      	cmp	r1, r2
    4880:	d100      	bne.n	4884 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4882:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4884:	f811 4b01 	ldrb.w	r4, [r1], #1
    4888:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    488c:	e7f7      	b.n	487e <memcpy+0x6>

0000488e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    488e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4890:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    4892:	4603      	mov	r3, r0
	while (n > 0) {
    4894:	4293      	cmp	r3, r2
    4896:	d100      	bne.n	489a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4898:	4770      	bx	lr
		*(d_byte++) = c_byte;
    489a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    489e:	e7f9      	b.n	4894 <memset+0x6>

000048a0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    48a0:	f04f 0220 	mov.w	r2, #32
    48a4:	f3ef 8311 	mrs	r3, BASEPRI
    48a8:	f382 8812 	msr	BASEPRI_MAX, r2
    48ac:	f3bf 8f6f 	isb	sy
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    48b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    48b4:	2101      	movs	r1, #1
    48b6:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
	__asm__ volatile(
    48ba:	f383 8811 	msr	BASEPRI, r3
    48be:	f3bf 8f6f 	isb	sy
}
    48c2:	2000      	movs	r0, #0
    48c4:	4770      	bx	lr

000048c6 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    48c6:	2806      	cmp	r0, #6
    48c8:	d108      	bne.n	48dc <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    48ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48ce:	2201      	movs	r2, #1
    48d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    48d4:	f3bf 8f4f 	dsb	sy
        __WFE();
    48d8:	bf20      	wfe
    while (true)
    48da:	e7fd      	b.n	48d8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    48dc:	4770      	bx	lr

000048de <pm_state_exit_post_ops>:
    48de:	2300      	movs	r3, #0
    48e0:	f383 8811 	msr	BASEPRI, r3
    48e4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    48e8:	4770      	bx	lr

000048ea <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    48ea:	6903      	ldr	r3, [r0, #16]
    48ec:	b2c9      	uxtb	r1, r1
    48ee:	220c      	movs	r2, #12
    48f0:	fb01 3302 	mla	r3, r1, r2, r3
    48f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    48f6:	f000 0007 	and.w	r0, r0, #7
    48fa:	4770      	bx	lr

000048fc <set_on_state>:
	__asm__ volatile(
    48fc:	f04f 0320 	mov.w	r3, #32
    4900:	f3ef 8211 	mrs	r2, BASEPRI
    4904:	f383 8812 	msr	BASEPRI_MAX, r3
    4908:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    490c:	6803      	ldr	r3, [r0, #0]
    490e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4912:	f043 0302 	orr.w	r3, r3, #2
    4916:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4918:	f382 8811 	msr	BASEPRI, r2
    491c:	f3bf 8f6f 	isb	sy
}
    4920:	4770      	bx	lr

00004922 <stop>:
{
    4922:	b570      	push	{r4, r5, r6, lr}
    4924:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    4926:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4928:	f04f 0420 	mov.w	r4, #32
    492c:	f3ef 8511 	mrs	r5, BASEPRI
    4930:	f384 8812 	msr	BASEPRI_MAX, r4
    4934:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4938:	260c      	movs	r6, #12
    493a:	fb06 3401 	mla	r4, r6, r1, r3
    493e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4940:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4944:	d008      	beq.n	4958 <stop+0x36>
    4946:	42a2      	cmp	r2, r4
    4948:	d006      	beq.n	4958 <stop+0x36>
	__asm__ volatile(
    494a:	f385 8811 	msr	BASEPRI, r5
    494e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4956:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4958:	fb06 3301 	mla	r3, r6, r1, r3
    495c:	2201      	movs	r2, #1
    495e:	641a      	str	r2, [r3, #64]	; 0x40
    4960:	f385 8811 	msr	BASEPRI, r5
    4964:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4968:	6843      	ldr	r3, [r0, #4]
    496a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    496e:	685b      	ldr	r3, [r3, #4]
    4970:	4798      	blx	r3
	return 0;
    4972:	2000      	movs	r0, #0
    4974:	e7ef      	b.n	4956 <stop+0x34>

00004976 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4976:	2280      	movs	r2, #128	; 0x80
    4978:	f7ff bfd3 	b.w	4922 <stop>

0000497c <async_start>:
{
    497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    497e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4980:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4982:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4984:	f04f 0520 	mov.w	r5, #32
    4988:	f3ef 8611 	mrs	r6, BASEPRI
    498c:	f385 8812 	msr	BASEPRI_MAX, r5
    4990:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4994:	250c      	movs	r5, #12
    4996:	fb05 4401 	mla	r4, r5, r1, r4
    499a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    499c:	f005 0c07 	and.w	ip, r5, #7
    49a0:	f1bc 0f01 	cmp.w	ip, #1
    49a4:	d10c      	bne.n	49c0 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    49a6:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    49a8:	f386 8811 	msr	BASEPRI, r6
    49ac:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    49b0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    49b4:	6843      	ldr	r3, [r0, #4]
    49b6:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    49ba:	4798      	blx	r3
	return 0;
    49bc:	2000      	movs	r0, #0
}
    49be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    49c0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    49c4:	42af      	cmp	r7, r5
    49c6:	f386 8811 	msr	BASEPRI, r6
    49ca:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    49ce:	bf0c      	ite	eq
    49d0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    49d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    49d8:	e7f1      	b.n	49be <async_start+0x42>

000049da <api_start>:
{
    49da:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    49dc:	2480      	movs	r4, #128	; 0x80
    49de:	9400      	str	r4, [sp, #0]
    49e0:	f7ff ffcc 	bl	497c <async_start>
}
    49e4:	b002      	add	sp, #8
    49e6:	bd10      	pop	{r4, pc}

000049e8 <onoff_started_callback>:
{
    49e8:	b410      	push	{r4}
	return &data->mgr[type];
    49ea:	6900      	ldr	r0, [r0, #16]
    49ec:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    49ee:	241c      	movs	r4, #28
    49f0:	fb03 0004 	mla	r0, r3, r4, r0
    49f4:	2100      	movs	r1, #0
}
    49f6:	bc10      	pop	{r4}
	notify(mgr, 0);
    49f8:	4710      	bx	r2

000049fa <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    49fa:	2000      	movs	r0, #0
    49fc:	f000 bae3 	b.w	4fc6 <nrfx_clock_start>

00004a00 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4a00:	2000      	movs	r0, #0
    4a02:	f000 bb1c 	b.w	503e <nrfx_clock_stop>

00004a06 <blocking_start_callback>:
{
    4a06:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    4a08:	f7ff b8c0 	b.w	3b8c <z_impl_k_sem_give>

00004a0c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a0c:	6843      	ldr	r3, [r0, #4]
    4a0e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4a10:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4a14:	600b      	str	r3, [r1, #0]
}
    4a16:	2000      	movs	r0, #0
    4a18:	4770      	bx	lr

00004a1a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a1a:	6843      	ldr	r3, [r0, #4]
    4a1c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    4a1e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    4a22:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    4a26:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4a2a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    4a2e:	2000      	movs	r0, #0
    4a30:	4770      	bx	lr

00004a32 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a32:	6843      	ldr	r3, [r0, #4]
    4a34:	685b      	ldr	r3, [r3, #4]
}
    4a36:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    4a38:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4a3c:	4770      	bx	lr

00004a3e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a3e:	6843      	ldr	r3, [r0, #4]
    4a40:	685b      	ldr	r3, [r3, #4]
}
    4a42:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4a44:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4a48:	4770      	bx	lr

00004a4a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a4a:	6843      	ldr	r3, [r0, #4]
    4a4c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4a4e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    4a52:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4a56:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4a58:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4a5c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    4a60:	2000      	movs	r0, #0
    4a62:	4770      	bx	lr

00004a64 <gpio_nrfx_manage_callback>:
{
    4a64:	b510      	push	{r4, lr}
	return port->data;
    4a66:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4a68:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    4a6a:	b148      	cbz	r0, 4a80 <gpio_nrfx_manage_callback+0x1c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a6c:	4288      	cmp	r0, r1
    4a6e:	d113      	bne.n	4a98 <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
    4a70:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4a72:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    4a74:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4a76:	42a1      	cmp	r1, r4
    4a78:	d100      	bne.n	4a7c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4a7a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4a7c:	2000      	movs	r0, #0
    4a7e:	6008      	str	r0, [r1, #0]
	if (set) {
    4a80:	b97a      	cbnz	r2, 4aa2 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    4a82:	2000      	movs	r0, #0
}
    4a84:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a86:	4281      	cmp	r1, r0
    4a88:	d106      	bne.n	4a98 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    4a8a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4a8c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4a8e:	6898      	ldr	r0, [r3, #8]
    4a90:	4281      	cmp	r1, r0
    4a92:	d1f3      	bne.n	4a7c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4a94:	609c      	str	r4, [r3, #8]
}
    4a96:	e7f1      	b.n	4a7c <gpio_nrfx_manage_callback+0x18>
	return node->next;
    4a98:	4604      	mov	r4, r0
    4a9a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a9c:	2800      	cmp	r0, #0
    4a9e:	d1f2      	bne.n	4a86 <gpio_nrfx_manage_callback+0x22>
			if (!set) {
    4aa0:	b13a      	cbz	r2, 4ab2 <gpio_nrfx_manage_callback+0x4e>
	return list->head;
    4aa2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4aa4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4aa6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    4aa8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4aaa:	2a00      	cmp	r2, #0
    4aac:	d1e9      	bne.n	4a82 <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
    4aae:	6099      	str	r1, [r3, #8]
}
    4ab0:	e7e7      	b.n	4a82 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    4ab2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4ab6:	e7e5      	b.n	4a84 <gpio_nrfx_manage_callback+0x20>

00004ab8 <irq_connect0>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
    4ab8:	2200      	movs	r2, #0
    4aba:	2101      	movs	r1, #1
    4abc:	2004      	movs	r0, #4
    4abe:	f7fc bc5b 	b.w	1378 <z_arm_irq_priority_set>

00004ac2 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    4ac2:	b510      	push	{r4, lr}
	while (*count) {
    4ac4:	680b      	ldr	r3, [r1, #0]
    4ac6:	b913      	cbnz	r3, 4ace <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    4ac8:	6013      	str	r3, [r2, #0]
	return NULL;
    4aca:	4618      	mov	r0, r3
    4acc:	e005      	b.n	4ada <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    4ace:	6803      	ldr	r3, [r0, #0]
    4ad0:	685c      	ldr	r4, [r3, #4]
    4ad2:	b11c      	cbz	r4, 4adc <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    4ad4:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    4ad6:	6803      	ldr	r3, [r0, #0]
    4ad8:	6818      	ldr	r0, [r3, #0]
}
    4ada:	bd10      	pop	{r4, pc}
		++(*current);
    4adc:	3308      	adds	r3, #8
    4ade:	6003      	str	r3, [r0, #0]
		--(*count);
    4ae0:	680b      	ldr	r3, [r1, #0]
    4ae2:	3b01      	subs	r3, #1
    4ae4:	600b      	str	r3, [r1, #0]
    4ae6:	e7ed      	b.n	4ac4 <spi_context_get_next_buf.constprop.0+0x2>

00004ae8 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    4ae8:	4603      	mov	r3, r0
    4aea:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    4aec:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    4aee:	7919      	ldrb	r1, [r3, #4]
    4af0:	2301      	movs	r3, #1
    4af2:	fa03 f101 	lsl.w	r1, r3, r1
    4af6:	6903      	ldr	r3, [r0, #16]
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    4afc:	bf18      	it	ne
    4afe:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    4b02:	b112      	cbz	r2, 4b0a <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    4b04:	6883      	ldr	r3, [r0, #8]
    4b06:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    4b08:	4718      	bx	r3
    4b0a:	6883      	ldr	r3, [r0, #8]
    4b0c:	691b      	ldr	r3, [r3, #16]
    4b0e:	e7fb      	b.n	4b08 <gpio_pin_set_dt.isra.0+0x20>

00004b10 <_spi_context_cs_control>:
{
    4b10:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    4b12:	6803      	ldr	r3, [r0, #0]
{
    4b14:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    4b16:	b1e3      	cbz	r3, 4b52 <_spi_context_cs_control+0x42>
    4b18:	6898      	ldr	r0, [r3, #8]
    4b1a:	b1d0      	cbz	r0, 4b52 <_spi_context_cs_control+0x42>
    4b1c:	6805      	ldr	r5, [r0, #0]
    4b1e:	b1c5      	cbz	r5, 4b52 <_spi_context_cs_control+0x42>
		if (on) {
    4b20:	b149      	cbz	r1, 4b36 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    4b22:	2101      	movs	r1, #1
    4b24:	f7ff ffe0 	bl	4ae8 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    4b28:	6823      	ldr	r3, [r4, #0]
    4b2a:	689b      	ldr	r3, [r3, #8]
    4b2c:	6898      	ldr	r0, [r3, #8]
}
    4b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    4b32:	f000 bbee 	b.w	5312 <z_impl_k_busy_wait>
			if (!force_off &&
    4b36:	b912      	cbnz	r2, 4b3e <_spi_context_cs_control+0x2e>
    4b38:	889b      	ldrh	r3, [r3, #4]
    4b3a:	04db      	lsls	r3, r3, #19
    4b3c:	d409      	bmi.n	4b52 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    4b3e:	6880      	ldr	r0, [r0, #8]
    4b40:	f000 fbe7 	bl	5312 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    4b44:	6823      	ldr	r3, [r4, #0]
    4b46:	2100      	movs	r1, #0
    4b48:	6898      	ldr	r0, [r3, #8]
}
    4b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    4b4e:	f7ff bfcb 	b.w	4ae8 <gpio_pin_set_dt.isra.0>
}
    4b52:	bd38      	pop	{r3, r4, r5, pc}

00004b54 <spi_context_unlock_unconditionally>:
{
    4b54:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    4b56:	2201      	movs	r2, #1
    4b58:	2100      	movs	r1, #0
{
    4b5a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    4b5c:	f7ff ffd8 	bl	4b10 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    4b60:	69a3      	ldr	r3, [r4, #24]
    4b62:	b933      	cbnz	r3, 4b72 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    4b64:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    4b66:	f104 0010 	add.w	r0, r4, #16
}
    4b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b6e:	f7ff b80d 	b.w	3b8c <z_impl_k_sem_give>
    4b72:	bd10      	pop	{r4, pc}

00004b74 <spi_nrfx_release>:
{
    4b74:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    4b76:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    4b78:	6803      	ldr	r3, [r0, #0]
    4b7a:	428b      	cmp	r3, r1
    4b7c:	d106      	bne.n	4b8c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    4b7e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    4b82:	b934      	cbnz	r4, 4b92 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    4b84:	f7ff ffe6 	bl	4b54 <spi_context_unlock_unconditionally>
	return 0;
    4b88:	4620      	mov	r0, r4
}
    4b8a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4b8c:	f06f 0015 	mvn.w	r0, #21
    4b90:	e7fb      	b.n	4b8a <spi_nrfx_release+0x16>
		return -EBUSY;
    4b92:	f06f 000f 	mvn.w	r0, #15
    4b96:	e7f8      	b.n	4b8a <spi_nrfx_release+0x16>

00004b98 <spi_nrfx_init>:
{
    4b98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    4b9c:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    4b9e:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    4ba0:	6a26      	ldr	r6, [r4, #32]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    4ba2:	aa01      	add	r2, sp, #4
    4ba4:	2100      	movs	r1, #0
    4ba6:	4630      	mov	r0, r6
    4ba8:	f000 f966 	bl	4e78 <pinctrl_lookup_state>
	if (ret < 0) {
    4bac:	2800      	cmp	r0, #0
    4bae:	db43      	blt.n	4c38 <spi_nrfx_init+0xa0>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    4bb0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4bb2:	6832      	ldr	r2, [r6, #0]
    4bb4:	7919      	ldrb	r1, [r3, #4]
    4bb6:	6818      	ldr	r0, [r3, #0]
    4bb8:	f000 f974 	bl	4ea4 <pinctrl_configure_pins>
	if (err < 0) {
    4bbc:	2800      	cmp	r0, #0
    4bbe:	db3b      	blt.n	4c38 <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
    4bc0:	69e3      	ldr	r3, [r4, #28]
    4bc2:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    4bc4:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4bc6:	2601      	movs	r6, #1
    4bc8:	3408      	adds	r4, #8
    4bca:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    4bce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4bd2:	f1a4 0208 	sub.w	r2, r4, #8
    4bd6:	4293      	cmp	r3, r2
    4bd8:	d804      	bhi.n	4be4 <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    4bda:	4628      	mov	r0, r5
    4bdc:	f7ff ffba 	bl	4b54 <spi_context_unlock_unconditionally>
	return 0;
    4be0:	2000      	movs	r0, #0
	return 0;
    4be2:	e029      	b.n	4c38 <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
    4be4:	f854 0c08 	ldr.w	r0, [r4, #-8]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    4be8:	f000 fa6d 	bl	50c6 <z_device_is_ready>
    4bec:	b338      	cbz	r0, 4c3e <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
    4bee:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
    4bf2:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
    4bf6:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
    4bfa:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    4bfe:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4c02:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4c06:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    4c08:	bf54      	ite	pl
    4c0a:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4c0e:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4c12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4c16:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4c1a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4c1c:	bf4c      	ite	mi
    4c1e:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4c22:	ea27 070e 	bicpl.w	r7, r7, lr
    4c26:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
    4c2a:	f8d8 3000 	ldr.w	r3, [r8]
    4c2e:	4798      	blx	r3
		if (ret < 0) {
    4c30:	2800      	cmp	r0, #0
    4c32:	f104 0408 	add.w	r4, r4, #8
    4c36:	dac8      	bge.n	4bca <spi_nrfx_init+0x32>
}
    4c38:	b002      	add	sp, #8
    4c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
    4c3e:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
    4c42:	e7f9      	b.n	4c38 <spi_nrfx_init+0xa0>

00004c44 <event_handler>:
{
    4c44:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    4c46:	7803      	ldrb	r3, [r0, #0]
{
    4c48:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d13c      	bne.n	4cc8 <event_handler+0x84>
	if (!ctx->tx_len) {
    4c4e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    4c50:	6d8d      	ldr	r5, [r1, #88]	; 0x58
    4c52:	b193      	cbz	r3, 4c7a <event_handler+0x36>
	if (len > ctx->tx_len) {
    4c54:	429d      	cmp	r5, r3
    4c56:	d810      	bhi.n	4c7a <event_handler+0x36>
	ctx->tx_len -= len;
    4c58:	1b5b      	subs	r3, r3, r5
    4c5a:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    4c5c:	bb43      	cbnz	r3, 4cb0 <event_handler+0x6c>
		++ctx->current_tx;
    4c5e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    4c60:	3308      	adds	r3, #8
    4c62:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    4c64:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    4c66:	3b01      	subs	r3, #1
    4c68:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    4c6a:	f101 0248 	add.w	r2, r1, #72	; 0x48
    4c6e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    4c72:	3138      	adds	r1, #56	; 0x38
    4c74:	f7ff ff25 	bl	4ac2 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    4c78:	6460      	str	r0, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    4c7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    4c7c:	b19b      	cbz	r3, 4ca6 <event_handler+0x62>
	if (len > ctx->rx_len) {
    4c7e:	429d      	cmp	r5, r3
    4c80:	d811      	bhi.n	4ca6 <event_handler+0x62>
	ctx->rx_len -= len;
    4c82:	1b5b      	subs	r3, r3, r5
    4c84:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    4c86:	b9cb      	cbnz	r3, 4cbc <event_handler+0x78>
		++ctx->current_rx;
    4c88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4c8a:	3308      	adds	r3, #8
    4c8c:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    4c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4c90:	3b01      	subs	r3, #1
    4c92:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    4c94:	f104 0250 	add.w	r2, r4, #80	; 0x50
    4c98:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4c9c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    4ca0:	f7ff ff0f 	bl	4ac2 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    4ca4:	64e0      	str	r0, [r4, #76]	; 0x4c
		transfer_next_chunk(dev_data->dev);
    4ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    4ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
    4cac:	f7fd b904 	b.w	1eb8 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
    4cb0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d0e1      	beq.n	4c7a <event_handler+0x36>
		ctx->tx_buf += dfs * len;
    4cb6:	442b      	add	r3, r5
    4cb8:	644b      	str	r3, [r1, #68]	; 0x44
    4cba:	e7de      	b.n	4c7a <event_handler+0x36>
	} else if (ctx->rx_buf) {
    4cbc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d0f1      	beq.n	4ca6 <event_handler+0x62>
		ctx->rx_buf += dfs * len;
    4cc2:	442b      	add	r3, r5
    4cc4:	64e3      	str	r3, [r4, #76]	; 0x4c
    4cc6:	e7ee      	b.n	4ca6 <event_handler+0x62>
}
    4cc8:	bd38      	pop	{r3, r4, r5, pc}

00004cca <gpio_pin_configure_dt>:
{
    4cca:	b4f0      	push	{r4, r5, r6, r7}
    4ccc:	4603      	mov	r3, r0
    4cce:	460a      	mov	r2, r1
				  spec->pin,
    4cd0:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    4cd2:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    4cd4:	6800      	ldr	r0, [r0, #0]
    4cd6:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4cd8:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
    4cda:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    4cdc:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4cde:	d506      	bpl.n	4cee <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    4ce0:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    4ce4:	d003      	beq.n	4cee <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4ce6:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4ce8:	bf48      	it	mi
    4cea:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4cee:	6834      	ldr	r4, [r6, #0]
    4cf0:	2501      	movs	r5, #1
    4cf2:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4cf4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4cf8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4cfa:	bf4c      	ite	mi
    4cfc:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4cfe:	43ac      	bicpl	r4, r5
    4d00:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    4d02:	683b      	ldr	r3, [r7, #0]
}
    4d04:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    4d06:	4718      	bx	r3

00004d08 <gpio_pin_get_dt>:
{
    4d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4d0a:	4603      	mov	r3, r0
	return gpio_pin_get(spec->port, spec->pin);
    4d0c:	6800      	ldr	r0, [r0, #0]
    4d0e:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
    4d10:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    4d12:	6883      	ldr	r3, [r0, #8]
    4d14:	a901      	add	r1, sp, #4
    4d16:	685b      	ldr	r3, [r3, #4]
    4d18:	4798      	blx	r3
	if (ret == 0) {
    4d1a:	b940      	cbnz	r0, 4d2e <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
    4d1c:	9b01      	ldr	r3, [sp, #4]
    4d1e:	682a      	ldr	r2, [r5, #0]
    4d20:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    4d22:	2301      	movs	r3, #1
    4d24:	40a3      	lsls	r3, r4
    4d26:	421a      	tst	r2, r3
    4d28:	bf14      	ite	ne
    4d2a:	2001      	movne	r0, #1
    4d2c:	2000      	moveq	r0, #0
}
    4d2e:	b003      	add	sp, #12
    4d30:	bd30      	pop	{r4, r5, pc}

00004d32 <spi_context_get_next_buf>:
{
    4d32:	b530      	push	{r4, r5, lr}
    4d34:	4604      	mov	r4, r0
	while (*count) {
    4d36:	6808      	ldr	r0, [r1, #0]
    4d38:	b908      	cbnz	r0, 4d3e <spi_context_get_next_buf+0xc>
	*buf_len = 0;
    4d3a:	6010      	str	r0, [r2, #0]
	return NULL;
    4d3c:	e008      	b.n	4d50 <spi_context_get_next_buf+0x1e>
		if (((*current)->len / dfs) != 0) {
    4d3e:	6820      	ldr	r0, [r4, #0]
    4d40:	6845      	ldr	r5, [r0, #4]
    4d42:	429d      	cmp	r5, r3
    4d44:	d305      	bcc.n	4d52 <spi_context_get_next_buf+0x20>
			*buf_len = (*current)->len / dfs;
    4d46:	fbb5 f5f3 	udiv	r5, r5, r3
    4d4a:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
    4d4c:	6823      	ldr	r3, [r4, #0]
    4d4e:	6818      	ldr	r0, [r3, #0]
}
    4d50:	bd30      	pop	{r4, r5, pc}
		++(*current);
    4d52:	3008      	adds	r0, #8
    4d54:	6020      	str	r0, [r4, #0]
		--(*count);
    4d56:	6808      	ldr	r0, [r1, #0]
    4d58:	3801      	subs	r0, #1
    4d5a:	6008      	str	r0, [r1, #0]
    4d5c:	e7eb      	b.n	4d36 <spi_context_get_next_buf+0x4>

00004d5e <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    4d5e:	4603      	mov	r3, r0
    4d60:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    4d62:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    4d64:	7919      	ldrb	r1, [r3, #4]
    4d66:	2301      	movs	r3, #1
    4d68:	fa03 f101 	lsl.w	r1, r3, r1
    4d6c:	6903      	ldr	r3, [r0, #16]
    4d6e:	681b      	ldr	r3, [r3, #0]
    4d70:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    4d72:	bf18      	it	ne
    4d74:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    4d78:	b112      	cbz	r2, 4d80 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    4d7a:	6883      	ldr	r3, [r0, #8]
    4d7c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    4d7e:	4718      	bx	r3
    4d80:	6883      	ldr	r3, [r0, #8]
    4d82:	691b      	ldr	r3, [r3, #16]
    4d84:	e7fb      	b.n	4d7e <gpio_pin_set_dt.isra.0+0x20>

00004d86 <spi_bitbang_init>:
	.transceive_async = spi_bitbang_transceive_async,
#endif /* CONFIG_SPI_ASYNC */
};

int spi_bitbang_init(const struct device *dev)
{
    4d86:	b538      	push	{r3, r4, r5, lr}
	const struct spi_bitbang_config *config = dev->config;
    4d88:	6844      	ldr	r4, [r0, #4]
	struct spi_bitbang_data *data = dev->data;
    4d8a:	6905      	ldr	r5, [r0, #16]
	int rc;

	if (!device_is_ready(config->clk_gpio.port)) {
    4d8c:	6820      	ldr	r0, [r4, #0]
    4d8e:	f000 f99a 	bl	50c6 <z_device_is_ready>
    4d92:	b910      	cbnz	r0, 4d9a <spi_bitbang_init+0x14>
		LOG_ERR("GPIO port for clk pin is not ready");
		return -ENODEV;
    4d94:	f06f 0012 	mvn.w	r0, #18
		LOG_ERR("Failed to configure CS pins: %d", rc);
		return rc;
	}

	return 0;
}
    4d98:	bd38      	pop	{r3, r4, r5, pc}
	rc = gpio_pin_configure_dt(&config->clk_gpio, GPIO_OUTPUT_INACTIVE);
    4d9a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    4d9e:	4620      	mov	r0, r4
    4da0:	f7ff ff93 	bl	4cca <gpio_pin_configure_dt>
	if (rc < 0) {
    4da4:	2800      	cmp	r0, #0
    4da6:	dbf7      	blt.n	4d98 <spi_bitbang_init+0x12>
	if (config->mosi_gpio.port != NULL) {
    4da8:	68a0      	ldr	r0, [r4, #8]
    4daa:	b950      	cbnz	r0, 4dc2 <spi_bitbang_init+0x3c>
	if (config->miso_gpio.port != NULL) {
    4dac:	6920      	ldr	r0, [r4, #16]
    4dae:	b9a8      	cbnz	r0, 4ddc <spi_bitbang_init+0x56>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    4db0:	68ac      	ldr	r4, [r5, #8]
    4db2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    4db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4dba:	429c      	cmp	r4, r3
    4dbc:	d31b      	bcc.n	4df6 <spi_bitbang_init+0x70>
	return 0;
    4dbe:	2000      	movs	r0, #0
    4dc0:	e7ea      	b.n	4d98 <spi_bitbang_init+0x12>
    4dc2:	f000 f980 	bl	50c6 <z_device_is_ready>
		if (!device_is_ready(config->mosi_gpio.port)) {
    4dc6:	2800      	cmp	r0, #0
    4dc8:	d0e4      	beq.n	4d94 <spi_bitbang_init+0xe>
		rc = gpio_pin_configure_dt(&config->mosi_gpio,
    4dca:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    4dce:	f104 0008 	add.w	r0, r4, #8
    4dd2:	f7ff ff7a 	bl	4cca <gpio_pin_configure_dt>
		if (rc < 0) {
    4dd6:	2800      	cmp	r0, #0
    4dd8:	dae8      	bge.n	4dac <spi_bitbang_init+0x26>
    4dda:	e7dd      	b.n	4d98 <spi_bitbang_init+0x12>
    4ddc:	f000 f973 	bl	50c6 <z_device_is_ready>
		if (!device_is_ready(config->miso_gpio.port)) {
    4de0:	2800      	cmp	r0, #0
    4de2:	d0d7      	beq.n	4d94 <spi_bitbang_init+0xe>
		rc = gpio_pin_configure_dt(&config->miso_gpio, GPIO_INPUT);
    4de4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    4de8:	f104 0010 	add.w	r0, r4, #16
    4dec:	f7ff ff6d 	bl	4cca <gpio_pin_configure_dt>
		if (rc < 0) {
    4df0:	2800      	cmp	r0, #0
    4df2:	dadd      	bge.n	4db0 <spi_bitbang_init+0x2a>
    4df4:	e7d0      	b.n	4d98 <spi_bitbang_init+0x12>
		if (!device_is_ready(cs_gpio->port)) {
    4df6:	6820      	ldr	r0, [r4, #0]
    4df8:	f000 f965 	bl	50c6 <z_device_is_ready>
    4dfc:	2800      	cmp	r0, #0
    4dfe:	d0c9      	beq.n	4d94 <spi_bitbang_init+0xe>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
    4e00:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    4e04:	4620      	mov	r0, r4
    4e06:	f7ff ff60 	bl	4cca <gpio_pin_configure_dt>
		if (ret < 0) {
    4e0a:	2800      	cmp	r0, #0
    4e0c:	dbc4      	blt.n	4d98 <spi_bitbang_init+0x12>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    4e0e:	3408      	adds	r4, #8
    4e10:	e7cf      	b.n	4db2 <spi_bitbang_init+0x2c>

00004e12 <_spi_context_cs_control>:
{
    4e12:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    4e14:	6803      	ldr	r3, [r0, #0]
{
    4e16:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    4e18:	b1e3      	cbz	r3, 4e54 <_spi_context_cs_control+0x42>
    4e1a:	6898      	ldr	r0, [r3, #8]
    4e1c:	b1d0      	cbz	r0, 4e54 <_spi_context_cs_control+0x42>
    4e1e:	6805      	ldr	r5, [r0, #0]
    4e20:	b1c5      	cbz	r5, 4e54 <_spi_context_cs_control+0x42>
		if (on) {
    4e22:	b149      	cbz	r1, 4e38 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    4e24:	2101      	movs	r1, #1
    4e26:	f7ff ff9a 	bl	4d5e <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    4e2a:	6823      	ldr	r3, [r4, #0]
    4e2c:	689b      	ldr	r3, [r3, #8]
    4e2e:	6898      	ldr	r0, [r3, #8]
}
    4e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    4e34:	f000 ba6d 	b.w	5312 <z_impl_k_busy_wait>
			if (!force_off &&
    4e38:	b912      	cbnz	r2, 4e40 <_spi_context_cs_control+0x2e>
    4e3a:	889b      	ldrh	r3, [r3, #4]
    4e3c:	04db      	lsls	r3, r3, #19
    4e3e:	d409      	bmi.n	4e54 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    4e40:	6880      	ldr	r0, [r0, #8]
    4e42:	f000 fa66 	bl	5312 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    4e46:	6823      	ldr	r3, [r4, #0]
    4e48:	2100      	movs	r1, #0
    4e4a:	6898      	ldr	r0, [r3, #8]
}
    4e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    4e50:	f7ff bf85 	b.w	4d5e <gpio_pin_set_dt.isra.0>
}
    4e54:	bd38      	pop	{r3, r4, r5, pc}

00004e56 <spi_bitbang_release>:
{
    4e56:	b510      	push	{r4, lr}
	struct spi_bitbang_data *data = dev->data;
    4e58:	6904      	ldr	r4, [r0, #16]
	_spi_context_cs_control(ctx, false, true);
    4e5a:	2201      	movs	r2, #1
    4e5c:	2100      	movs	r1, #0
    4e5e:	4620      	mov	r0, r4
    4e60:	f7ff ffd7 	bl	4e12 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    4e64:	69a3      	ldr	r3, [r4, #24]
    4e66:	b923      	cbnz	r3, 4e72 <spi_bitbang_release+0x1c>
		ctx->owner = NULL;
    4e68:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    4e6a:	f104 0010 	add.w	r0, r4, #16
    4e6e:	f7fe fe8d 	bl	3b8c <z_impl_k_sem_give>
}
    4e72:	2000      	movs	r0, #0
    4e74:	bd10      	pop	{r4, pc}

00004e76 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4e76:	4770      	bx	lr

00004e78 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    4e78:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
    4e7a:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4e7c:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
    4e80:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4e82:	7a05      	ldrb	r5, [r0, #8]
    4e84:	6844      	ldr	r4, [r0, #4]
    4e86:	4435      	add	r5, r6
    4e88:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    4e8c:	42a3      	cmp	r3, r4
    4e8e:	d902      	bls.n	4e96 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
    4e90:	f06f 0001 	mvn.w	r0, #1
}
    4e94:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
    4e96:	795c      	ldrb	r4, [r3, #5]
    4e98:	428c      	cmp	r4, r1
    4e9a:	d001      	beq.n	4ea0 <pinctrl_lookup_state+0x28>
		(*state)++;
    4e9c:	3308      	adds	r3, #8
    4e9e:	e7ef      	b.n	4e80 <pinctrl_lookup_state+0x8>
			return 0;
    4ea0:	2000      	movs	r0, #0
    4ea2:	e7f7      	b.n	4e94 <pinctrl_lookup_state+0x1c>

00004ea4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ea8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4eac:	f04f 0c01 	mov.w	ip, #1
    p_reg->OUTSET = set_mask;
    4eb0:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4eb4:	4281      	cmp	r1, r0
    4eb6:	d102      	bne.n	4ebe <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4eb8:	2000      	movs	r0, #0
}
    4eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4ebe:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4ec0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4ec4:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    4ec8:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    4eca:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    4ece:	bf08      	it	eq
    4ed0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    4ed4:	2d0c      	cmp	r5, #12
    4ed6:	d850      	bhi.n	4f7a <pinctrl_configure_pins+0xd6>
    4ed8:	e8df f005 	tbb	[pc, r5]
    4edc:	19161107 	.word	0x19161107
    4ee0:	4f19271c 	.word	0x4f19271c
    4ee4:	2b4f4f4f 	.word	0x2b4f4f4f
    4ee8:	4c          	.byte	0x4c
    4ee9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    4eea:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4eee:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4ef2:	fa0c f505 	lsl.w	r5, ip, r5
    p_reg->OUTSET = set_mask;
    4ef6:	f8c7 5508 	str.w	r5, [r7, #1288]	; 0x508
}
    4efa:	2501      	movs	r5, #1
    4efc:	e002      	b.n	4f04 <pinctrl_configure_pins+0x60>
			NRF_PSEL_UART(reg, RXD) = pin;
    4efe:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4f02:	2500      	movs	r5, #0
    4f04:	462e      	mov	r6, r5
    4f06:	e01b      	b.n	4f40 <pinctrl_configure_pins+0x9c>
			NRF_PSEL_UART(reg, RTS) = pin;
    4f08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    4f0c:	e7ef      	b.n	4eee <pinctrl_configure_pins+0x4a>
			NRF_PSEL_UART(reg, CTS) = pin;
    4f0e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    4f12:	e7f6      	b.n	4f02 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    4f14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4f18:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    4f1a:	f003 061f 	and.w	r6, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4f1e:	fa0c f606 	lsl.w	r6, ip, r6
    p_reg->OUTCLR = clr_mask;
    4f22:	f8c7 650c 	str.w	r6, [r7, #1292]	; 0x50c
}
    4f26:	2601      	movs	r6, #1
    4f28:	e00a      	b.n	4f40 <pinctrl_configure_pins+0x9c>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    4f2a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f2e:	2501      	movs	r5, #1
    4f30:	e7f3      	b.n	4f1a <pinctrl_configure_pins+0x76>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    4f32:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    4f36:	2c00      	cmp	r4, #0
    4f38:	d1e3      	bne.n	4f02 <pinctrl_configure_pins+0x5e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4f3a:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4f3c:	462e      	mov	r6, r5
				drive = NRF_DRIVE_S0D1;
    4f3e:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    4f40:	f850 eb04 	ldr.w	lr, [r0], #4
    4f44:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f48:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4f4c:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4f50:	ea4f 2404 	mov.w	r4, r4, lsl #8
    4f54:	bf18      	it	ne
    4f56:	2600      	movne	r6, #0
    *p_pin = pin_number & 0x1F;
    4f58:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4f5c:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    4f60:	bf18      	it	ne
    4f62:	2501      	movne	r5, #1
    4f64:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    4f66:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4f6a:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    4f6e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4f72:	e79f      	b.n	4eb4 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    4f74:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    4f78:	e7dd      	b.n	4f36 <pinctrl_configure_pins+0x92>
		switch (NRF_GET_FUN(pins[i])) {
    4f7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4f7e:	e79c      	b.n	4eba <pinctrl_configure_pins+0x16>

00004f80 <nrf52_errata_136>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4f80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4f84:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    4f88:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4f8a:	bf04      	itt	eq
    4f8c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    4f90:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
    4f94:	2806      	cmp	r0, #6
    4f96:	d004      	beq.n	4fa2 <nrf52_errata_136+0x22>
            if (var1 == 0x0A)
    4f98:	f1a0 030a 	sub.w	r3, r0, #10
    4f9c:	4258      	negs	r0, r3
    4f9e:	4158      	adcs	r0, r3
    4fa0:	4770      	bx	lr
                        return true;
    4fa2:	2001      	movs	r0, #1
}
    4fa4:	4770      	bx	lr

00004fa6 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4fa6:	4700      	bx	r0

00004fa8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4fa8:	f000 b9b3 	b.w	5312 <z_impl_k_busy_wait>

00004fac <nrfx_clock_enable>:
{
    4fac:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4fae:	2000      	movs	r0, #0
    4fb0:	f7fc f9d4 	bl	135c <arch_irq_is_enabled>
    4fb4:	b908      	cbnz	r0, 4fba <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4fb6:	f7fc f9af 	bl	1318 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4fbe:	2200      	movs	r2, #0
    4fc0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4fc4:	bd08      	pop	{r3, pc}

00004fc6 <nrfx_clock_start>:
{
    4fc6:	b508      	push	{r3, lr}
    switch (domain)
    4fc8:	b110      	cbz	r0, 4fd0 <nrfx_clock_start+0xa>
    4fca:	2801      	cmp	r0, #1
    4fcc:	d02c      	beq.n	5028 <nrfx_clock_start+0x62>
}
    4fce:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4fd4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4fd8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4fdc:	03c8      	lsls	r0, r1, #15
    4fde:	d40b      	bmi.n	4ff8 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4fe0:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4fe4:	07d9      	lsls	r1, r3, #31
    4fe6:	d50f      	bpl.n	5008 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4fe8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4fec:	079b      	lsls	r3, r3, #30
    4fee:	d408      	bmi.n	5002 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    4ff0:	2302      	movs	r3, #2
    4ff2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    4ff6:	e7ea      	b.n	4fce <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4ff8:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4ffc:	2b01      	cmp	r3, #1
    4ffe:	d004      	beq.n	500a <nrfx_clock_start+0x44>
    5000:	b113      	cbz	r3, 5008 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5002:	2000      	movs	r0, #0
    5004:	f7fd fea8 	bl	2d58 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    5008:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    500a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    500e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5012:	2300      	movs	r3, #0
    5014:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    5018:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    501c:	2302      	movs	r3, #2
    501e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5022:	2301      	movs	r3, #1
    5024:	6093      	str	r3, [r2, #8]
}
    5026:	e7d2      	b.n	4fce <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    502c:	2200      	movs	r2, #0
    502e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5032:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5036:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    503a:	6018      	str	r0, [r3, #0]
}
    503c:	e7c7      	b.n	4fce <nrfx_clock_start+0x8>

0000503e <nrfx_clock_stop>:
    clock_stop(domain);
    503e:	f7fd be8b 	b.w	2d58 <clock_stop>

00005042 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    5042:	f000 001f 	and.w	r0, r0, #31
    5046:	0080      	lsls	r0, r0, #2
    5048:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    504c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    5050:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5054:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5058:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    505c:	4770      	bx	lr

0000505e <transfer_byte>:
{
    505e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    5060:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    5064:	698a      	ldr	r2, [r1, #24]
    5066:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    5068:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    506c:	6a0b      	ldr	r3, [r1, #32]
    506e:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    5070:	bf3e      	ittt	cc
    5072:	694a      	ldrcc	r2, [r1, #20]
    5074:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    5078:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    507a:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
    507c:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    5080:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
    5082:	1c5a      	adds	r2, r3, #1
    5084:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    5086:	3302      	adds	r3, #2
    if (p_cb->abort)
    5088:	b135      	cbz	r5, 5098 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    508a:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    508c:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    508e:	bf38      	it	cc
    5090:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    5092:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    5094:	bf88      	it	hi
    5096:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    5098:	690d      	ldr	r5, [r1, #16]
    509a:	429d      	cmp	r5, r3
    509c:	d905      	bls.n	50aa <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    509e:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
    50a0:	5cd3      	ldrb	r3, [r2, r3]
    50a2:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    50a6:	2001      	movs	r0, #1
    50a8:	e00a      	b.n	50c0 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    50aa:	698c      	ldr	r4, [r1, #24]
    50ac:	429c      	cmp	r4, r3
    50ae:	d901      	bls.n	50b4 <transfer_byte+0x56>
    50b0:	7fcb      	ldrb	r3, [r1, #31]
    50b2:	e7f6      	b.n	50a2 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    50b4:	42aa      	cmp	r2, r5
    50b6:	d3f6      	bcc.n	50a6 <transfer_byte+0x48>
    50b8:	42a2      	cmp	r2, r4
    50ba:	bf2c      	ite	cs
    50bc:	2000      	movcs	r0, #0
    50be:	2001      	movcc	r0, #1
}
    50c0:	b003      	add	sp, #12
    50c2:	bd30      	pop	{r4, r5, pc}

000050c4 <z_device_state_init>:
}
    50c4:	4770      	bx	lr

000050c6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    50c6:	b138      	cbz	r0, 50d8 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    50c8:	68c3      	ldr	r3, [r0, #12]
    50ca:	8818      	ldrh	r0, [r3, #0]
    50cc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    50d0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    50d4:	4258      	negs	r0, r3
    50d6:	4158      	adcs	r0, r3
}
    50d8:	4770      	bx	lr

000050da <arch_system_halt>:
	__asm__ volatile(
    50da:	f04f 0220 	mov.w	r2, #32
    50de:	f3ef 8311 	mrs	r3, BASEPRI
    50e2:	f382 8812 	msr	BASEPRI_MAX, r2
    50e6:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    50ea:	e7fe      	b.n	50ea <arch_system_halt+0x10>

000050ec <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    50ec:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    50ee:	f7ff fff4 	bl	50da <arch_system_halt>

000050f2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    50f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50f4:	4605      	mov	r5, r0
    50f6:	460e      	mov	r6, r1
    50f8:	f04f 0320 	mov.w	r3, #32
    50fc:	f3ef 8711 	mrs	r7, BASEPRI
    5100:	f383 8812 	msr	BASEPRI_MAX, r3
    5104:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5108:	f7ff f828 	bl	415c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    510c:	4631      	mov	r1, r6
    510e:	4604      	mov	r4, r0
    5110:	4628      	mov	r0, r5
    5112:	f7ff ffeb 	bl	50ec <k_sys_fatal_error_handler>
	__asm__ volatile(
    5116:	f387 8811 	msr	BASEPRI, r7
    511a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    511e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5120:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5124:	f7fc bb40 	b.w	17a8 <z_impl_k_thread_abort>

00005128 <z_early_memset>:
	(void) memset(dst, c, n);
    5128:	f7ff bbb1 	b.w	488e <memset>

0000512c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    512c:	f7ff bba4 	b.w	4878 <memcpy>

00005130 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5130:	f3ef 8005 	mrs	r0, IPSR
}
    5134:	3800      	subs	r0, #0
    5136:	bf18      	it	ne
    5138:	2001      	movne	r0, #1
    513a:	4770      	bx	lr

0000513c <z_pm_save_idle_exit>:
{
    513c:	b508      	push	{r3, lr}
	pm_system_resume();
    513e:	f7fb ffc3 	bl	10c8 <pm_system_resume>
}
    5142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    5146:	f7ff be96 	b.w	4e76 <sys_clock_idle_exit>

0000514a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    514a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    514e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5150:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5152:	2300      	movs	r3, #0
	node->prev = NULL;
    5154:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    5158:	4770      	bx	lr

0000515a <unpend_thread_no_timeout>:
{
    515a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    515c:	f7ff fff5 	bl	514a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5160:	7b43      	ldrb	r3, [r0, #13]
    5162:	f023 0302 	bic.w	r3, r3, #2
    5166:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    5168:	2300      	movs	r3, #0
    516a:	6083      	str	r3, [r0, #8]
}
    516c:	bd08      	pop	{r3, pc}

0000516e <z_thread_timeout>:
{
    516e:	b510      	push	{r4, lr}
    5170:	4601      	mov	r1, r0
	__asm__ volatile(
    5172:	f04f 0320 	mov.w	r3, #32
    5176:	f3ef 8411 	mrs	r4, BASEPRI
    517a:	f383 8812 	msr	BASEPRI_MAX, r3
    517e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    5182:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    5186:	f013 0f28 	tst.w	r3, #40	; 0x28
    518a:	d10d      	bne.n	51a8 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    518c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5190:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    5192:	b10b      	cbz	r3, 5198 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    5194:	f7ff ffe1 	bl	515a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5198:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    519c:	f023 0314 	bic.w	r3, r3, #20
    51a0:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    51a4:	f7fe fda6 	bl	3cf4 <ready_thread>
	__asm__ volatile(
    51a8:	f384 8811 	msr	BASEPRI, r4
    51ac:	f3bf 8f6f 	isb	sy
}
    51b0:	bd10      	pop	{r4, pc}

000051b2 <add_to_waitq_locked>:
{
    51b2:	b538      	push	{r3, r4, r5, lr}
    51b4:	4604      	mov	r4, r0
    51b6:	460d      	mov	r5, r1
	unready_thread(thread);
    51b8:	f7fe fdd0 	bl	3d5c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    51bc:	7b63      	ldrb	r3, [r4, #13]
    51be:	f043 0302 	orr.w	r3, r3, #2
    51c2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    51c4:	b1e5      	cbz	r5, 5200 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    51c6:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    51c8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51ca:	429d      	cmp	r5, r3
    51cc:	d109      	bne.n	51e2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    51ce:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    51d0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    51d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    51d6:	606c      	str	r4, [r5, #4]
}
    51d8:	e012      	b.n	5200 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    51da:	686a      	ldr	r2, [r5, #4]
    51dc:	4293      	cmp	r3, r2
    51de:	d0f6      	beq.n	51ce <add_to_waitq_locked+0x1c>
    51e0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    51e2:	2b00      	cmp	r3, #0
    51e4:	d0f3      	beq.n	51ce <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    51e6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    51ea:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    51ee:	428a      	cmp	r2, r1
    51f0:	d0f3      	beq.n	51da <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    51f2:	4291      	cmp	r1, r2
    51f4:	ddf1      	ble.n	51da <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    51f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    51f8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    51fc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    51fe:	605c      	str	r4, [r3, #4]
}
    5200:	bd38      	pop	{r3, r4, r5, pc}

00005202 <z_ready_thread>:
{
    5202:	b510      	push	{r4, lr}
	__asm__ volatile(
    5204:	f04f 0320 	mov.w	r3, #32
    5208:	f3ef 8411 	mrs	r4, BASEPRI
    520c:	f383 8812 	msr	BASEPRI_MAX, r3
    5210:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    5214:	f7fe fd6e 	bl	3cf4 <ready_thread>
	__asm__ volatile(
    5218:	f384 8811 	msr	BASEPRI, r4
    521c:	f3bf 8f6f 	isb	sy
}
    5220:	bd10      	pop	{r4, pc}

00005222 <z_unpend_first_thread>:
{
    5222:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5224:	f04f 0320 	mov.w	r3, #32
    5228:	f3ef 8511 	mrs	r5, BASEPRI
    522c:	f383 8812 	msr	BASEPRI_MAX, r3
    5230:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5234:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5236:	42a0      	cmp	r0, r4
    5238:	d00d      	beq.n	5256 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    523a:	b134      	cbz	r4, 524a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    523c:	4620      	mov	r0, r4
    523e:	f7ff ff8c 	bl	515a <unpend_thread_no_timeout>
    5242:	f104 0018 	add.w	r0, r4, #24
    5246:	f000 f81e 	bl	5286 <z_abort_timeout>
	__asm__ volatile(
    524a:	f385 8811 	msr	BASEPRI, r5
    524e:	f3bf 8f6f 	isb	sy
}
    5252:	4620      	mov	r0, r4
    5254:	bd38      	pop	{r3, r4, r5, pc}
    5256:	2400      	movs	r4, #0
    5258:	e7f7      	b.n	524a <z_unpend_first_thread+0x28>

0000525a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    525a:	4603      	mov	r3, r0
    525c:	b920      	cbnz	r0, 5268 <z_reschedule_irqlock+0xe>
    525e:	f3ef 8205 	mrs	r2, IPSR
    5262:	b90a      	cbnz	r2, 5268 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    5264:	f7fc b8ba 	b.w	13dc <arch_swap>
    5268:	f383 8811 	msr	BASEPRI, r3
    526c:	f3bf 8f6f 	isb	sy
}
    5270:	4770      	bx	lr

00005272 <z_reschedule_unlocked>:
	__asm__ volatile(
    5272:	f04f 0320 	mov.w	r3, #32
    5276:	f3ef 8011 	mrs	r0, BASEPRI
    527a:	f383 8812 	msr	BASEPRI_MAX, r3
    527e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5282:	f7ff bfea 	b.w	525a <z_reschedule_irqlock>

00005286 <z_abort_timeout>:
{
    5286:	b510      	push	{r4, lr}
    5288:	f04f 0220 	mov.w	r2, #32
    528c:	f3ef 8411 	mrs	r4, BASEPRI
    5290:	f382 8812 	msr	BASEPRI_MAX, r2
    5294:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5298:	6803      	ldr	r3, [r0, #0]
    529a:	b13b      	cbz	r3, 52ac <z_abort_timeout+0x26>
			remove_timeout(to);
    529c:	f7ff f810 	bl	42c0 <remove_timeout>
			ret = 0;
    52a0:	2000      	movs	r0, #0
	__asm__ volatile(
    52a2:	f384 8811 	msr	BASEPRI, r4
    52a6:	f3bf 8f6f 	isb	sy
}
    52aa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    52ac:	f06f 0015 	mvn.w	r0, #21
    52b0:	e7f7      	b.n	52a2 <z_abort_timeout+0x1c>

000052b2 <z_get_next_timeout_expiry>:
{
    52b2:	b510      	push	{r4, lr}
	__asm__ volatile(
    52b4:	f04f 0320 	mov.w	r3, #32
    52b8:	f3ef 8411 	mrs	r4, BASEPRI
    52bc:	f383 8812 	msr	BASEPRI_MAX, r3
    52c0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    52c4:	f7fe ffd4 	bl	4270 <next_timeout>
	__asm__ volatile(
    52c8:	f384 8811 	msr	BASEPRI, r4
    52cc:	f3bf 8f6f 	isb	sy
}
    52d0:	bd10      	pop	{r4, pc}

000052d2 <z_set_timeout_expiry>:
{
    52d2:	b570      	push	{r4, r5, r6, lr}
    52d4:	4604      	mov	r4, r0
    52d6:	460d      	mov	r5, r1
	__asm__ volatile(
    52d8:	f04f 0320 	mov.w	r3, #32
    52dc:	f3ef 8611 	mrs	r6, BASEPRI
    52e0:	f383 8812 	msr	BASEPRI_MAX, r3
    52e4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    52e8:	f7fe ffc2 	bl	4270 <next_timeout>
			      || (ticks <= next_to);
    52ec:	2801      	cmp	r0, #1
    52ee:	dd07      	ble.n	5300 <z_set_timeout_expiry+0x2e>
    52f0:	42a0      	cmp	r0, r4
    52f2:	db05      	blt.n	5300 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    52f4:	42a0      	cmp	r0, r4
    52f6:	4629      	mov	r1, r5
    52f8:	bfa8      	it	ge
    52fa:	4620      	movge	r0, r4
    52fc:	f7fd fae6 	bl	28cc <sys_clock_set_timeout>
	__asm__ volatile(
    5300:	f386 8811 	msr	BASEPRI, r6
    5304:	f3bf 8f6f 	isb	sy
}
    5308:	bd70      	pop	{r4, r5, r6, pc}

0000530a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    530a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    530c:	f7ff f8cc 	bl	44a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5310:	bd08      	pop	{r3, pc}

00005312 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    5312:	b108      	cbz	r0, 5318 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    5314:	f7fc bb26 	b.w	1964 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    5318:	4770      	bx	lr

0000531a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    531a:	4770      	bx	lr
